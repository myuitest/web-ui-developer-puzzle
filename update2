cat: .: Is a directory
.idea
.project
.classpath
*.iml
target/
out/
*.log
tmp/
metastore_db/cat: ./allcode.txt: input file is output file
cat: ./clientlifecycle-common-core: Is a directory
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hsbc.gbm.bd.clm</groupId>
        <artifactId>clientlifecycle-common</artifactId>
        <version>2.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <artifactId>clientlifecycle-common-core_${scala.binary.version}</artifactId>

    <profiles>
        <profile>
            <id>spark2</id>
            <dependencies>
                <dependency>
                    <groupId>com.hsbc.gbm.bd.clm</groupId>
                    <artifactId>clientlifecycle-common-hint_2.11</artifactId>
                    <version>${project.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.hsbc.gbm.bd.datafactory</groupId>
                    <artifactId>datafactory-api_${scala.binary.version}</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>spark3</id>
            <dependencies>
                <dependency>
                    <groupId>com.hsbc.gbm.bd.datafactory</groupId>
                    <artifactId>datafactory-api_${scala.binary.version}</artifactId>
                    <exclusions>
                        <exclusion>
                            <groupId>com.fasterxml.jackson.module</groupId>
                            <artifactId>jackson-module-scala_${scala.binary.version}</artifactId>
                        </exclusion>
                    </exclusions>
                </dependency>
                <dependency>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-core</artifactId>
                    <version>2.10.0</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.github.classgraph</groupId>
            <artifactId>classgraph</artifactId>
        </dependency>

        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch-spark-${elasticsearch-spark.version}_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-common</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.binary.version}</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.yaml</groupId>
            <artifactId>snakeyaml</artifactId>
        </dependency>

        <dependency>
            <groupId>com.hubspot.jinjava</groupId>
            <artifactId>jinjava</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-databind</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-compiler</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>.</directory>
                            <includes>
                                <include>**/*.ser</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <source>1.8</source>
                    <target>1.8</target>
                    <fork>true</fork>
                    <compilerArgs>
                        <arg>-XDignore.symbol.file=true</arg>
                        <arg>-Werror</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.scala-tools</groupId>
                <artifactId>maven-scala-plugin</artifactId>
                <version>2.15.2</version>
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                    <args>
                        <arg>-target:jvm-1.8</arg>
                    </args>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>
cat: ./clientlifecycle-common-core/src: Is a directory
cat: ./clientlifecycle-common-core/src/main: Is a directory
cat: ./clientlifecycle-common-core/src/main/resources: Is a directory
cat: ./clientlifecycle-common-core/src/main/resources/template: Is a directory
cat: ./clientlifecycle-common-core/src/main/resources/template/scheduling: Is a directory
#!/bin/bash
set -e

SCRIPT_PATH=`readlink -f $0`
SCRIPT_DIR=$(dirname $(dirname $SCRIPT_PATH))
CURRENT_TIMESTAMP=$(date -d "`date \"+%Y-%m-%d\"`" "+%s")
{% for item in local_env.items() -%}
{{item.key}}={{item.value}}
{% endfor %}

export CURRENT_USER=`whoami`
export KRB5CCNAME=FILE:/tmp/krb5cc_${CURRENT_TIMESTAMP}_`id -u`
{% for item in global_env.items() -%}
export {{item.key}}={{item.value}}
{% endfor %}

cd ${SCRIPT_DIR}/..
echo "$SCRIPT_PATH"
echo "$SCRIPT_DIR"

export app_yaml=${SCRIPT_DIR}/../config/$1/application.yml
export log_properties_file=${SCRIPT_DIR}/../config/$1/log4j.properties

[[ -f ${app_yaml} ]] || export app_yaml=${SCRIPT_DIR}/../config/application.yml
[[ -f ${log_properties_file} ]] || export log_properties_file=${SCRIPT_DIR}/../config/log4j.properties

echo "application.yml path: ${app_yaml}"
echo "log4j.properties path: ${log_properties_file}"

kinit -kt $KEYTAB_LOCATION $CURRENT_USER

source ${SCRIPT_DIR}/utils/parse-yaml.sh ${app_yaml}
source ${SCRIPT_DIR}/utils/ilm-tools.sh

echo "app env: ${app_env}"

declare -A index_names

if [[ x${app_write_es} == x"true" ]]; then
{%- for index_name,index_properties in indexs.items() %}
  {%- set x = loop.index - 1 %}
  {%-  for properties in index_properties.items() %}
  {%- if properties.key == "policy" %}
  create_or_update_policy \
     {{ "-n " + properties.value.name if properties.value.name != null }} \
     {{ "-i " + properties.value.delete_interval if properties.value.delete_interval != null }} \
     {{ "-s " + properties.value.max_size if properties.value.max_size != null }} \
     {{ "-a " + properties.value.max_age if properties.value.max_age != null }} \
     {{ "-d " + properties.value.max_docs if properties.value.max_docs != null }} \
     {{ "-f " if properties.value.force != null && properties.value.force == true }}
  {%- set policy_name = properties.value.name %}
  {%- endif %}
  {%- if properties.key == "template" %}
  create_or_update_template \
     {{ "-n " + index_name + "_template4all" }} \
     {{ "-i " + index_name + "-*" }} \
     -p {{ policy_name }} \
     {{ "-a " + properties.value.rollover_alias if properties.value.rollover_alias != null }} \
     {{ "-f " if properties.value.force != null && properties.value.force == true }}
  index_{{ x }}=`get_finally_index "{{ properties.value.rollover_alias }}" "{{ index_name }}"`
  [[ -z ${index_{{ x }}} ]] && index_{{ x }}=`get_finally_index "{{ properties.value.rollover_alias }}" "{{ index_name }}"`
  [[ -z ${index_{{ x }}} ]] && echo "index is None" && exit 2
    {%- endif %}
  {%- endfor %}
  index_names["{{ index_name }}"]="${index_{{ x }}}"
{%- endfor %}
fi

if [[ x${app_measure} == x"true" ]]; then
  hadoop fs -rm -r -f ${app_measurePath}/${app_name}
  hadoop fs -put ${SCRIPT_DIR}/../measure ${app_measurePath}/${app_name}
fi

cd ${SCRIPT_DIR}

indexs=$(for index_name in ${!index_names[@]};do
  echo -e " ${index_name}=${index_names["${index_name}"]} \c"
done)

set +e

sed -e '/.*{{submitCmd}}/,$s#"#\\"#g'\
    -e 's/.*{{submitCmd}}/CMD="&/'\
    -e '${s/.*/&"/}'\
    -e '$a\
\
echo "Executing : ${CMD}"\
eval ${CMD}\
\
if [[ "$?" == "0" ]]; then\
   exit 0\
else\
   exit 1\
fi' $SCRIPT_DIR/submit-job-fg.sh | bash -s {{ entrypoints[0].name }} ${indexs} ${@:2}

if [[ x${app_measure} == x"true" ]]; then
  hadoop fs -rm -r -f ${app_measurePath}/${app_name}
fi

if [[ ${app_write_es} == "true" ]]; then
  {%- for index_name,index_properties in indexs.items() %}
    {%-  for properties in index_properties.items() %}
      {%- if properties.key == "latest_alias_name" %}
  if [[ `get_index_count ${index_names["{{ index_name }}"]}` -gt 0 ]];then
    create_or_update_alias {{ properties.value }} ${index_names["{{ index_name }}"]}
  fi
      {%- endif %}
    {%- endfor %}
  {%- endfor %}
fi

exit 0cat: ./clientlifecycle-common-core/src/main/resources/template/submit-job-fg: Is a directory
cat: ./clientlifecycle-common-core/src/main/resources/template/submit-job-fg/v1_1: Is a directory
#!/bin/bash

SCRIPT_PATH=`readlink -f $0`
SCRIPT_DIR=`dirname $SCRIPT_PATH`

cd ${SCRIPT_DIR}/..

JOB_NAME=$1
APP_DIR=$PWD
APP_LIB_DIR=$APP_DIR/lib
APP_JAR_DIR=$APP_DIR/jar
APP_CONF_DIR=$APP_DIR/config
ARTIFACT_ID="{{artifact_id}}"
VERSION="{{version}}"

DEP_JARS=
for jar in $APP_LIB_DIR/*.jar
do
  DEP_JARS=$jar,$DEP_JARS
done
DEP_JARS_FINAL=${DEP_JARS%?}

declare -A JOB_CLASSES
declare -A DEFAULTS
declare -A PARAM_OVERRIDES

{% for entrypoint in entrypoints -%}
JOB_CLASSES["{{entrypoint.name}}"]="{{entrypoint.class}}"
{% endfor %}

{% for item in defaults.items() -%}
DEFAULTS["{{item.key}}"]="{{item.value}}"
{% endfor %}

{% for item in param_overrides.items() -%}
PARAM_OVERRIDES["{{item.key}}"]="{{item.value}}"
{% endfor %}

MASTER_NAME="${PARAM_OVERRIDES[${JOB_NAME}__master]:-${DEFAULTS[master]}}"
DEPLOY_MODE="${PARAM_OVERRIDES[${JOB_NAME}__deploy_mode]:-${DEFAULTS[deploy_mode]}}"
QUEUE_NAME="${PARAM_OVERRIDES[${JOB_NAME}__queue]:-${DEFAULTS[queue]}}"
NUM_EXECUTORS="${PARAM_OVERRIDES[${JOB_NAME}__num_executors]:-${DEFAULTS[num_executors]}}"
EXECUTOR_CORES="${PARAM_OVERRIDES[${JOB_NAME}__executor_cores]:-${DEFAULTS[executor_cores]}}"
EXECUTOR_MEMORY="${PARAM_OVERRIDES[${JOB_NAME}__executor_memory]:-${DEFAULTS[executor_memory]}}"
DRIVER_MEMORY="${PARAM_OVERRIDES[${JOB_NAME}__driver_memory]:-${DEFAULTS[driver_memory]}}"
JOB_CONFIG_FILE="${PARAM_OVERRIDES[${JOB_NAME}__config_file]:-${DEFAULTS[config_file]}}"

cd ${SCRIPT_DIR}

{% raw %}
if [ -z "${JOB_CLASSES[$JOB_NAME]}" ]
    then
        echo "Usage: LOGS_BASE_LOCATION=/path/to/logs/base/dir/ KEYTAB_LOCATION=/path/to/keytab submit-job.sh <job-name> [parameters]"
        echo "Available jobs:"
        for item in "${!JOB_CLASSES[@]}"
        do
	        echo "$item"
        done
        exit 1
fi

JOB_CLASS="${JOB_CLASSES[$JOB_NAME]}"
LOG_FILE="$LOGS_BASE_LOCATION/$CURRENT_USER/$ARTIFACT_ID-$VERSION-$JOB_NAME.log"
COMMAND_LINE_ARGS=($@)
TRIMMED_COMMAND_LINE_ARGS=(${COMMAND_LINE_ARGS[@]:1})
ARGS_LEN=${#TRIMMED_COMMAND_LINE_ARGS[@]}

# Substitute environment variable names with actual values
for ((i=0; i<${ARGS_LEN}; i++ ));
do
  CMD_ARG=${TRIMMED_COMMAND_LINE_ARGS[$i]}
  if [[ $CMD_ARG == %* ]] ;
  then
    TRIMMED_COMMAND_LINE_ARGS[$i]=`eval "echo ${CMD_ARG/\%/$}"`
  fi
done
{% endraw %}

echo "ARTIFACT_ID: ${ARTIFACT_ID}" > $LOG_FILE
echo "VERSION: ${VERSION}" >> $LOG_FILE
echo "CURRENT_USER: ${CURRENT_USER}" >> $LOG_FILE
echo "JOB_NAME: ${JOB_NAME}" >> $LOG_FILE
echo "JOB_CLASS: ${JOB_CLASS}" >> $LOG_FILE
echo "JOB_CONFIG_FILE: ${JOB_CONFIG_FILE}" >> $LOG_FILE
echo "MASTER_NAME: ${MASTER_NAME}" >> $LOG_FILE
echo "DEPLOY_MODE: ${DEPLOY_MODE}" >> $LOG_FILE
echo "QUEUE_NAME: ${QUEUE_NAME}" >> $LOG_FILE
echo "NUM_EXECUTORS: ${NUM_EXECUTORS}" >> $LOG_FILE
echo "EXECUTOR_CORES: ${EXECUTOR_CORES}" >> $LOG_FILE
echo "EXECUTOR_MEMORY: ${EXECUTOR_MEMORY}" >> $LOG_FILE
echo "DRIVER_MEMORY: ${DRIVER_MEMORY}" >> $LOG_FILE
echo "LOG_FILE: ${LOG_FILE}" >> $LOG_FILE
echo "COMMAND_LINE_ARGS: ${COMMAND_LINE_ARGS[@]}" >> $LOG_FILE
echo "TRIMMED_COMMAND_LINE_ARGS: ${TRIMMED_COMMAND_LINE_ARGS[@]}" >> $LOG_FILE
echo "KEYTAB_LOCATION: ${KEYTAB_LOCATION}" >> $LOG_FILE

{{spark_home}}/bin/{{ submitCmd }} \
--jars $DEP_JARS_FINAL \
--name "CLM -- $ARTIFACT_ID-$VERSION-$JOB_NAME -- PROD" \
--verbose \
--master ${MASTER_NAME} \
--deploy-mode ${DEPLOY_MODE} \
--queue ${QUEUE_NAME} \
--num-executors ${NUM_EXECUTORS} \
--executor-cores ${EXECUTOR_CORES} \
--executor-memory ${EXECUTOR_MEMORY} \
--driver-memory ${DRIVER_MEMORY} \
{% for conf_item in conf -%}
--conf "{{ conf_item }}" \
{% endfor -%}
--conf "spark.yarn.principal=$CURRENT_USER" \
--conf "spark.yarn.keytab=$KEYTAB_LOCATION" \
{% for file_item in files -%}
--files "{{ file_item }}" \
{% endfor -%}
--class $JOB_CLASS \
"$APP_JAR_DIR/$ARTIFACT_ID-$VERSION.jar" \
"$JOB_NAME" \
$JOB_CONFIG_FILE \
${TRIMMED_COMMAND_LINE_ARGS[@]}
cat: ./clientlifecycle-common-core/src/main/resources/utils: Is a directory
set -x

################################### tools ##############################
function get_curl_body() {
  local api=$1
  local request=$2
  local body="curl ${curl_ssl_options} --user ${spark_es_net_http_auth_user}:${PASSWORD} -s -X${request} ${protocol:-http}://${ADDRESS}${api}"
  echo $body
}

#return finally index name which been wrote
function get_finally_index() {
  local alias_name=$1
  local guess_init_index_name=`echo ${alias_name} | cut -d'-' -f1,2`
  local init_index_name=${2:-$guess_init_index_name}-000001
  local latest_index=$(echo `get_specific_index ${alias_name} 1` | cut -d' ' -f1)
  [[ -z ${latest_index} ]] &&  echo `create_index ${init_index_name} ${alias_name}` >> /dev/null
  [[ -z ${latest_index} ]] && local latest_index=${init_index_name} && local latest_index_count=0 || local latest_index_count=`get_index_count ${latest_index}`
  [[ ${latest_index_count} -eq 0 ]] && local index=${latest_index} || local index=`rollover ${alias_name}`
  echo $index
}

#manual rollover
function rollover() {
  local alias_name=$1
  local response=$(`get_curl_body /${alias_name}/_rollover POST` -H'Content-Type: application/json' -d '
{
  "conditions": {
    "max_age": "10s"
  }
}
')
  local status=$(echo ${response} | grep -Po '"rolled_over":true' | cut -d':' -f2)
  local new_index=$(echo ${response} | grep -Po '"new_index".*?,' | cut -d':' -f2 | cut -d',' -f1 | cut -d'"' -f2)

  [[ $status == "true" ]] || echo "rollover ${alias_name} failed!!!" && exit 1
  echo ${new_index}
}

function get_index_count() {
    local index_name=$1
    local count=$(`get_curl_body /${index_name}/_count GET` | awk -F',' '{ print $1 }'|awk -F':' '{ print $2 }')
    echo $count
}

#query specific alias which point to many indexs, then sort desc then return specific index
#return format: indexname is_write_index
function get_specific_index(){
  local alias_name=$1
  local row_number=$2
  local latest_index=$(`get_curl_body /_cat/aliases/${alias_name} GET` | sort -k2 -n -r  | awk '{print $2,$6}' | sed -n "${row_number}p")
  echo $latest_index
}

function create_or_update_alias(){
  local alias_name=$1
  local index_pattern=$2
  local HTTP_STATUS=$(`get_curl_body /_aliases POST` -H'Content-Type: application/json' -d '
{
    "actions" : [
        {
          "remove" : {
            "index" : "'${index_pattern%-*}'-*",
            "alias" : "'${alias_name}'"
          }
        },
        {
          "add" : {
            "index" : "'${index_pattern}'",
            "alias" : "'${alias_name}'"
          }
        }
    ]
}
')
  check_execute_status $HTTP_STATUS "update alias ${alias_name} to ${index_pattern}"
}

function create_index(){
  local index_name=$1
  local alias_name=$2
  local HTTP_STATUS=$(`get_curl_body /${index_name} PUT` -H'Content-Type: application/json' -d '
{
  "aliases": {
    "'${alias_name}'": {
      "is_write_index":true
    }
  },
  "settings": {
    "number_of_shards": '${number_of_shards}',
    "number_of_replicas": '${number_of_replicas}'
  }
}
')
  check_execute_status $HTTP_STATUS "create index ${index_name}"
}

function create_or_update_policy(){
  local OPTIND
  while getopts ":a:s:d:i:n:f" opt; do
      case $opt in
          a)
             local max_age=$OPTARG
             ;;
          s)
             local max_size=$OPTARG
             ;;
          d)
             local max_docs=$OPTARG
             ;;
          i)
             local delete_interval=$OPTARG
             ;;
          n)
             local policy_name=$OPTARG
             ;;
          f)
             local force=true
             ;;
          \?)
             echo "Unknown parameter"
             exit 1
             ;;
          :)
             echo "None parameter"
             ;;
      esac
  done
  [[ -z $policy_name ]] && echo "Policy_name is None" && exit 3
  if [[ -z $force ]];then
    local policy_exist=`check_exist /_ilm/policy/${policy_name}`
    [[ $policy_exist == "true" ]] && echo "${policy_name} already exist before create, and force is false, so not update it" && return
  fi
  local condition=' '`combine max_size $max_size`' '`combine max_age $max_age`' '`combine max_docs $max_docs`' '
  local HTTP_STATUS=$(`get_curl_body /_ilm/policy/${policy_name} PUT` -H'Content-Type: application/json' -d '
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            '`echo ${condition} | tr ' ' ','`'
          }
        }
      },
      "delete": {
        "min_age": "'${delete_interval}'",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}
')
  check_execute_status $HTTP_STATUS "create or update policy ${policy_name}"
}

function create_or_update_template(){
  local OPTIND
  while getopts ":n:i:p:a:f" opt; do
      case $opt in
          n)
             local template_name=$OPTARG
             ;;
          i)
             local index_patterns=$OPTARG
             ;;
          p)
             local policy_name=$OPTARG
             ;;
          a)
             local rollover_alias=$OPTARG
             ;;
          f)
             local force=true
             ;;
          \?)
             echo "Unknown parameter"
             exit 1
             ;;
          :)
             echo "None parameter"
             ;;
      esac
  done
  [[ -z $template_name ]] && echo "Template name is None" && exit 3
  if [[ -z $force ]];then
    local template_exist=`check_exist /_template/${template_name}`
    [[ $template_exist == "true" ]] && echo "${template_name} already exist before create, and force is false, so not update it" && return
  fi
  local HTTP_STATUS=$(`get_curl_body /_template/${template_name} PUT` -H'Content-Type: application/json' -d '
{
  "index_patterns": ["'${index_patterns}'"],
  "settings": {
    "number_of_shards": '${number_of_shards}',
    "number_of_replicas": '${number_of_replicas}',
    "index.lifecycle.name": "'${policy_name}'",
    "index.lifecycle.rollover_alias": "'${rollover_alias}'"
  }
}
')
  check_execute_status $HTTP_STATUS "create or update template ${template_name}"
}

function check_exist() {
  local api=$1
  local exist=$(`get_curl_body ${api} "GET -I -m 10 -s -o /dev/null -w %{http_code}"`)
  [[ $exist -eq 200 ]] && echo "true" || echo "false"
}

function check_execute_status() {
  local HTTP_STATUS=$1
  local abstract_log=$2
  if grep -v "$GOOD_STATUS" <<< "$HTTP_STATUS"; then
     echo "${abstract_log} failed! $HTTP_STATUS"
     exit 1
  fi
  echo "*****${abstract_log} successed! *****"
}

function combine(){
  local key=$1
  local value=$2
  local result=' '${value:+\"}''${value:+$key}''${value:+\"}''${value:+:}''${value:+\"}''${value}''${value:+\"}' '
  echo $result
}

#########################  init  ###################################
[[ ${spark_es_net_ssl:-false} == "true" ]] && curl_ssl_options="-k" && protocol="https"
GOOD_STATUS='"acknowledged":true'

if [[ -z $PASSWORD ]];then
  [[ ${app_env} != "prd" && ${app_env} != "prod" ]] &&
  PASSWORD=$(echo "RVZta0lpSExtRnpEemlKZQo=" | openssl enc -base64 -d) ||
  PASSWORD=$(echo "djRXVkt6TXhVSy83OHp2Nwo=" | openssl enc -base64 -d)
fi

[[ -z $number_of_replicas ]] && number_of_replicas=1
[[ -z $number_of_shards ]] && number_of_shards=3

function check_es_node() {
  if [[ -z $1 ]];then
    return 0
  fi
  http_code=$(`get_curl_body ${1} "GET -I -m 10 -s -o /dev/null -w %{http_code}"`)
  echo "$http_code"
}

es_nodes=(${spark_es_nodes//,/ })

for node in "${es_nodes[@]}"
do
  [[ $(check_es_node "${node}") -eq 200 ]] && ADDRESS=$node && break
done

[[ -z ${ADDRESS} ]] && echo "NoNodeAvailableException[None of the configured es nodes are available]" && exit 1

echo "connecting to host :$ADDRESS by user : ${spark_es_net_http_auth_user}"#!/bin/bash

#notes: when source this script then you can use value which setup in application.yml

function parse_yaml() {
    local yaml_file=$1
    local prefix=$2
    local s='[[:space:]]*'
    local w='[a-zA-Z0-9_.-]*'
    local fs="$(echo @|tr @ '\034')"
    (
        sed -ne '/^--/s|--||g; s/\s*$//g;' \
            -e "/#.*[\"\']/!s| #.*||g; /^#/s|#.*||g;" \
            -e  "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)${s}[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" |
        awk -F"$fs" '{
            indent = length($1)/2;
            if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
            vname[indent] = $2;
            for (i in vname) {if (i > indent) {delete vname[i]}}
                if (length($3) > 0) {
                    vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                    printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
                }
            }' |
        sed -re 's/_=/+=/g' \
            -e ':1;s/[\.\-](.*=.*)/_\1/;t1'
    ) < "$yaml_file"
}
function create_variables() {
    local yaml_file="$1"
    eval "$(parse_yaml $yaml_file)"
}

yaml_file=$1
create_variables $yaml_filecat: ./clientlifecycle-common-core/src/main/scala: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm: Is a directory
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm/annotation: Is a directory
package com.hsbc.gbm.bd.clm.annotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface SparkJobName {
    String value();
}
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm/env: Is a directory
package com.hsbc.gbm.bd.clm.env

class AppConfig(config: Map[String, Any]) {

  def apply[T](key: String): T = {
    appConfig(key).asInstanceOf[T]
  }

  def apply[T](key: String, defaultValue: T): T = {
    appConfig.getOrElse(key, defaultValue).asInstanceOf[T]
  }

  private lazy val appConfig: Map[String, Any] = {
    config
      .filter({ case (k, v) => k.startsWith("app.") })
      .map({ case (k, v) => (k.substring("app.".length), v) })
  }
}
package com.hsbc.gbm.bd.clm.env

case class RawJobParams(rawParams: Array[String]) {

  val pairs: Array[(String, String)] = rawParams.map(param => toKeyValuePair(param))

  def apply(position: Int): Option[String] = {
    pairs.lift(position).map(_._2)
  }

  def apply(name: String): Option[String] = {
    val found = pairs.collectFirst({ case (k, v) if k.equals(name.toLowerCase) => v })
    if(found.isDefined) Option(found.get) else None
  }

  def apply(name: String, default: String): Option[String] = {
    val found = pairs.collectFirst({ case (k, v) if k.equals(name.toLowerCase) => v })
    if(found.isDefined) Option(found.get) else Option(default)
  }

  private def toKeyValuePair(param: String): (String, String) = {
    val fragments = param.split("=")
    if (fragments.length == 1) ("", fragments.head) else (fragments(0).toLowerCase, fragments(1))
  }

  override def toString: String = {
    val paramString = pairs.map(pair => if(pair._1 == "") s"${pair._2}" else  s"${pair._1}=${pair._2}").mkString(",")
    s"RawJobParams[$paramString]"
  }
}
package com.hsbc.gbm.bd.clm.env

import java._
import java.io.FileInputStream
import java.security.{InvalidAlgorithmParameterException, InvalidKeyException, NoSuchAlgorithmException}
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.UUID

import com.hsbc.gbm.bd.clm.utils.EncryptionUtils
import javax.crypto.{BadPaddingException, IllegalBlockSizeException, NoSuchPaddingException}
import org.apache.spark.SparkConf
import org.apache.spark.SPARK_VERSION
import org.apache.spark.sql.SparkSession
import org.yaml.snakeyaml.Yaml

import scala.collection.JavaConverters._

trait SparkEnv {

  def appName(): String

  def configLocation(): String

  private val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
  val timeBase: String = ZonedDateTime.now().format(formatter)
  val date: String = timeBase.substring(0, 10).replaceAll("[-|:'T]", "")
  val timestamp: String = timeBase.substring(0, 19).replaceAll("[-|:'T]", "")

  lazy val sparkConfig: SparkConf = {
    val sparkProperties: Map[String, String] = config
      .filter({ case (k, _) => k.startsWith("spark.") })
      .map({ case (k, v) =>
        val truncatedKey = k.substring("spark.".length)
        (truncatedKey, decryptValueIfApplicable(truncatedKey, v))
      })

    if (SPARK_VERSION.startsWith("3")) new SparkConf().setAll(sparkProperties)
    else {
      val kryoClasses = sparkKryoClasses(sparkProperties)
      new SparkConf().setAll(sparkProperties).registerKryoClasses(kryoClasses)
    }
  }

  lazy val appConfig: AppConfig = new AppConfig(config)

  lazy val spark: SparkSession =
    SparkSession
      .builder()
      .master(sparkConfig.get("spark.master", "local"))
      .appName(appName())
      .config(sparkConfig)
      .config("spark.runtime.config.time.date", date)
      .config("spark.runtime.config.time.timestamp", timestamp)
      .config("spark.sql.crossJoin.enabled", value = true)
      .enableHiveSupport()
      .getOrCreate()

  private lazy val config: Map[String, Any] = {
    val inputStream = new FileInputStream(configLocation())
    val valuesMap: util.Map[String, Object] = new Yaml().load(inputStream)
    flattenKeys("", valuesMap)
  }

  private def flattenKeys(parentKey: String, value: Any): Map[String, Any] = {
    val keySeparator = if (parentKey.isEmpty) "" else "."
    value match {
      case jMap: util.Map[String, Any] =>
        val sMap = jMap.asScala.toMap
        sMap.flatMap({ case (k, v) => flattenKeys(s"""$parentKey$keySeparator$k""", v) }) ++ Map((parentKey, sMap))
      case jList: util.List[Any] =>
        Map((parentKey, jList.asScala.toList))
      case _ =>
        Map((parentKey, value))
    }
  }

  private def sparkKryoClasses(sparkProperties: Map[String, String]): Array[Class[_]] = try {
    val kryoClassesString = sparkProperties.getOrElse("kryoserializer", "")
    kryoClassesString.split(",").map(className => Class.forName(className))
  } catch {
    case e: Exception =>
      throw new RuntimeException("Error loading kryo classes ", e)
  }

  private def decryptValueIfApplicable(key: String, value: Any): String = try
    key match {
      case "es.net.http.auth.pass" =>
        EncryptionUtils.decrypt(value.toString)
      case "es.xpack.security.user" =>
        val fragments = if (value != null) value.toString.split(":") else Array()
        if (fragments.length > 1) fragments(0) + ":" + EncryptionUtils.decrypt(fragments(1))
        else if (fragments.length > 0) fragments(0)
        else null
      case "javax.jdo.option.ConnectionURL" if value.toString.contains("derby") =>
        value.toString.replaceFirst("metastore_db", s"metastore_db/${UUID.randomUUID().toString}")
      case _ =>
        value.toString
    }
  catch {
    case e@(_: InvalidKeyException | _: NoSuchAlgorithmException | _: NoSuchPaddingException | _: InvalidAlgorithmParameterException | _: IllegalBlockSizeException | _: BadPaddingException) =>
      throw new RuntimeException(e)
  }
}
package com.hsbc.gbm.bd.clm.env

trait SparkJob extends SparkEnv {
  def process(): Unit

  def close(): Unit = spark.close()

  def applicationId: String = spark.sparkContext.applicationId
}
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm/renderer: Is a directory
package com.hsbc.gbm.bd.clm.renderer

import java.io.{File, InputStream}
import java.nio.file.{Files, Paths}

import com.hsbc.gbm.bd.clm.env.RawJobParams
import org.apache.commons.io.IOUtils
import org.yaml.snakeyaml.Yaml

import scala.collection.JavaConverters._

object GenericTemplateRenderer {

  def render(params: RawJobParams): Unit = {
    val yaml: Yaml = new Yaml
    val deploymentDescStream: InputStream = this.getClass.getClassLoader.getResourceAsStream(params("deploymentYamlPath").get)
    val context: Map[String, AnyRef] = yaml.load(deploymentDescStream).asInstanceOf[java.util.LinkedHashMap[String, AnyRef]].asScala.toMap

    if (params("templateVersion").isEmpty) throw new IllegalArgumentException("Template version is missing from the metadata section")

    if (params("templateId").isEmpty) throw new IllegalArgumentException("Template ID is missing from the metadata section")

    if (Files.notExists(Paths.get(params("outputDir").get))) new File(params("outputDir").get).getParentFile.mkdirs

    val templateInfo = TemplateInfo.getBy(params("templateId").get, params("templateVersion").get)
    val templatePath = templateInfo.templateFilePath
    val templateResource = this.getClass.getClassLoader.getResource(templatePath)
    val template = IOUtils.toString(templateResource)
    val renderer = templateInfo.renderer
    renderer.render(params, template, context)
  }

  def main(args: Array[String]): Unit = {
    // artifactId
    // artifactVersion
    // deploymentYamlPath
    // outputDir
    // templateId
    // templateVersion
    // printOutput
    // sparkHome
    val params = RawJobParams(args)
    render(params)
  }
}
package com.hsbc.gbm.bd.clm.renderer

import java.io.{File, FileWriter, IOException}

import com.hsbc.gbm.bd.clm.env.RawJobParams
import com.hubspot.jinjava.Jinjava
import org.apache.commons.io.IOUtils

import scala.collection.JavaConverters._

class SparkSubmitScriptRenderer extends TemplateRenderer {

  override def render(params: RawJobParams, template: String, context: Map[String, AnyRef]): Unit = {
    val jinjava: Jinjava = new Jinjava

    val paramOverrides: Map[String, AnyRef] = getParameterOverrides(context)

    val ctx: Map[String, AnyRef] = (context +
      ("version" -> params("artifactVersion").get) +
      ("artifact_id" -> params("artifactId").get) +
      ("spark_home" -> params("sparkHome").get) +
      ("submitCmd" -> params("submitCmd").getOrElse("spark-submit")) +
      ("param_overrides" -> paramOverrides)
      ).mapValues {
      case map: Map[String, AnyRef] =>
        map.asJava
      case x => x
    }

    val entryPointScriptContent = IOUtils.toString(this.getClass.getClassLoader.getResource("template/scheduling/clm-cda-work.j2"))

    val renderedTemplate: String = jinjava.render(template, ctx.asJava)
    val renderedTemplate2: String = jinjava.render(entryPointScriptContent, ctx.asJava)

    try {
      val file = new File(params("outputDir").get)
      val fw1: FileWriter = new FileWriter(file.getPath)
      val toolsPath = new File(file.getParent + "/utils")
      val schedulePath = new File(file.getParent + "/scheduling")
      if (!toolsPath.exists()) toolsPath.mkdirs()
      if (!schedulePath.exists()) schedulePath.mkdirs()
      val fw2: FileWriter = new FileWriter(toolsPath.getPath + "/ilm-tools.sh")
      val fw3: FileWriter = new FileWriter(toolsPath.getPath + "/parse-yaml.sh")
      val fw4: FileWriter = new FileWriter(schedulePath.getPath + "/clm-cda-work.sh")
      val ilmScriptContent = IOUtils.toString(this.getClass.getClassLoader.getResource("utils/ilm-tools.sh"))
      val parseYamlScriptContent = IOUtils.toString(this.getClass.getClassLoader.getResource("utils/parse-yaml.sh"))
      try {
        fw1.write(renderedTemplate)
        fw2.write(ilmScriptContent)
        fw3.write(parseYamlScriptContent)
        fw4.write(renderedTemplate2)
      }
      catch {
        case e: IOException => throw new RuntimeException(e)
      }
      finally {
        if (fw1 != null) fw1.close()
        if (fw2 != null) fw2.close()
        if (fw3 != null) fw3.close()
        if (fw4 != null) fw4.close()
      }
    }

    if (params("printOutput", "false").get.toBoolean) {
      println("Generated submit script:\n\n" + renderedTemplate)
    }
  }

  private def getParameterOverrides(context: Map[String, AnyRef]): Map[String, AnyRef] = {
    val entrypoints: List[Map[String, AnyRef]] = context("entrypoints").asInstanceOf[java.util.ArrayList[java.util.LinkedHashMap[String, AnyRef]]].asScala.toList.map(x => x.asScala.toMap)
    if (entrypoints == null) Map[String, AnyRef]() else entrypoints.flatMap(toEntrypointOverrides).toMap
  }

  private def toEntrypointOverrides(entrypoint: Map[String, AnyRef]): Map[String, AnyRef] = {
    val jobName: String = entrypoint("name").asInstanceOf[String]

    entrypoint.filter(x => !(x._1 == "name" || x._1 == "class"))
      .map(x => (s"${jobName}__${x._1}", x._2))
  }
}
package com.hsbc.gbm.bd.clm.renderer

object TemplateInfo extends Enumeration {
  val submitJobs = List(
    SubmitJob("submit-job-fg", "1.1", "template/submit-job-fg/v1_1/submit-job-fg.j2", new SparkSubmitScriptRenderer)
  )

  def getBy(templateName: String, templateVersion: String): SubmitJob = {
    submitJobs.filter(x => templateName.startsWith(x.templateName) && x.templateVersion == templateVersion).head
  }
}

case class SubmitJob(templateName: String, templateVersion: String, templateFilePath: String, renderer: TemplateRenderer)package com.hsbc.gbm.bd.clm.renderer

import com.hsbc.gbm.bd.clm.env.RawJobParams

trait TemplateRenderer {
  def render(params: RawJobParams, template: String, context: Map[String, AnyRef]): Unit
}
cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm/runner: Is a directory
package com.hsbc.gbm.bd.clm.runner

import com.hsbc.gbm.bd.clm.annotation.SparkJobName
import com.hsbc.gbm.bd.clm.env.{RawJobParams, SparkJob}
import io.github.classgraph.ClassGraph

import scala.collection.JavaConversions._
import scala.language.postfixOps

class GenericSparkJobRunner(jobName: String, configPath: String, params: Array[String]) {
  protected def closeJob(job: SparkJob): Unit = {
    job.close()
  }

  protected def run(): Unit = {
    val jobClassName = jobMappings()(jobName)
    val jobClass = Thread.currentThread.getContextClassLoader.loadClass(jobClassName)
    runScalaJob(jobClass.asInstanceOf[Class[SparkJob]])
  }

  protected def runScalaJob(jobClass: Class[SparkJob]): Unit = {
    val jobParams: RawJobParams = RawJobParams(params)

    val sparkJob: SparkJob = instantiateSparkJob(jobClass, jobParams)
    sparkJob.process()
    closeJob(sparkJob)
  }

  private def instantiateSparkJob(jobClass: Class[SparkJob], jobParams: RawJobParams): SparkJob = {
    jobClass
      .getConstructors
      .filter(_.getParameterTypes.length == 3)
      .find(constructor => {
        constructor.getParameterTypes()(0).isAssignableFrom(classOf[String]) &&
          constructor.getParameterTypes()(1).isAssignableFrom(classOf[String]) &&
          constructor.getParameterTypes()(2).isAssignableFrom(classOf[RawJobParams])
      })
      .get
      .newInstance(jobName, configPath, jobParams)
      .asInstanceOf[SparkJob]
  }

  protected def jobMappings(): Map[String, String] = {
    val scanResult = new ClassGraph().enableAllInfo.acceptPackages("com.hsbc.gbm.bd.clm").scan
    val classInfoList = scanResult.getClassesImplementing(classOf[SparkJob].getName)
    classInfoList.toList
      .map(classInfo => (classInfo.getAnnotationInfo(classOf[SparkJobName].getName), classInfo.getName))
      .filter(_._1 != null)
      .map(tuple => (tuple._1.getParameterValues.getValue("value").toString, tuple._2))
      .toMap
  }
}

object GenericSparkJobRunner {
  def main(args: Array[String]): Unit = {
    val jobName = args(0)
    val configPath = args(1)
    val params = args.slice(from = 2, until = args.length)

    new GenericSparkJobRunner(jobName, configPath, params).run()
  }
}



cat: ./clientlifecycle-common-core/src/main/scala/com/hsbc/gbm/bd/clm/utils: Is a directory
package com.hsbc.gbm.bd.clm.utils

import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.{FileSystem, Path}
import org.apache.spark.sql.SparkSession

object CsvUnitTestUtils {

  def csvToParquet(path: String, partition_col: Option[String] = None)(implicit spark: SparkSession): Unit = {
    val hadoopConf: Configuration = spark.sparkContext.hadoopConfiguration
    val fs: FileSystem = FileSystem.get(hadoopConf)

    val files = fs.listFiles(new Path(path), true)

    while (files.hasNext) {

      val path = files.next().getPath
      val df = spark.read.option("delimiter", "|").option("header", "true").csv(path.toString)
      df.storeAsParquet(path.getName.substring(0, if (path.getName.contains(".")) path.getName.lastIndexOf(".") else path.getName.length).concat(".parq"), partition_col)
    }
  }


  def csvToHiveTable(path: String, target: Option[String] = None)(implicit spark: SparkSession): Unit = {
    val hadoopConf: Configuration = spark.sparkContext.hadoopConfiguration
    val fs: FileSystem = FileSystem.get(hadoopConf)
    val files = fs.listFiles(new Path(path), true)

    while (files.hasNext) {

      val path = files.next().getPath
      val tableName = path.getName
      val dbName = path.getParent.getName
      val df = spark.read.option("delimiter", "|").option("header", "true").csv(path.toString)
      df.createOrReplaceTempView("temp")

      val location = target.map(t => s"$t/$dbName").getOrElse(dbName)

      val dbs = spark.sql(s"show databases").rdd.distinct().map(r => r(0).toString).collect.toList

      if (dbs.contains(dbName)) {
        spark.sql(s"""use $dbName""")
        spark.sql(s"drop table if exists $tableName")
        spark.sql(s" create table $tableName as select * from temp")
      } else {
        spark.sql(s"CREATE DATABASE $dbName location '$location' ")
        spark.sql(s"""use $dbName""")
        spark.sql(s"drop table if exists $tableName")
        spark.sql(s" create table $tableName as select * from temp")
      }
    }
  }
}
package com.hsbc.gbm.bd.clm.utils

import org.apache.commons.codec.binary.Base64
import javax.crypto._
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.security._
import java.util

object EncryptionUtils {
  private val KEY = "DATA-PRODUCTS"
  private val DEFAULT_ALGORITHM = "AES"
  private val DEFAULT_CYPHER_TRANSFORMATION = "AES/CBC/PKCS5Padding"
  private val DEFAULT_HASHING = "HmacSHA256"
  private val IV_LENGTH = 16
  @transient private val secureRandom = new SecureRandom
  private val NONENCRYPTIONPREFIX = "NONENC_"

  private def getHmacSha256 = {
    val secret = "SecretForHmacSha256A"
    val sha256_HMAC = Mac.getInstance(DEFAULT_HASHING)
    val secret_key = new SecretKeySpec(secret.getBytes, DEFAULT_HASHING)
    sha256_HMAC.init(secret_key)
    sha256_HMAC.doFinal(KEY.getBytes)
  }

  def encrypt(password: String): String = {
    val initializationVector = getRandomInitializationVector
    val iv = new IvParameterSpec(initializationVector)
    val skeySpec = new SecretKeySpec(getHmacSha256, DEFAULT_ALGORITHM)
    val cipher = Cipher.getInstance(DEFAULT_CYPHER_TRANSFORMATION)
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv)
    val encrypted = cipher.doFinal(password.getBytes)
    val resultWithIv = new Array[Byte](IV_LENGTH + encrypted.length)
    System.arraycopy(initializationVector, 0, resultWithIv, 0, IV_LENGTH)
    System.arraycopy(encrypted, 0, resultWithIv, IV_LENGTH, encrypted.length)
    new String(Base64.encodeBase64String(resultWithIv))
  }

  private def getRandomInitializationVector = {
    new IvParameterSpec(secureRandom.generateSeed(IV_LENGTH)).getIV.clone.asInstanceOf[Array[Byte]]
  }

  def decrypt(encryptPassword: String): String = {
    if (encryptPassword != null && encryptPassword.indexOf(NONENCRYPTIONPREFIX) == 0) return encryptPassword.replaceFirst(NONENCRYPTIONPREFIX, "")
    val skeySpec = new SecretKeySpec(getHmacSha256, DEFAULT_ALGORITHM)
    val cipher = Cipher.getInstance(DEFAULT_CYPHER_TRANSFORMATION)
    val cipherText = Base64.decodeBase64(encryptPassword)
    val iv = new IvParameterSpec(util.Arrays.copyOfRange(cipherText, 0, IV_LENGTH))
    cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv)
    val original = cipher.doFinal(cipherText, IV_LENGTH, cipherText.length - IV_LENGTH)
    new String(original)
  }

  private def exitIfSecurityPolicyIsLimited(): Unit = {
    try {
      val maxAllowedKeyLength = Cipher.getMaxAllowedKeyLength("AES/CBC/PKCS5Padding")
      if (maxAllowedKeyLength < 256) {
        println("JDK Security policy in " + System.getProperty("java.home") + " limits keys to " + maxAllowedKeyLength + " bits. Please upgrade the security policy on this JDK.")
        System.exit(1)
      }
      println("JDK security policy is unlimited!")
    } catch {
      case e: NoSuchAlgorithmException =>
        println("Not able to locate algorithms: " + e)
        System.exit(1)
    }
  }
}
package com.hsbc.gbm.bd.clm.utils

import java.net.URI
import java.security.cert.X509Certificate

import javax.net.ssl.{HostnameVerifier, SSLContext, SSLSession, X509TrustManager}
import org.apache.http.auth.{AuthScope, UsernamePasswordCredentials}
import org.apache.http.client.methods.{CloseableHttpResponse,HttpGet}
import org.apache.http.config.RegistryBuilder
import org.apache.http.conn.socket.{ConnectionSocketFactory, PlainConnectionSocketFactory}
import org.apache.http.conn.ssl.SSLConnectionSocketFactory
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.{BasicCredentialsProvider, CloseableHttpClient, HttpClients}
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.spark.SparkConf
import org.elasticsearch.hadoop.util.StringUtils

import scala.util.parsing.json.JSON

object EsHttpClientUtils {

  def getEsCount(indexName: String)(implicit sparkConf: SparkConf): Int = {
    val client = getHttpClient()


    val httpGet = new HttpGet()
    val esNodes = sparkConf.get("es.nodes")
    val esDefaultPort = sparkConf.get("es.port")

    @scala.annotation.tailrec
    def getHttpResponse(esNodes: String): CloseableHttpResponse = {
      if (!StringUtils.hasText(esNodes)) return null
      val node = esNodes.split(",").head
      val Array(host, port) = (if (node.contains(":")) node else s"${node.trim}:${esDefaultPort}").split(":")
      val esNode = s"${host}:${port}"
      val searchUrl = s"https://${esNode}/${indexName}/_count"

      httpGet.setURI(URI.create(searchUrl))

      val httpResponse = try {
        client.execute(httpGet)
      } catch {
        case e: Exception => null
      }

      httpResponse match {
        case x: CloseableHttpResponse if x.getStatusLine.getStatusCode == 200 => x
        case _ => getHttpResponse(if (esNodes.contains(",")) esNodes.substring(esNodes.indexOf(",") + 1) else "")
      }
    }

    val httpResponse = getHttpResponse(esNodes)
    if (httpResponse == null) throw new RuntimeException(s"httpResponse is null, it means all es node can not response a available result")

    val jsonOption = JSON.parseFull(EntityUtils.toString(httpResponse.getEntity, "UTF-8"))
    EntityUtils.consume(httpResponse.getEntity)
    httpResponse.close()
    client.close()

    def regJson(json: Option[Any]): Map[String, Any] = json match {
      case Some(map: Map[String, Any]) => map
    }

    @scala.annotation.tailrec
    def getFromJsonByXpath(input: Option[Any], xPath: String): Any = {
      val paths = xPath.split("\\.")
      val json = regJson(input).get(paths(0))
      if (paths.length > 1) getFromJsonByXpath(json, xPath.substring(xPath.indexOf(".") + 1)) else json.get
    }

    getFromJsonByXpath(jsonOption, "count").toString.toFloat.toInt
  }

  private def createSSLContextIgnoreVerifySSL(): SSLContext = {
    val sc = SSLContext.getInstance("TLSv1.2")
    val trustManager = new X509TrustManager() {
      override def checkClientTrusted(x509Certificates: Array[X509Certificate], s: String): Unit = {
      }

      override def checkServerTrusted(x509Certificates: Array[X509Certificate], s: String): Unit = {
      }

      override def getAcceptedIssuers: Array[X509Certificate] = null
    }
    sc.init(null, Array(trustManager), null)
    sc
  }

  //if you want to know why I use this way rather than dataframe/rdd api.
  // please through this link https://github.com/elastic/elasticsearch-hadoop/issues/867
  def getHttpClient()(implicit sparkConf: SparkConf): CloseableHttpClient = {
    val sslContext = createSSLContextIgnoreVerifySSL()

    val username = sparkConf.get("es.net.http.auth.user")
    val password = sparkConf.get("es.net.http.auth.pass")
    val credentials = new UsernamePasswordCredentials(username, password)
    val provider = new BasicCredentialsProvider()
    provider.setCredentials(AuthScope.ANY, credentials)

    val socketFactoryRegistry = RegistryBuilder.create[ConnectionSocketFactory]()
      .register("http", PlainConnectionSocketFactory.INSTANCE)
      .register("https", new SSLConnectionSocketFactory(sslContext, Array("TLSv1.1", "TLSv1.2", "TLSv1"), null, new HostnameVerifier {
        override def verify(s: String, sslSession: SSLSession): Boolean = true
      }))
      .build()

    val connManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry)
    HttpClients.custom().setConnectionManager(connManager)
      .setDefaultCredentialsProvider(provider)
      .build()
  }
}
package com.hsbc.gbm.bd.clm.utils

import java.io.{File, FileInputStream, FileWriter}
import java.text.SimpleDateFormat
import java.util
import java.util.Date

import org.apache.commons.lang3.StringUtils
import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.{FileSystem, FileUtil, Path}
import org.apache.spark.sql.{Column, Row, SparkSession}
import org.apache.spark.sql.functions.col
import org.apache.spark.sql.types.{StringType, StructField, StructType}
import org.yaml.snakeyaml.{DumperOptions, Yaml}

import scala.collection.{Map, Seq, immutable}
import scala.util.Random

object MockDataUtils {

  val randomParse: PartialFunction[String, String] = {
    case x if x.toLowerCase.contains("<@random") => {
      val pattern = "(<@random.*?/>)".r
      val first = if (pattern.findFirstIn(x).get.contains("(")) pattern.findFirstIn(x).get else pattern.findFirstIn(x).get.replace("random", "random(string, 5)")
      val firstRes = if (first.split(",").length == 2) {
        val tupleParams = """.*\(\s*(\S+)\s*,\s*(\d+)\s*\).*""".r
        val tupleParams(t, bit) = first
        t.trim.toLowerCase match {
          case "int" =>
            (for (_ <- 1 to bit.trim.toInt) yield Random.nextInt(10)).mkString("").replaceFirst("0", "1")
          case "string" =>
            val charTab = "abcdefghijklmnpqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ"
            getRandom(charTab, bit.trim.toInt)
          case _ => throw new RuntimeException(s"Don't support type: ${t.trim}")
        }
      } else if (first.split("\\[").length == 2 && first.split("]").length == 2) {
        val pool = """.*\[\s*(.*)\s*\].*""".r
        val pool(list) = first
        getRandom(list.split(" ").filter(_ != ""))
      } else {
        throw new RuntimeException(s"Don't support: ${x}")
      }
      x.replaceFirst(pattern.findFirstIn(x).get.replace("(", """\(""")
        .replace(")", """\)""")
        .replace("[", """\[""")
        .replace("]", """\]""")
        , firstRes)
    }
  }

  val timestampParse: PartialFunction[String, String] = {
    case x if x.toLowerCase.contains("<@timestamp") =>
      val pattern = "(<@timestamp.*?/>)".r
      val first = if (pattern.findFirstIn(x).get.contains("(")) pattern.findFirstIn(x).get else pattern.findFirstIn(x).get.replace("timestamp", "timestamp(13)")
      val firstRes: String = if (first.contains("timestamp(13)")) {
        System.currentTimeMillis().toString
      } else if (first.contains("timestamp(10)")) {
        val sdf = new SimpleDateFormat("yyyyMMddHHmmss")
        sdf.parse(sdf.format(new Date())).getTime.toString
      } else {
        val pattern1 = """.*\((\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})\).*""".r
        val pattern2 = """.*\((\d{14})\).*""".r
        val pattern3 = """.*\((\d{4}-\d{2}-\d{2})\).*""".r
        val pattern4 = """.*\((\d{8})\).*""".r

        val parsed = first match {
          case pattern1(x) => (x, "yyyy-MM-dd HH:mm:ss")
          case pattern2(x) => (x, "yyyyMMddHHmmss")
          case pattern3(x) => (x, "yyyy-MM-dd")
          case pattern4(x) => (x, "yyyyMMdd")
        }

        val sdf = new SimpleDateFormat(parsed._2)
        sdf.parse(parsed._1).getTime.toString
      }

      x.replaceFirst(pattern.findFirstIn(x).get.replace("(", """\(""").replace(")", """\)"""), firstRes)
  }

  def getRandom(pool: String, length: Int): String = {
    (for (_ <- 1 to length) yield pool.charAt(Random.nextInt(pool.length))).mkString("")
  }

  def getRandom(pool: Array[String]): String = {
    pool(Random.nextInt(pool.length))
  }

  def writeMockData(outputPath: String = "src/test/resources/mock-data-content/parq", processFunc: Option[PartialFunction[String, String]] = None, num: Int = 5, mappingPath: String = "src/main/resources/mapping.yml", mockRulePath: String = "src/test/resources/mock_rule.yml")(implicit spark: SparkSession): Unit = {
    import scala.collection.JavaConverters._

    if (!new File(mappingPath).exists()) throw new RuntimeException(s"mapping file not exist on $mappingPath")

    val mappingFIS = new FileInputStream(mappingPath)
    val mappingMap: util.Map[String, Object] = new Yaml().load(mappingFIS)
    val mapping: immutable.Map[String, Object] = mappingMap.asScala.toMap
    val allFields = mapping.mapValues(_.asInstanceOf[util.LinkedHashMap[String, String]].asScala.toMap.keySet.map(col).toList)

    writeMockRuleFile(allFields)
    val mockRuleFIS = new FileInputStream(mockRulePath)
    val mockRuleMap: util.Map[String, Object] = new Yaml().load(mockRuleFIS)
    val ruleMap: immutable.Map[String, Object] = mockRuleMap.asScala.toMap

    val processPartial = List(randomParse, timestampParse)
      .foldLeft(processFunc.getOrElse({
        case "" => ""
      }: PartialFunction[String, String]))((x, e) => x orElse e)

    val rule = ruleMap.mapValues(_.asInstanceOf[util.LinkedHashMap[String, String]].asScala.toMap)
    rule.mapValues(xs => {
      xs.map(x => {
        x._1 -> {
          if (x._2.trim.length == 0) duplicateRecord(x._1, processPartial, num)
          else duplicateRecord(x._2, processPartial, num)
        }
      })
    })
      .foreach(x => {
        val init = (for (_ <- 1 to num) yield List[String]()).toList
        val rows = x._2.values.foldLeft(List[List[String]](init: _*))((xs, e) => {
          xs.zip(e).map(m => m._1 ++ List(m._2))
        }).map(m => Row(m: _*)).asJava
        val st = StructType(x._2.keySet.toList.map(StructField(_, StringType, nullable = true)))
        spark.createDataFrame(rows, st)
          .write
          .option("delimiter", "|")
          .option("header", "true")
          .mode("Overwrite")
          .format("com.databricks.spark.csv")
          .save(s"${outputPath}/${x._1}")

        merge(s"${outputPath}/${x._1}", s"${outputPath}/${x._1}.csv")
      })
  }

  //TODO: when run on jenkins it will has more record as same as header, but run on local not appear
  def merge(srcPath: String, dstPath: String): Unit = {
    val dstFile = new File(dstPath)
    if (dstFile.exists()) dstFile.delete()

    val file = new File(srcPath)
    if (file.isDirectory) {
      file.listFiles().foreach(f => {
        if (!f.getName.endsWith("csv")) f.deleteOnExit()
      })
    }

    val hadoopConfig = new Configuration()
    val hdfs = FileSystem.get(hadoopConfig)
    FileUtil.copyMerge(hdfs, new Path(srcPath), hdfs, new Path(dstPath), true, hadoopConfig, null)

    if (file.getParentFile.isDirectory) {
      file.getParentFile.listFiles().foreach(f => {
        if (f.getName.endsWith("crc")) f.deleteOnExit()
      })
    }
  }

  def duplicateRecord(rule: String, processFunc: PartialFunction[String, String], num: Int = 5): Array[String] = {
    val seq = for (i <- 1 to num)
      yield fillByRule(rule, processFunc) + (if (rule.contains("<@")) "" else s"_$i")
    seq.toArray
  }

  @scala.annotation.tailrec
  def fillByRule(rule: String, processFunc: PartialFunction[String, String]): String = {
    rule match {
      case x: String if x.contains("<@") => fillByRule(processFunc(x), processFunc)
      case x => x
    }
  }

  def writeMockRuleFile(entity: Map[String, Seq[Column]], ruleFilePath: String = "src/test/resources/mock_rule.yml"): Unit = {
    import scala.collection.JavaConverters._

    val options = new DumperOptions()
    options.setIndent(2)
    options.setPrettyFlow(true)
    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)

    val yaml = new Yaml(options)

    val mockRuleFile = new File(ruleFilePath)
    val previousRule = {
      if (mockRuleFile.exists()) {
        val mockRuleFIS = new FileInputStream(ruleFilePath)
        val mockRuleMap: util.Map[String, Object] = new Yaml().load(mockRuleFIS)
        val ruleMap: immutable.Map[String, Object] = mockRuleMap.asScala.toMap
        ruleMap.mapValues(_.asInstanceOf[util.LinkedHashMap[String, String]])
      } else Map[String, util.Map[String, String]]()
    }.mapValues(_.asScala.toMap)

    val blankRule = entity.mapValues(xs => xs.map(_.expr.sql.split(" AS ")(0).replaceAll("`", "")).map(x => x -> "")).mapValues(_.toMap)

    val union = blankRule.map(x => {
      val history = previousRule.getOrElse(x._1, x._2)
      val currentKeys = x._2.keySet
      val finalMap = currentKeys.foldLeft(List[(String, String)]())(
        (xs, e) => {
          val t = history.getOrElse(e, x._2(e))
          xs :+ (e, t)
        }
      )
      (x._1, finalMap.toMap)
    }).mapValues(_.asJava).asJava

    val fw = new FileWriter(ruleFilePath)
    yaml.dump(union, fw)
  }
}
package com.hsbc.gbm.bd.clm

import java.io.FileInputStream

import org.apache.hadoop.fs.{FileSystem, Path}
import org.apache.spark.SparkConf
import org.apache.spark.sql.{Column, DataFrame, Dataset, SparkSession}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types.{StringType, StructField, StructType}
import org.apache.spark.SPARK_VERSION
import org.slf4j.LoggerFactory
import com.hsbc.datafactory.api.DataFactoryAPI
import com.hsbc.datafactory.api.model.SnapshotMetaDataResponse
import org.apache.spark.sql.expressions.Window

import scala.annotation.tailrec
import scala.collection.{Map, mutable}
import org.elasticsearch.spark.sql._
import java.text.SimpleDateFormat
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util
import java.util.{Calendar, Date}

import org.apache.commons.lang3.StringUtils
import org.yaml.snakeyaml.Yaml

import scala.util.{Failure, Success, Try}

package object utils {
  implicit def sparkDataFrameFunctions(df: DataFrame): ExtendedDataFrameFunctions = new ExtendedDataFrameFunctions(df)

  private val logger = LoggerFactory.getLogger(this.getClass.getName)

  sealed class ExtendedDataFrameFunctions(report: DataFrame) {
    lazy val reportCnt = report.count()
    lazy val repartitionReport = report.repartition(getPartitionNumberByDataSize(report))
    lazy val uid = report.sparkSession.sparkContext.getConf.getOption("uid")

    // this function just for data lineage, in fact, it is substantive effect
    def cut(aliasName: String)(implicit spark: SparkSession): DataFrame = {
      val env = spark.sparkContext.getConf.get("spark.master", "local")
      val randomFieldName = report.schema.filter(x => x.dataType.isInstanceOf[StringType]).head.name

      if (env.startsWith("local")) report.filter(s"`$randomFieldName` != '__useless_$aliasName'") else report
    }

    def except(right: DataFrame, ignoreColumns: Seq[String], ignoreNull: Boolean = false): DataFrame = {
      val matchColumns = report.drop(ignoreColumns: _*).columns

      if (ignoreNull) {
        val leftColumns = report.drop(ignoreColumns: _*)
        val rightColumns = right.drop(ignoreColumns: _*)
        val l = leftColumns.select(leftColumns.schema.map(nullStringColumnToBlank): _*)
        val r = rightColumns.select(leftColumns.schema.map(nullStringColumnToBlank): _*)

        l.join(r, matchColumns, "left_anti")
      } else {
        report.join(right, matchColumns, "left_anti")
      }
    }

    def exceptAll(right: DataFrame, ignoreColumns: Seq[String], ignoreNull: Boolean = false): DataFrame = {
      report.except(right, ignoreColumns, ignoreNull).withColumn("_except", lit("left"))
        .unionByName(
          right.except(report, ignoreColumns, ignoreNull).withColumn("_except", lit("right"))
        )
    }

    private def nullStringColumnToBlank(column: StructField): Column = {
      column.dataType match {
        case StringType =>
          when(col(column.name).isNull, lit(""))
            .otherwise(col(column.name))
            .alias(column.name)
        case _ => col(column.name)
      }
    }

    /**
     * rename df, if name not exist will throw Exception
     *
     * @param pairs
     * @return
     */
    def rename(pairs: Map[String, String], selected: Boolean = true): DataFrame =
      pairs.foldLeft(if (selected) report.select(pairs.keySet.toList.map(col): _*) else report) { (df, pair) => df.withColumnRenamed(pair._1, pair._2) }

    /**
     * skew join, implement of skew value specific process
     *
     * @param right
     * @param joinExprs
     * @param joinType
     * @param filterKey
     * @param skewValues
     * @return
     */
    def skewJoin(right: Dataset[_]
                 , joinExprs: Column
                 , joinType: String
                 , filterKey: Seq[String]
                 , skewValues: Seq[String])(implicit spark: SparkSession): DataFrame = {
      val env = spark.sparkContext.getConf.get("spark.master", "local")
      val joinResult = report.join(right, joinExprs, joinType)
      if (env.startsWith("local") || SPARK_VERSION.startsWith("3")) joinResult
      else joinResult.hint("SKEW_JOIN", s"filter_key(${filterKey.mkString(",")})", s"skew_values(${skewValues.mkString(",")})")
    }

    /**
     * skew join, implement of skew value specific process
     *
     * @param right
     * @param usingColumns
     * @param joinType
     * @param filterKey
     * @param skewValues
     * @return
     */
    def skewJoin(right: Dataset[_]
                 , usingColumns: Seq[String]
                 , joinType: String
                 , filterKey: Seq[String]
                 , skewValues: Seq[String])(implicit spark: SparkSession): DataFrame = {
      val env = spark.sparkContext.getConf.get("spark.master", "local")
      val joinResult = report.join(right, usingColumns, joinType)
      if (env.startsWith("local") || SPARK_VERSION.startsWith("3")) joinResult
      else joinResult.hint("SKEW_JOIN", s"filter_key(${filterKey.mkString(",")})", s"skew_values(${skewValues.mkString(",")})")
    }

    def getSkewValues(key: String, samplePercent: Int = 10, topN: Int = 100)(implicit spark: SparkSession): DataFrame = {
      report.createOrReplaceTempView("__temp__")

      //get skew key table
      spark.sql(
        s"""
           |select count(1) __cnt__
           |  ,${key}
           |from __temp__ TABLESAMPLE (${samplePercent} PERCENT)
           |group by ${key}
           |order by __cnt__ desc
           |limit $topN
           |""".stripMargin)
    }

    /**
     * just support left join and inner join
     * skew join, implement of skew value random distribute
     *
     * @param right    right table
     * @param leftKey  left table key which for filter
     * @param rightKey right table key which for filter
     * @param skewValues
     * @param spark
     * @return (leftTable, rightTable)
     */
    def preSkewJoin(right: DataFrame, leftKey: String, rightKey: String, skewValues: Seq[String], divide: Int = 100, force: Boolean = false)(implicit spark: SparkSession): (DataFrame, DataFrame) = {

      val env = spark.sparkContext.getConf.get("spark.master", "local")
      if (env.startsWith("local") || (SPARK_VERSION.startsWith("3") && !force)) return (report.withColumn(s"__${leftKey}__", col(leftKey)), right.withColumn(s"__${rightKey}__", col(rightKey)))

      val skewTable = spark.createDataFrame(skewValues.distinct.map((_, "active"))).toDF(leftKey, "__status__")

      //make the specific key random distribute
      val leftTable = report.join(skewTable, Seq(leftKey), "left")
        .withColumn(s"__${leftKey}__", when(skewTable("__status__").isNotNull, concat((rand() * divide).cast("int"), lit("_"), report(leftKey))).otherwise(report(leftKey)))
        .drop("__status__")

      //add __status__ to __side_table, as similar as add a flag
      val temp = right.join(skewTable, right(rightKey) === skewTable(leftKey), "left").drop(skewTable(leftKey))

      //make the side table explode
      val part1 = temp.filter(col("__status__").isNull).drop("__status__").withColumn(s"__${rightKey}__", col(rightKey))
      val part2 = temp.filter(col("__status__").isNotNull)
        .withColumn("__prefix__", explode_outer(split(lit((0 until divide).mkString(",")), ",")))
        .withColumn(s"__${rightKey}__", concat(col("__prefix__"), lit("_"), col(rightKey)))
        .drop("__status__", "__prefix__")
      val rightTable = part1.unionByName(part2)

      (leftTable, rightTable)
    }

    def dropDuplicateCols(rmDF: DataFrame): DataFrame = {
      val cols = report.columns.groupBy(identity).mapValues(_.length).filter(_._2 > 1).keySet.toSeq

      @tailrec
      def dropCol(df: DataFrame, cols: Seq[String]): DataFrame = {
        if (cols.isEmpty) df else dropCol(df.drop(rmDF(cols.head)), cols.tail)
      }

      dropCol(report, cols)
    }

    //drop duplicate columns, usually after join. btw, the parameter order is necessary, get left dataframe column when multiple  not null
    //just support join(right: Dataset[_], usingColumns: Seq[String], joinType: String)
    def dropDuplicateColumns(dfs: DataFrame*): DataFrame = {
      val total = report.columns.toSet
      val totalList = report.columns.toList
      total.foldLeft(report)((df, column) => {
        column match {
          case x if totalList.count(_ == x) > 1 =>
            dfs.filter(f => f.columns.contains(x))
              .map(_ (x))
              .tail
              .foldLeft(df)((f, c) => f.drop(c))
          case _ => df
        }
      }
      )
    }

    //drop duplicate columns, usually after join. btw, the parameter order is necessary, get left dataframe column when multiple  not null
    //just support join(right: Dataset[_], usingColumns: Seq[String], joinType: String)
    def dropDuplicateColumnsWithCoalesce(dfs: DataFrame*): DataFrame = {
      val total = report.columns.toSet
      val totalList = report.columns.toList
      total.foldLeft(report)((df, column) => {
        column match {
          case x if totalList.count(_ == x) > 1 =>
            df.withColumn(s"__${x}__random", coalesce(dfs.map(f => {
              if (f.columns.toSet.contains(x)) f(x) else lit(null)
            }): _*))
              .drop(x)
              .withColumnRenamed(s"__${x}__random", x)
          case _ => df
        }
      }
      )
    }

    def trimAllColumnsToNull: DataFrame = {
      report.select(
        report.schema.map(c =>
          trimOnlyStringColumnToNull(c)
        ): _*
      )
    }

    def trimAllColumnsButNotUidToNull: DataFrame = {
      report.select(
        report.schema.map(c => {
          val uniqueIds: List[String] = if (uid.isDefined) uid.get.split(",").toList.map(_.trim) else List[String]()
          if (uniqueIds.contains(c.name)) col(c.name)
          else trimOnlyStringColumnToNull(c)
        }
        ): _*
      )
    }

    def trimColumnsToNull(cols: String*): DataFrame = {
      cols.foldLeft(report)((df, c) => {
        if (df.columns.contains(c)) {
          df.withColumn(c, trimOnlyStringColumnToNull(df.schema(c)))
        } else {
          df
        }
      })
    }

    private def trimOnlyStringColumnToNull(column: StructField): Column = {
      column.dataType match {
        case StringType => when(trim(col(column.name)) === "", lit(null))
          .otherwise(trim(col(column.name)))
          .alias(column.name)
        case _ => col(column.name)
      }
    }

    /**
     * same as rename, but don't throw Exception when name not exist
     *
     * @param originalToRename
     * @return
     */
    def applyRenames(originalToRename: Map[String, String]): DataFrame =
      report.select(
        report.columns.map(c =>
          if (originalToRename.keySet.contains(c)) col(c) as originalToRename(c) else col(c)
        ): _*
      )

    def applyInserts(inserts: Map[String, String]): DataFrame = {
      inserts.foldLeft(report) { (df, key) =>
        df.withColumn(key._1, lit(key._2))
      }
    }

    def storeAsParquet(path: String, partition_col: Option[String] = None, retention: Int = 7)(implicit spark: SparkSession): Unit = {
      partition_col match {
        case Some(column) => {
          val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
          val date: String = ZonedDateTime.now().format(formatter).substring(0, 10).replaceAll("[-|:'T]", "")

          //write to hdfs
          repartitionReport.withColumn(column, lit(date))
            .write
            .mode("Overwrite")
            .option("header", value = true)
            .option("mapreduce.fileoutputcommitter.algorithm.version", 2)
            .partitionBy(column)
            .parquet(path)

          //delete other partitions
          spark.read.parquet(path)
            .select(col(column).cast("int"))
            .distinct
            .filter(s"$column < $date - $retention")
            .collect()
            .foreach(row => {
              val partition = row.getAs[Int](column)
              val fileSystem = FileSystem.get(spark.sparkContext.hadoopConfiguration)
              val needRemovePath = new Path(s"$path/$column=$partition")
              if (fileSystem.exists(needRemovePath)) {
                fileSystem.delete(needRemovePath, true)
              }
            })
        }
        case Some(column) => repartitionReport.write.mode("Overwrite").option("header", value = true).partitionBy(column).parquet(path)
        case None => repartitionReport.write.mode("Overwrite").option("header", value = true).parquet(path)
      }
    }

    def write2Es(rawIndexName: String, cdaLocation: String): Unit = {
      write2Es(rawIndexName, cdaLocation, Option(Map("es.mapping.id" -> "uid")))
    }

    def write2Es(rawIndexName: String, cdaLocation: String, cfg: Option[scala.collection.Map[String, String]]): Unit = {
      val spark = report.sparkSession
      val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXXX")
      val processingTime: String = ZonedDateTime.now().format(formatter).substring(0, 19).replaceAll("[-|:'T]", "")

      val pattern = "<date>".r
      val indexName = pattern.replaceAllIn(rawIndexName, processingTime)

      val esReport = report
        .withColumn("Processing_Timestamp", lit(processingTime))
        .withColumn("CDA_Location", lit(cdaLocation))

      implicit val sparkConf: SparkConf = spark.sparkContext.getConf

      if (reportCnt < 100000000) {
        if (cfg.isDefined && uid.isDefined) {
          val p = """.*\((.*)\).*""".r
          val p(uniqueId) = uid.getOrElse(throw new RuntimeException("Please provide uid define on application yaml."))
          esReport
            .withColumn("uid", base64(concat_ws("-", uniqueId.split(",").map(x => coalesce(col(x.trim), lit("Null"))): _*)))
            .saveToEs(indexName, cfg.get)
        } else
          esReport.saveToEs(indexName)
      }
      else {
        throw new RuntimeException(s"The row count is over 0.1 billion, so we can't write it to ES")
      }

      //es.batch.write.refresh was set as false,it means index would not be update right now.
      //sleep 1s to make sure the index is totally update, the time should be fit with the index.refresh_interval
      //in test-application-scala.yml
      Thread.sleep(5 * 1000)

      val readCnt = EsHttpClientUtils.getEsCount(indexName)

      if (!(reportCnt - 100 < readCnt && readCnt < reportCnt + 100)) throw new RuntimeException(s"write es rows are not eq read rows, wrote:$reportCnt != read:$readCnt ")
    }

    def buildFullSchema(schema: StructType)(implicit spark: SparkSession): DataFrame = {
      schema.fields.foldLeft(report) { (newDF: DataFrame, field: StructField) =>
        if (report.columns.contains(field.name)) {
          newDF
        } else {
          newDF.withColumn(field.name, lit(null).cast(field.dataType))
        }
      }.select(schema.fieldNames.head, schema.fieldNames.tail: _*)
    }

    private def getPartitionNumberByDataSize(input: DataFrame): Int = {
      if (reportCnt == 0) return 1
      val takeN = 100
      val fraction = if (takeN / reportCnt >= 1) 1 else takeN.toFloat / reportCnt
      // 128M
      val blockSize = 128
      val byteToMBRatio = 1024 * 1024
      // parquet format compression ratio perhaps (1 - 0.19)
      val compressionRatio = 0.19
      val sampleData = input.sample(withReplacement = false, fraction, seed = 0).collect()
      val sampleCnt = sampleData.length
      val sampleDataByteSize = sampleData.foldLeft(0)((x, row) => {
        x + row.toString().getBytes("utf-8").length
      })
      val dataByte = (reportCnt / sampleCnt * sampleDataByteSize) * compressionRatio

      (dataByte / byteToMBRatio / blockSize).toInt + 1
    }

  }


  def getLatestSnapshotForBatchId(assetList: List[String], host: String, port: Int, initBatchId: String, span: Int = 7)(implicit spark: SparkSession): Map[String, String] = {
    val api = new DataFactoryAPI(host, port)

    val hadoopConf = spark.sparkContext.hadoopConfiguration
    val fs: FileSystem = FileSystem.get(hadoopConf)

    val metaData = (batchId: String) => {
      api.getSnapshot(batchId) match {
        case Success(x) => x
        case Failure(ex) => throw new RuntimeException(s"Could not find ${batchId} data from path $host:$port", ex)
      }
    }

    val assetsPath = (assets: List[String], batchId: String) => assets.foldLeft(Map[String, String]())(
      (m, ele) => {
        val element = if (ele.contains(":")) ele else s"$ele:$ele"
        val Array(source, asset) = element.split(":")
        val pathMap = source match {
          case x: String if "gda" == x.toLowerCase =>
            val t = Try(metaData(batchId).getGDAsForSource(asset).get(asset))
            (s"${x}:${asset}", if (t.isSuccess && t.get.isDefined) t.get.get.gdaPath else "")
          case _ =>
            val t = Try(metaData(batchId).getMDAsForSource(source).get(asset))
            (s"${source}:${asset}", if (t.isSuccess && t.get.isDefined) t.get.get.path else "")
        }
        m + pathMap
      }
    ).partition(x => if (StringUtils.isNotBlank(x._2)) fs.exists(new Path(x._2.trim)) else false)

    val Array(batchDate, erType) = initBatchId.split("_")
    val sdf = new SimpleDateFormat("yyyy-MM-dd")
    val date: Date = sdf.parse(batchDate)
    val cal = Calendar.getInstance()
    cal.setTime(date)

    val finalPath = (1 to span).toList.foldLeft(assetsPath(assetList, initBatchId))(
      (xs, x) => {
        if (xs._2.nonEmpty) {
          cal.add(Calendar.DATE, -x)
          val newDay = cal.getTime
          val batchId: String = sdf.format(newDay) + "_" + erType
          cal.setTime(date)
          val nextBatchAsset = assetsPath(xs._2.keySet.toList, batchId)
          (xs._1 ++ nextBatchAsset._1, nextBatchAsset._2)
        } else xs
      }
    )
    if (finalPath._2.nonEmpty) throw new RuntimeException(
      s"""
         |Below asset not exist, please check batchId($initBatchId) and span($span) length
         |    ${finalPath._2.mkString("\r\n")}
         |""".stripMargin)
    finalPath._1.map(x => (x._1.split(":")(1), x._2))
  }

  /**
   * get skew values
   *
   * @param pathEntry asset path
   * @param key       skew key
   * @param threshold skew count / count
   * @param topN      top N
   * @param spark     spark session
   * @return (skew key, (asset key, skew count, skew rate))
   */
  def getSkewValues(pathEntry: scala.collection.Map[String, String], key: String, threshold: Double = 0.05, topN: Int = 5)(implicit spark: SparkSession): Map[String, (String, Long, Double)] = {
    pathEntry.foldLeft(scala.collection.Map[String, (String, Long, Double)]())((x, xs) => {
      val df = spark.read.parquet(xs._2).cache
      val cnt = df.count
      val window = Window.partitionBy(key).orderBy(col("__cnt__").desc)
      val res = df
        .groupBy(key)
        .agg(count(key).as("__cnt__"))
        .withColumn("__rn__", row_number().over(window))
        .withColumn("__cnt", lit(cnt))
        .filter(s"(__cnt__ / __cnt) > $threshold")
        .withColumn("__rate__", col("__cnt__") / col("__cnt"))
        .filter(s"__rn__ <= $topN")
        .select(key, "__cnt__", "__rate__")
        .take(topN)
      df.unpersist()
      x ++ res.map(r => (r.getAs[String](key), (xs._1, r.getAs[Long]("__cnt__"), r.getAs[Double]("__rate__"))))
    })
  }
}
cat: ./clientlifecycle-common-core/src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./clientlifecycle-common-core/src/site/resources: Is a directory
cat: ./clientlifecycle-common-core/src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./clientlifecycle-common-core/src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>cat: ./clientlifecycle-common-core/src/test: Is a directory
cat: ./clientlifecycle-common-core/src/test/resources: Is a directory
cat: ./clientlifecycle-common-core/src/test/resources/config: Is a directory
spark:
  spark.master: "local[*]"
  spark.ui.enabled: "false"
  spark.app.id: "123456"
  spark.driver.host: "localhost"
  spark.local.dir : "tmp/spark-temp"
  spark.sql.catalogImplementation: hive
  spark.sql.warehouse.dir: "/tmp/hive/common/warehouse"
  derby.system.home: "hive/"
  javax.jdo.option.ConnectionURL: "jdbc:derby:;databaseName=hive/metastore_db;create=true"
  kryoserializer: org.apache.spark.sql.execution.columnar.CachedBatch,[[B,org.apache.spark.sql.catalyst.expressions.GenericInternalRow

#  es.nodes: gbl20169872.systems.uk.hsbc:19201
  es.nodes: gbl20169876.systems.uk.hsbc:19201
  es.net.http.auth.user: clm-test
  es.net.http.auth.pass: cVUb30OEiZVKIes6g8MIpYso+zdyJybCnErMnM0Rl6c=
  es.port: 19201
  es.index.auto.create: true
  cluster.name: elasticsearch
  client.transport.sniff: true
  client.transport.ignore_cluster_name: true
  es.xpack.security.user: elastic:byiF7KeOP9EtCtkmgMlyttOWcO55La2WasVQb1oKnss=
  index.auto.create: true
  index.number_of_replicas: 0
  index.refresh_interval: 1s
  es.nodes.wan.only: true
  es.net.ssl: true

app:
  app_name: "dataproducts-common"
  write.es: "false"
  retention: 7
  es.index-name: "clm-test"

  monitoring:
    location: "tmp/monitoring"
    table.name: "monitoring"
  some-key:
    string-list:
      - item1
      - item2
      - item3
    int-list:
      - 101
      - 1045
      - 8625
    double-list:
      - 1.01
      - 104.5
      - 8625.16548
    map-of-strings:
      item1: value1
      item2: value2
      item3: value3
    map-of-ints:
      item1: 168
      item2: 2569
      item3: -14
    map-of-doubles:
      item1: 16.81256
      item2: 2.5690745
      item3: -0.1425456
    map-of-booleans:
      item1: true
      item2: false
      item3: true
  bool-property: true
  int-property: 123
  double-property: 456.789
  output: "csv_data.parq"
  db_table: "db_demo.table_demo"


defaults:
    master: yarn
    deploy_mode: cluster
    queue: uc-prod
    num_executors: 10
    executor_cores: 5
    executor_memory: 10G
    driver_memory: 6G
    config_file: application.yml

conf:
    - spark.executor.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.resource=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.driver.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.file=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.sql.catalogImplementation=hive
    - spark.yarn.maxAppAttempts=1
    - spark.shuffle.service.enabled=true
    - spark.driver.maxResultSize=0g
    - spark.default.parallelism=300
    - spark.shuffle.file.buffer=128K
    - spark.sql.shuffle.partitions=300
    - spark.sql.autoBroadcastJoinThreshold=-1
    - spark.sql.join.preferSortMergeJoin=true
    - spark.sql.broadcastTimeout=300s
    - spark.executor.heartbeatInterval=20s
    - spark.dynamicAllocation.enabled=true
    - spark.dynamicAllocation.executorIdleTimeout=300s
    - spark.dynamicAllocation.cachedExecutorIdleTimeout=30min
    - spark.dynamicAllocation.initialExecutors=10
    - spark.dynamicAllocation.maxExecutors=10
    - spark.dynamicAllocation.minExecutors=5
    - spark.dynamicAllocation.schedulerBacklogTimeout=1s
    - spark.memory.fraction=0.6
    - spark.memory.storageFraction=0.3
    - spark.shuffle.sort.bypassMergeThreshold=1000

global_env:
    HDP_VERSION: 2.6.5.0-292
    LOGS_BASE_LOCATION: /hsbc-log/CLM/spark
    KEYTAB_LOCATION: /home/$CURRENT_USER/$CURRENT_USER.headless.keytab

local_env:

indexs:
    score5-successful:
        latest_alias_name: score5-successful-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-successful-alias-all
            force: true
    score5-failed:
        latest_alias_name: score5-failed-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-failed-alias-all
            force: true
    clm-csp-glcm:
        latest_alias_name: clm-csp-glcm-alias-latest
        policy:
            name: clm-policy_7d25g
            delete_interval: 7d
            max_size: 25gb
        template:
            rollover_alias: clm-csp-glcm-alias-all

files:
    - /usr/hdp/current/spark2-client/config/hive-site.xml
    - ${app_yaml}#$JOB_CONFIG_FILE

entrypoints:
    #GLCM CDA
    -   name: clm-glcm-cda
        class: com.hsbc.gbm.bd.clm.glcm.Main
    #GTRF CDA
    -   name: clm-gtrf-cda
        class: com.hsbc.gbm.bd.clm.gtrf.Main
    #FX CDA
    -   name: clm-fx-cda
        class: com.hsbc.gbm.bd.clm.fx.Main
    #GMnonFX CDA
    -   name: clm-gmnonfx-cda
        class: com.hsbc.gbm.bd.clm.gmnonfx.Main
    #HSS CDA
    -   name: clm-hss-cda
        class: com.hsbc.gbm.bd.clm.hss.Maindefaults:
    master: yarn
    deploy_mode: cluster
    queue: use-case
    num_executors: 10
    executor_cores: 5
    executor_memory: 10G
    driver_memory: 6G
    config_file: application.yml

conf:
    - spark.executor.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.resource=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.driver.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.file=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.sql.catalogImplementation=hive
    - spark.yarn.maxAppAttempts=1
    - spark.shuffle.service.enabled=true
    - spark.driver.maxResultSize=0g
    - spark.default.parallelism=300
    - spark.shuffle.file.buffer=128K
    - spark.sql.shuffle.partitions=300
    - spark.sql.autoBroadcastJoinThreshold=-1
    - spark.sql.join.preferSortMergeJoin=true
    - spark.sql.broadcastTimeout=300s
    - spark.executor.heartbeatInterval=20s
    - spark.dynamicAllocation.enabled=true
    - spark.dynamicAllocation.executorIdleTimeout=300s
    - spark.dynamicAllocation.cachedExecutorIdleTimeout=30min
    - spark.dynamicAllocation.initialExecutors=10
    - spark.dynamicAllocation.maxExecutors=10
    - spark.dynamicAllocation.minExecutors=5
    - spark.dynamicAllocation.schedulerBacklogTimeout=1s
    - spark.memory.fraction=0.6
    - spark.memory.storageFraction=0.3
    - spark.shuffle.sort.bypassMergeThreshold=1000

global_env:
    HDP_VERSION: 3.1.5.0-152
    LOGS_BASE_LOCATION: /upload/0/clm/logs
    KEYTAB_LOCATION: /home/$CURRENT_USER/$CURRENT_USER.headless.keytab

local_env:

indexs:
    score5-successful:
        latest_alias_name: score5-successful-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-successful-alias-all
            force: true
    score5-failed:
        latest_alias_name: score5-failed-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-failed-alias-all
            force: true

files:
    - /usr/hdp/current/spark2-client/config/hive-site.xml
    - ${app_yaml}#$JOB_CONFIG_FILE

entrypoints:
    #GLCM CDA
    -   name: clm-glcm-cda
        class: com.hsbc.gbm.bd.clm.glcm.Main
    #GTRF CDA
    -   name: clm-gtrf-cda
        class: com.hsbc.gbm.bd.clm.gtrf.Main
    #FX CDA
    -   name: clm-fx-cda
        class: com.hsbc.gbm.bd.clm.fx.Main
    #GMnonFX CDA
    -   name: clm-gmnonfx-cda
        class: com.hsbc.gbm.bd.clm.gmnonfx.Main
    #HSS CDA
    -   name: clm-hss-cda
        class: com.hsbc.gbm.bd.clm.hss.Maindefaults:
    master: yarn
    deploy_mode: cluster
    queue: default
    num_executors: 10
    executor_cores: 5
    executor_memory: 10G
    driver_memory: 6G
    config_file: application.yml

conf:
    - spark.executor.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.resource=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.driver.extraJavaOptions=-XX:+PrintFlagsFinal -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy -XX:InitiatingHeapOccupancyPercent=35 -XX:ConcGCThreads=20 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions -XX:+G1SummarizeConcMark -Dconfig.file=${JOB_CONFIG_FILE} -Dlog4j.configuration=log4j
    - spark.sql.catalogImplementation=hive
    - spark.yarn.maxAppAttempts=1
    - spark.shuffle.service.enabled=true
    - spark.driver.maxResultSize=0g
    - spark.default.parallelism=300
    - spark.shuffle.file.buffer=128K
    - spark.sql.shuffle.partitions=300
    - spark.sql.autoBroadcastJoinThreshold=-1
    - spark.sql.join.preferSortMergeJoin=true
    - spark.sql.broadcastTimeout=300s
    - spark.executor.heartbeatInterval=20s
    - spark.dynamicAllocation.enabled=true
    - spark.dynamicAllocation.executorIdleTimeout=300s
    - spark.dynamicAllocation.cachedExecutorIdleTimeout=30min
    - spark.dynamicAllocation.initialExecutors=10
    - spark.dynamicAllocation.maxExecutors=10
    - spark.dynamicAllocation.minExecutors=5
    - spark.dynamicAllocation.schedulerBacklogTimeout=1s
    - spark.memory.fraction=0.6
    - spark.memory.storageFraction=0.3
    - spark.shuffle.sort.bypassMergeThreshold=1000

global_env:
    CDH_VERSION: 7.1.6-1
    LOGS_BASE_LOCATION: /upload/0/clm/logs
    KEYTAB_LOCATION: /home/$CURRENT_USER/$CURRENT_USER.headless.keytab

local_env:

indexs:
    score5-successful:
        latest_alias_name: score5-successful-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-successful-alias-all
            force: true
    score5-failed:
        latest_alias_name: score5-failed-alias-latest
        policy:
            name: score5_policy_7d25g
            delete_interval: 7d
            max_size: 25gb
            force: true
        template:
            rollover_alias: score5-failed-alias-all
            force: true

files:
    - /usr/hdp/current/spark2-client/config/hive-site.xml
    - ${app_yaml}#$JOB_CONFIG_FILE

entrypoints:
    #GLCM CDA
    -   name: clm-glcm-cda
        class: com.hsbc.gbm.bd.clm.glcm.Main
    #GTRF CDA
    -   name: clm-gtrf-cda
        class: com.hsbc.gbm.bd.clm.gtrf.Main
    #FX CDA
    -   name: clm-fx-cda
        class: com.hsbc.gbm.bd.clm.fx.Main
    #GMnonFX CDA
    -   name: clm-gmnonfx-cda
        class: com.hsbc.gbm.bd.clm.gmnonfx.Main
    #HSS CDA
    -   name: clm-hss-cda
        class: com.hsbc.gbm.bd.clm.hss.Main  spark:
    spark.master: "local[*]"
    spark.ui.enabled: "false"
    spark.app.id: "123456"
    spark.driver.host: "localhost"
    spark.local.dir : "tmp/spark-temp"
    spark.sql.catalogImplementation: hive
    spark.sql.warehouse.dir: "/tmp/hive/common/warehouse"
    derby.system.home: "hive/"
    javax.jdo.option.ConnectionURL: "jdbc:derby:;databaseName=hive/metastore_db;create=true"
    kryoserializer: org.apache.spark.sql.execution.columnar.CachedBatch,[[B,org.apache.spark.sql.catalyst.expressions.GenericInternalRow

    es.nodes: localhost:9200
    es.net.http.auth.user: elastic
    es.net.http.auth.pass: NONENC_changeme
    es.port: 9200
    es.index.auto.create: true
    cluster.name: elasticsearch
    client.transport.sniff: true
    client.transport.ignore_cluster_name: true
#    es.xpack.security.user: elastic:byiF7KeOP9EtCtkmgMlyttOWcO55La2WasVQb1oKnss=
    index.auto.create: true
    index.number_of_replicas: 0
    index.refresh_interval: 5s

    uid:
      - id
      - product

  app:
    app_name: "dataproducts-common"
    monitoring:
      location: "tmp/monitoring"
      table.name: "monitoring"
    some-key:
      string-list:
        - item1
        - item2
        - item3
      int-list:
        - 101
        - 1045
        - 8625
      double-list:
        - 1.01
        - 104.5
        - 8625.16548
      map-of-strings:
          item1: value1
          item2: value2
          item3: value3
      map-of-ints:
          item1: 168
          item2: 2569
          item3: -14
      map-of-doubles:
          item1: 16.81256
          item2: 2.5690745
          item3: -0.1425456
      map-of-booleans:
          item1: true
          item2: false
          item3: true
    bool-property: true
    int-property: 123
    double-property: 456.789
    output: "csv_data.parq"
    db_table: "db_demo.table_demo"

spark:
  spark.master: "local"
  spark.local.dir: "/tmp/spark-temp"
  spark.sql.catalogImplementation: hive
  spark.sql.sources.partitionOverwriteMode: "dynamic"
  spark.sql.warehouse.dir: "/user/hive/warehouse"
  hive.metastore.warehouse.dir: "/user/hive/warehouse"
  derby.system.home: "/user/hive"
  kryoserializer: org.apache.spark.sql.execution.columnar.CachedBatch,[[B,org.apache.spark.sql.catalyst.expressions.GenericInternalRow
  es.nodes: "localhost:9201,localhost:9200"
  es.net.http.auth.user: elastic
  es.net.http.auth.pass: "4NaIad19p2IzxmWZzo7Vhl2vtatpD6Bv0GpK0EXAPPQ+PbBHXlxsep2lHlX9ZEZW"
  es.port: "9200"
  es.index.auto.create: "true"
  cluster.name: "elasticsearch"
  client.transport.sniff: "true"
  client.transport.ignore_cluster_name: "true"
  es.nodes.wan.only: true
  es.xpack.security.user: "elastic:4NaIad19p2IzxmWZzo7Vhl2vtatpD6Bv0GpK0EXAPPQ+PbBHXlxsep2lHlX9ZEZW"
  es.net.ssl: true
app:
  name: "mock-test"
  env: "dev"
  write.es: "false"
  retention: 7
  outputPath: "wda-acct.parq"
  measure: "false"
  skew_values:
    - "tid1"
    - "tid2"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

log4j.rootLogger=WARN, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%c] - %m%n

log4j.logger.org.apache.spark=WARNwda-acct:
  tresataId_sub:
  Account_Name: account_name
  Account_Number: account_number
  WS_CC_NO: local_cin
  Product: account_product_type
  Banking_Account_Active: account_status_orig
  WS_ACCT_STA_CHG_DTE: account_start_date
  Account_Closure_Date: account_closed_date
  Account_Currency: account_currency
  Account_Balance: account_balance
  Account_Balance_Date: account_balance_date
  source_input_path:
  source_date:
  Booking_Country: booking_country
  WS_OFCR_RESP_CDE: hsbc_booking_legal_entity
  WS_COA_NO: account_serial_number
  WS_PROC_GRP_CDE: account_system_code
rps-acnt:
  Account_Name: account_name
  Account_Number: account_number
  prod_cod_des: account_product_desc
  prod_cod: account_product_type
  Banking_Account_Active: account_status_orig
  Account_Currency: account_currency
  Account_Open_Date: account_start_date
  Account_Closure_Date: account_closed_date
  Account_Balance: account_balance
  Account_Balance_Date: account_balance_date
  source_input_path:
  source_date:
  source: source_system_name
  Booking_Country: booking_country
  br_no: hsbc_booking_branch_number
  br_no_des: hsbc_booking_branch_name
  imac_advd_lmt_amt: approved_limit
  imac_advd_lmt_strt_dt: date_first_activity
  imac_advd_lmt_expr_dt: date_last_activity
  imac_ulim_amt: utilization
  imac_rec_type: entity_typecat: ./clientlifecycle-common-core/src/test/resources/mock-data-content: Is a directory
cat: ./clientlifecycle-common-core/src/test/resources/mock-data-content/parq: Is a directory
Banking_Account_Active|Account_Balance_Date|source|source_date|Account_Currency|Account_Number|imac_advd_lmt_amt|prod_cod|imac_ulim_amt|br_no|Booking_Country|imac_advd_lmt_expr_dt|Account_Balance|Account_Closure_Date|Account_Open_Date|prod_cod_des|imac_rec_type|Account_Name|br_no_des|imac_advd_lmt_strt_dt|source_input_path
Banking_Account_Active_1|Account_Balance_Date_1|source_1|source_date_1|Account_Currency_1|Account_Number_1|imac_advd_lmt_amt_1|prod_cod_1|imac_ulim_amt_1|br_no_1|Booking_Country_1|imac_advd_lmt_expr_dt_1|Account_Balance_1|Account_Closure_Date_1|Account_Open_Date_1|prod_cod_des_1|imac_rec_type_1|Account_Name_1|br_no_des_1|imac_advd_lmt_strt_dt_1|source_input_path_1
Banking_Account_Active_2|Account_Balance_Date_2|source_2|source_date_2|Account_Currency_2|Account_Number_2|imac_advd_lmt_amt_2|prod_cod_2|imac_ulim_amt_2|br_no_2|Booking_Country_2|imac_advd_lmt_expr_dt_2|Account_Balance_2|Account_Closure_Date_2|Account_Open_Date_2|prod_cod_des_2|imac_rec_type_2|Account_Name_2|br_no_des_2|imac_advd_lmt_strt_dt_2|source_input_path_2
Banking_Account_Active_3|Account_Balance_Date_3|source_3|source_date_3|Account_Currency_3|Account_Number_3|imac_advd_lmt_amt_3|prod_cod_3|imac_ulim_amt_3|br_no_3|Booking_Country_3|imac_advd_lmt_expr_dt_3|Account_Balance_3|Account_Closure_Date_3|Account_Open_Date_3|prod_cod_des_3|imac_rec_type_3|Account_Name_3|br_no_des_3|imac_advd_lmt_strt_dt_3|source_input_path_3
Banking_Account_Active_4|Account_Balance_Date_4|source_4|source_date_4|Account_Currency_4|Account_Number_4|imac_advd_lmt_amt_4|prod_cod_4|imac_ulim_amt_4|br_no_4|Booking_Country_4|imac_advd_lmt_expr_dt_4|Account_Balance_4|Account_Closure_Date_4|Account_Open_Date_4|prod_cod_des_4|imac_rec_type_4|Account_Name_4|br_no_des_4|imac_advd_lmt_strt_dt_4|source_input_path_4
Banking_Account_Active_5|Account_Balance_Date_5|source_5|source_date_5|Account_Currency_5|Account_Number_5|imac_advd_lmt_amt_5|prod_cod_5|imac_ulim_amt_5|br_no_5|Booking_Country_5|imac_advd_lmt_expr_dt_5|Account_Balance_5|Account_Closure_Date_5|Account_Open_Date_5|prod_cod_des_5|imac_rec_type_5|Account_Name_5|br_no_des_5|imac_advd_lmt_strt_dt_5|source_input_path_5
Banking_Account_Active_6|Account_Balance_Date_6|source_6|source_date_6|Account_Currency_6|Account_Number_6|imac_advd_lmt_amt_6|prod_cod_6|imac_ulim_amt_6|br_no_6|Booking_Country_6|imac_advd_lmt_expr_dt_6|Account_Balance_6|Account_Closure_Date_6|Account_Open_Date_6|prod_cod_des_6|imac_rec_type_6|Account_Name_6|br_no_des_6|imac_advd_lmt_strt_dt_6|source_input_path_6
Banking_Account_Active_7|Account_Balance_Date_7|source_7|source_date_7|Account_Currency_7|Account_Number_7|imac_advd_lmt_amt_7|prod_cod_7|imac_ulim_amt_7|br_no_7|Booking_Country_7|imac_advd_lmt_expr_dt_7|Account_Balance_7|Account_Closure_Date_7|Account_Open_Date_7|prod_cod_des_7|imac_rec_type_7|Account_Name_7|br_no_des_7|imac_advd_lmt_strt_dt_7|source_input_path_7
Banking_Account_Active_8|Account_Balance_Date_8|source_8|source_date_8|Account_Currency_8|Account_Number_8|imac_advd_lmt_amt_8|prod_cod_8|imac_ulim_amt_8|br_no_8|Booking_Country_8|imac_advd_lmt_expr_dt_8|Account_Balance_8|Account_Closure_Date_8|Account_Open_Date_8|prod_cod_des_8|imac_rec_type_8|Account_Name_8|br_no_des_8|imac_advd_lmt_strt_dt_8|source_input_path_8
Banking_Account_Active_9|Account_Balance_Date_9|source_9|source_date_9|Account_Currency_9|Account_Number_9|imac_advd_lmt_amt_9|prod_cod_9|imac_ulim_amt_9|br_no_9|Booking_Country_9|imac_advd_lmt_expr_dt_9|Account_Balance_9|Account_Closure_Date_9|Account_Open_Date_9|prod_cod_des_9|imac_rec_type_9|Account_Name_9|br_no_des_9|imac_advd_lmt_strt_dt_9|source_input_path_9
Banking_Account_Active_10|Account_Balance_Date_10|source_10|source_date_10|Account_Currency_10|Account_Number_10|imac_advd_lmt_amt_10|prod_cod_10|imac_ulim_amt_10|br_no_10|Booking_Country_10|imac_advd_lmt_expr_dt_10|Account_Balance_10|Account_Closure_Date_10|Account_Open_Date_10|prod_cod_des_10|imac_rec_type_10|Account_Name_10|br_no_des_10|imac_advd_lmt_strt_dt_10|source_input_path_10
Banking_Account_Active_11|Account_Balance_Date_11|source_11|source_date_11|Account_Currency_11|Account_Number_11|imac_advd_lmt_amt_11|prod_cod_11|imac_ulim_amt_11|br_no_11|Booking_Country_11|imac_advd_lmt_expr_dt_11|Account_Balance_11|Account_Closure_Date_11|Account_Open_Date_11|prod_cod_des_11|imac_rec_type_11|Account_Name_11|br_no_des_11|imac_advd_lmt_strt_dt_11|source_input_path_11
Banking_Account_Active_12|Account_Balance_Date_12|source_12|source_date_12|Account_Currency_12|Account_Number_12|imac_advd_lmt_amt_12|prod_cod_12|imac_ulim_amt_12|br_no_12|Booking_Country_12|imac_advd_lmt_expr_dt_12|Account_Balance_12|Account_Closure_Date_12|Account_Open_Date_12|prod_cod_des_12|imac_rec_type_12|Account_Name_12|br_no_des_12|imac_advd_lmt_strt_dt_12|source_input_path_12
Banking_Account_Active_13|Account_Balance_Date_13|source_13|source_date_13|Account_Currency_13|Account_Number_13|imac_advd_lmt_amt_13|prod_cod_13|imac_ulim_amt_13|br_no_13|Booking_Country_13|imac_advd_lmt_expr_dt_13|Account_Balance_13|Account_Closure_Date_13|Account_Open_Date_13|prod_cod_des_13|imac_rec_type_13|Account_Name_13|br_no_des_13|imac_advd_lmt_strt_dt_13|source_input_path_13
Banking_Account_Active_14|Account_Balance_Date_14|source_14|source_date_14|Account_Currency_14|Account_Number_14|imac_advd_lmt_amt_14|prod_cod_14|imac_ulim_amt_14|br_no_14|Booking_Country_14|imac_advd_lmt_expr_dt_14|Account_Balance_14|Account_Closure_Date_14|Account_Open_Date_14|prod_cod_des_14|imac_rec_type_14|Account_Name_14|br_no_des_14|imac_advd_lmt_strt_dt_14|source_input_path_14
Banking_Account_Active_15|Account_Balance_Date_15|source_15|source_date_15|Account_Currency_15|Account_Number_15|imac_advd_lmt_amt_15|prod_cod_15|imac_ulim_amt_15|br_no_15|Booking_Country_15|imac_advd_lmt_expr_dt_15|Account_Balance_15|Account_Closure_Date_15|Account_Open_Date_15|prod_cod_des_15|imac_rec_type_15|Account_Name_15|br_no_des_15|imac_advd_lmt_strt_dt_15|source_input_path_15
Banking_Account_Active_16|Account_Balance_Date_16|source_16|source_date_16|Account_Currency_16|Account_Number_16|imac_advd_lmt_amt_16|prod_cod_16|imac_ulim_amt_16|br_no_16|Booking_Country_16|imac_advd_lmt_expr_dt_16|Account_Balance_16|Account_Closure_Date_16|Account_Open_Date_16|prod_cod_des_16|imac_rec_type_16|Account_Name_16|br_no_des_16|imac_advd_lmt_strt_dt_16|source_input_path_16
Banking_Account_Active_17|Account_Balance_Date_17|source_17|source_date_17|Account_Currency_17|Account_Number_17|imac_advd_lmt_amt_17|prod_cod_17|imac_ulim_amt_17|br_no_17|Booking_Country_17|imac_advd_lmt_expr_dt_17|Account_Balance_17|Account_Closure_Date_17|Account_Open_Date_17|prod_cod_des_17|imac_rec_type_17|Account_Name_17|br_no_des_17|imac_advd_lmt_strt_dt_17|source_input_path_17
Banking_Account_Active_18|Account_Balance_Date_18|source_18|source_date_18|Account_Currency_18|Account_Number_18|imac_advd_lmt_amt_18|prod_cod_18|imac_ulim_amt_18|br_no_18|Booking_Country_18|imac_advd_lmt_expr_dt_18|Account_Balance_18|Account_Closure_Date_18|Account_Open_Date_18|prod_cod_des_18|imac_rec_type_18|Account_Name_18|br_no_des_18|imac_advd_lmt_strt_dt_18|source_input_path_18
Banking_Account_Active_19|Account_Balance_Date_19|source_19|source_date_19|Account_Currency_19|Account_Number_19|imac_advd_lmt_amt_19|prod_cod_19|imac_ulim_amt_19|br_no_19|Booking_Country_19|imac_advd_lmt_expr_dt_19|Account_Balance_19|Account_Closure_Date_19|Account_Open_Date_19|prod_cod_des_19|imac_rec_type_19|Account_Name_19|br_no_des_19|imac_advd_lmt_strt_dt_19|source_input_path_19
Banking_Account_Active_20|Account_Balance_Date_20|source_20|source_date_20|Account_Currency_20|Account_Number_20|imac_advd_lmt_amt_20|prod_cod_20|imac_ulim_amt_20|br_no_20|Booking_Country_20|imac_advd_lmt_expr_dt_20|Account_Balance_20|Account_Closure_Date_20|Account_Open_Date_20|prod_cod_des_20|imac_rec_type_20|Account_Name_20|br_no_des_20|imac_advd_lmt_strt_dt_20|source_input_path_20
Banking_Account_Active_21|Account_Balance_Date_21|source_21|source_date_21|Account_Currency_21|Account_Number_21|imac_advd_lmt_amt_21|prod_cod_21|imac_ulim_amt_21|br_no_21|Booking_Country_21|imac_advd_lmt_expr_dt_21|Account_Balance_21|Account_Closure_Date_21|Account_Open_Date_21|prod_cod_des_21|imac_rec_type_21|Account_Name_21|br_no_des_21|imac_advd_lmt_strt_dt_21|source_input_path_21
Banking_Account_Active_22|Account_Balance_Date_22|source_22|source_date_22|Account_Currency_22|Account_Number_22|imac_advd_lmt_amt_22|prod_cod_22|imac_ulim_amt_22|br_no_22|Booking_Country_22|imac_advd_lmt_expr_dt_22|Account_Balance_22|Account_Closure_Date_22|Account_Open_Date_22|prod_cod_des_22|imac_rec_type_22|Account_Name_22|br_no_des_22|imac_advd_lmt_strt_dt_22|source_input_path_22
Banking_Account_Active_23|Account_Balance_Date_23|source_23|source_date_23|Account_Currency_23|Account_Number_23|imac_advd_lmt_amt_23|prod_cod_23|imac_ulim_amt_23|br_no_23|Booking_Country_23|imac_advd_lmt_expr_dt_23|Account_Balance_23|Account_Closure_Date_23|Account_Open_Date_23|prod_cod_des_23|imac_rec_type_23|Account_Name_23|br_no_des_23|imac_advd_lmt_strt_dt_23|source_input_path_23
Banking_Account_Active_24|Account_Balance_Date_24|source_24|source_date_24|Account_Currency_24|Account_Number_24|imac_advd_lmt_amt_24|prod_cod_24|imac_ulim_amt_24|br_no_24|Booking_Country_24|imac_advd_lmt_expr_dt_24|Account_Balance_24|Account_Closure_Date_24|Account_Open_Date_24|prod_cod_des_24|imac_rec_type_24|Account_Name_24|br_no_des_24|imac_advd_lmt_strt_dt_24|source_input_path_24
Banking_Account_Active_25|Account_Balance_Date_25|source_25|source_date_25|Account_Currency_25|Account_Number_25|imac_advd_lmt_amt_25|prod_cod_25|imac_ulim_amt_25|br_no_25|Booking_Country_25|imac_advd_lmt_expr_dt_25|Account_Balance_25|Account_Closure_Date_25|Account_Open_Date_25|prod_cod_des_25|imac_rec_type_25|Account_Name_25|br_no_des_25|imac_advd_lmt_strt_dt_25|source_input_path_25
Banking_Account_Active_26|Account_Balance_Date_26|source_26|source_date_26|Account_Currency_26|Account_Number_26|imac_advd_lmt_amt_26|prod_cod_26|imac_ulim_amt_26|br_no_26|Booking_Country_26|imac_advd_lmt_expr_dt_26|Account_Balance_26|Account_Closure_Date_26|Account_Open_Date_26|prod_cod_des_26|imac_rec_type_26|Account_Name_26|br_no_des_26|imac_advd_lmt_strt_dt_26|source_input_path_26
Banking_Account_Active_27|Account_Balance_Date_27|source_27|source_date_27|Account_Currency_27|Account_Number_27|imac_advd_lmt_amt_27|prod_cod_27|imac_ulim_amt_27|br_no_27|Booking_Country_27|imac_advd_lmt_expr_dt_27|Account_Balance_27|Account_Closure_Date_27|Account_Open_Date_27|prod_cod_des_27|imac_rec_type_27|Account_Name_27|br_no_des_27|imac_advd_lmt_strt_dt_27|source_input_path_27
Banking_Account_Active_28|Account_Balance_Date_28|source_28|source_date_28|Account_Currency_28|Account_Number_28|imac_advd_lmt_amt_28|prod_cod_28|imac_ulim_amt_28|br_no_28|Booking_Country_28|imac_advd_lmt_expr_dt_28|Account_Balance_28|Account_Closure_Date_28|Account_Open_Date_28|prod_cod_des_28|imac_rec_type_28|Account_Name_28|br_no_des_28|imac_advd_lmt_strt_dt_28|source_input_path_28
Banking_Account_Active_29|Account_Balance_Date_29|source_29|source_date_29|Account_Currency_29|Account_Number_29|imac_advd_lmt_amt_29|prod_cod_29|imac_ulim_amt_29|br_no_29|Booking_Country_29|imac_advd_lmt_expr_dt_29|Account_Balance_29|Account_Closure_Date_29|Account_Open_Date_29|prod_cod_des_29|imac_rec_type_29|Account_Name_29|br_no_des_29|imac_advd_lmt_strt_dt_29|source_input_path_29
Banking_Account_Active_30|Account_Balance_Date_30|source_30|source_date_30|Account_Currency_30|Account_Number_30|imac_advd_lmt_amt_30|prod_cod_30|imac_ulim_amt_30|br_no_30|Booking_Country_30|imac_advd_lmt_expr_dt_30|Account_Balance_30|Account_Closure_Date_30|Account_Open_Date_30|prod_cod_des_30|imac_rec_type_30|Account_Name_30|br_no_des_30|imac_advd_lmt_strt_dt_30|source_input_path_30
Banking_Account_Active_31|Account_Balance_Date_31|source_31|source_date_31|Account_Currency_31|Account_Number_31|imac_advd_lmt_amt_31|prod_cod_31|imac_ulim_amt_31|br_no_31|Booking_Country_31|imac_advd_lmt_expr_dt_31|Account_Balance_31|Account_Closure_Date_31|Account_Open_Date_31|prod_cod_des_31|imac_rec_type_31|Account_Name_31|br_no_des_31|imac_advd_lmt_strt_dt_31|source_input_path_31
Banking_Account_Active_32|Account_Balance_Date_32|source_32|source_date_32|Account_Currency_32|Account_Number_32|imac_advd_lmt_amt_32|prod_cod_32|imac_ulim_amt_32|br_no_32|Booking_Country_32|imac_advd_lmt_expr_dt_32|Account_Balance_32|Account_Closure_Date_32|Account_Open_Date_32|prod_cod_des_32|imac_rec_type_32|Account_Name_32|br_no_des_32|imac_advd_lmt_strt_dt_32|source_input_path_32
Banking_Account_Active_33|Account_Balance_Date_33|source_33|source_date_33|Account_Currency_33|Account_Number_33|imac_advd_lmt_amt_33|prod_cod_33|imac_ulim_amt_33|br_no_33|Booking_Country_33|imac_advd_lmt_expr_dt_33|Account_Balance_33|Account_Closure_Date_33|Account_Open_Date_33|prod_cod_des_33|imac_rec_type_33|Account_Name_33|br_no_des_33|imac_advd_lmt_strt_dt_33|source_input_path_33
Banking_Account_Active_34|Account_Balance_Date_34|source_34|source_date_34|Account_Currency_34|Account_Number_34|imac_advd_lmt_amt_34|prod_cod_34|imac_ulim_amt_34|br_no_34|Booking_Country_34|imac_advd_lmt_expr_dt_34|Account_Balance_34|Account_Closure_Date_34|Account_Open_Date_34|prod_cod_des_34|imac_rec_type_34|Account_Name_34|br_no_des_34|imac_advd_lmt_strt_dt_34|source_input_path_34
Banking_Account_Active_35|Account_Balance_Date_35|source_35|source_date_35|Account_Currency_35|Account_Number_35|imac_advd_lmt_amt_35|prod_cod_35|imac_ulim_amt_35|br_no_35|Booking_Country_35|imac_advd_lmt_expr_dt_35|Account_Balance_35|Account_Closure_Date_35|Account_Open_Date_35|prod_cod_des_35|imac_rec_type_35|Account_Name_35|br_no_des_35|imac_advd_lmt_strt_dt_35|source_input_path_35
Banking_Account_Active_36|Account_Balance_Date_36|source_36|source_date_36|Account_Currency_36|Account_Number_36|imac_advd_lmt_amt_36|prod_cod_36|imac_ulim_amt_36|br_no_36|Booking_Country_36|imac_advd_lmt_expr_dt_36|Account_Balance_36|Account_Closure_Date_36|Account_Open_Date_36|prod_cod_des_36|imac_rec_type_36|Account_Name_36|br_no_des_36|imac_advd_lmt_strt_dt_36|source_input_path_36
Banking_Account_Active_37|Account_Balance_Date_37|source_37|source_date_37|Account_Currency_37|Account_Number_37|imac_advd_lmt_amt_37|prod_cod_37|imac_ulim_amt_37|br_no_37|Booking_Country_37|imac_advd_lmt_expr_dt_37|Account_Balance_37|Account_Closure_Date_37|Account_Open_Date_37|prod_cod_des_37|imac_rec_type_37|Account_Name_37|br_no_des_37|imac_advd_lmt_strt_dt_37|source_input_path_37
Banking_Account_Active_38|Account_Balance_Date_38|source_38|source_date_38|Account_Currency_38|Account_Number_38|imac_advd_lmt_amt_38|prod_cod_38|imac_ulim_amt_38|br_no_38|Booking_Country_38|imac_advd_lmt_expr_dt_38|Account_Balance_38|Account_Closure_Date_38|Account_Open_Date_38|prod_cod_des_38|imac_rec_type_38|Account_Name_38|br_no_des_38|imac_advd_lmt_strt_dt_38|source_input_path_38
Banking_Account_Active_39|Account_Balance_Date_39|source_39|source_date_39|Account_Currency_39|Account_Number_39|imac_advd_lmt_amt_39|prod_cod_39|imac_ulim_amt_39|br_no_39|Booking_Country_39|imac_advd_lmt_expr_dt_39|Account_Balance_39|Account_Closure_Date_39|Account_Open_Date_39|prod_cod_des_39|imac_rec_type_39|Account_Name_39|br_no_des_39|imac_advd_lmt_strt_dt_39|source_input_path_39
Banking_Account_Active_40|Account_Balance_Date_40|source_40|source_date_40|Account_Currency_40|Account_Number_40|imac_advd_lmt_amt_40|prod_cod_40|imac_ulim_amt_40|br_no_40|Booking_Country_40|imac_advd_lmt_expr_dt_40|Account_Balance_40|Account_Closure_Date_40|Account_Open_Date_40|prod_cod_des_40|imac_rec_type_40|Account_Name_40|br_no_des_40|imac_advd_lmt_strt_dt_40|source_input_path_40
Banking_Account_Active_41|Account_Balance_Date_41|source_41|source_date_41|Account_Currency_41|Account_Number_41|imac_advd_lmt_amt_41|prod_cod_41|imac_ulim_amt_41|br_no_41|Booking_Country_41|imac_advd_lmt_expr_dt_41|Account_Balance_41|Account_Closure_Date_41|Account_Open_Date_41|prod_cod_des_41|imac_rec_type_41|Account_Name_41|br_no_des_41|imac_advd_lmt_strt_dt_41|source_input_path_41
Banking_Account_Active_42|Account_Balance_Date_42|source_42|source_date_42|Account_Currency_42|Account_Number_42|imac_advd_lmt_amt_42|prod_cod_42|imac_ulim_amt_42|br_no_42|Booking_Country_42|imac_advd_lmt_expr_dt_42|Account_Balance_42|Account_Closure_Date_42|Account_Open_Date_42|prod_cod_des_42|imac_rec_type_42|Account_Name_42|br_no_des_42|imac_advd_lmt_strt_dt_42|source_input_path_42
Banking_Account_Active_43|Account_Balance_Date_43|source_43|source_date_43|Account_Currency_43|Account_Number_43|imac_advd_lmt_amt_43|prod_cod_43|imac_ulim_amt_43|br_no_43|Booking_Country_43|imac_advd_lmt_expr_dt_43|Account_Balance_43|Account_Closure_Date_43|Account_Open_Date_43|prod_cod_des_43|imac_rec_type_43|Account_Name_43|br_no_des_43|imac_advd_lmt_strt_dt_43|source_input_path_43
Banking_Account_Active_44|Account_Balance_Date_44|source_44|source_date_44|Account_Currency_44|Account_Number_44|imac_advd_lmt_amt_44|prod_cod_44|imac_ulim_amt_44|br_no_44|Booking_Country_44|imac_advd_lmt_expr_dt_44|Account_Balance_44|Account_Closure_Date_44|Account_Open_Date_44|prod_cod_des_44|imac_rec_type_44|Account_Name_44|br_no_des_44|imac_advd_lmt_strt_dt_44|source_input_path_44
Banking_Account_Active_45|Account_Balance_Date_45|source_45|source_date_45|Account_Currency_45|Account_Number_45|imac_advd_lmt_amt_45|prod_cod_45|imac_ulim_amt_45|br_no_45|Booking_Country_45|imac_advd_lmt_expr_dt_45|Account_Balance_45|Account_Closure_Date_45|Account_Open_Date_45|prod_cod_des_45|imac_rec_type_45|Account_Name_45|br_no_des_45|imac_advd_lmt_strt_dt_45|source_input_path_45
Banking_Account_Active_46|Account_Balance_Date_46|source_46|source_date_46|Account_Currency_46|Account_Number_46|imac_advd_lmt_amt_46|prod_cod_46|imac_ulim_amt_46|br_no_46|Booking_Country_46|imac_advd_lmt_expr_dt_46|Account_Balance_46|Account_Closure_Date_46|Account_Open_Date_46|prod_cod_des_46|imac_rec_type_46|Account_Name_46|br_no_des_46|imac_advd_lmt_strt_dt_46|source_input_path_46
Banking_Account_Active_47|Account_Balance_Date_47|source_47|source_date_47|Account_Currency_47|Account_Number_47|imac_advd_lmt_amt_47|prod_cod_47|imac_ulim_amt_47|br_no_47|Booking_Country_47|imac_advd_lmt_expr_dt_47|Account_Balance_47|Account_Closure_Date_47|Account_Open_Date_47|prod_cod_des_47|imac_rec_type_47|Account_Name_47|br_no_des_47|imac_advd_lmt_strt_dt_47|source_input_path_47
Banking_Account_Active_48|Account_Balance_Date_48|source_48|source_date_48|Account_Currency_48|Account_Number_48|imac_advd_lmt_amt_48|prod_cod_48|imac_ulim_amt_48|br_no_48|Booking_Country_48|imac_advd_lmt_expr_dt_48|Account_Balance_48|Account_Closure_Date_48|Account_Open_Date_48|prod_cod_des_48|imac_rec_type_48|Account_Name_48|br_no_des_48|imac_advd_lmt_strt_dt_48|source_input_path_48
Banking_Account_Active_49|Account_Balance_Date_49|source_49|source_date_49|Account_Currency_49|Account_Number_49|imac_advd_lmt_amt_49|prod_cod_49|imac_ulim_amt_49|br_no_49|Booking_Country_49|imac_advd_lmt_expr_dt_49|Account_Balance_49|Account_Closure_Date_49|Account_Open_Date_49|prod_cod_des_49|imac_rec_type_49|Account_Name_49|br_no_des_49|imac_advd_lmt_strt_dt_49|source_input_path_49
Banking_Account_Active_50|Account_Balance_Date_50|source_50|source_date_50|Account_Currency_50|Account_Number_50|imac_advd_lmt_amt_50|prod_cod_50|imac_ulim_amt_50|br_no_50|Booking_Country_50|imac_advd_lmt_expr_dt_50|Account_Balance_50|Account_Closure_Date_50|Account_Open_Date_50|prod_cod_des_50|imac_rec_type_50|Account_Name_50|br_no_des_50|imac_advd_lmt_strt_dt_50|source_input_path_50
Banking_Account_Active_51|Account_Balance_Date_51|source_51|source_date_51|Account_Currency_51|Account_Number_51|imac_advd_lmt_amt_51|prod_cod_51|imac_ulim_amt_51|br_no_51|Booking_Country_51|imac_advd_lmt_expr_dt_51|Account_Balance_51|Account_Closure_Date_51|Account_Open_Date_51|prod_cod_des_51|imac_rec_type_51|Account_Name_51|br_no_des_51|imac_advd_lmt_strt_dt_51|source_input_path_51
Banking_Account_Active_52|Account_Balance_Date_52|source_52|source_date_52|Account_Currency_52|Account_Number_52|imac_advd_lmt_amt_52|prod_cod_52|imac_ulim_amt_52|br_no_52|Booking_Country_52|imac_advd_lmt_expr_dt_52|Account_Balance_52|Account_Closure_Date_52|Account_Open_Date_52|prod_cod_des_52|imac_rec_type_52|Account_Name_52|br_no_des_52|imac_advd_lmt_strt_dt_52|source_input_path_52
Banking_Account_Active_53|Account_Balance_Date_53|source_53|source_date_53|Account_Currency_53|Account_Number_53|imac_advd_lmt_amt_53|prod_cod_53|imac_ulim_amt_53|br_no_53|Booking_Country_53|imac_advd_lmt_expr_dt_53|Account_Balance_53|Account_Closure_Date_53|Account_Open_Date_53|prod_cod_des_53|imac_rec_type_53|Account_Name_53|br_no_des_53|imac_advd_lmt_strt_dt_53|source_input_path_53
Banking_Account_Active_54|Account_Balance_Date_54|source_54|source_date_54|Account_Currency_54|Account_Number_54|imac_advd_lmt_amt_54|prod_cod_54|imac_ulim_amt_54|br_no_54|Booking_Country_54|imac_advd_lmt_expr_dt_54|Account_Balance_54|Account_Closure_Date_54|Account_Open_Date_54|prod_cod_des_54|imac_rec_type_54|Account_Name_54|br_no_des_54|imac_advd_lmt_strt_dt_54|source_input_path_54
Banking_Account_Active_55|Account_Balance_Date_55|source_55|source_date_55|Account_Currency_55|Account_Number_55|imac_advd_lmt_amt_55|prod_cod_55|imac_ulim_amt_55|br_no_55|Booking_Country_55|imac_advd_lmt_expr_dt_55|Account_Balance_55|Account_Closure_Date_55|Account_Open_Date_55|prod_cod_des_55|imac_rec_type_55|Account_Name_55|br_no_des_55|imac_advd_lmt_strt_dt_55|source_input_path_55
Banking_Account_Active_56|Account_Balance_Date_56|source_56|source_date_56|Account_Currency_56|Account_Number_56|imac_advd_lmt_amt_56|prod_cod_56|imac_ulim_amt_56|br_no_56|Booking_Country_56|imac_advd_lmt_expr_dt_56|Account_Balance_56|Account_Closure_Date_56|Account_Open_Date_56|prod_cod_des_56|imac_rec_type_56|Account_Name_56|br_no_des_56|imac_advd_lmt_strt_dt_56|source_input_path_56
Banking_Account_Active_57|Account_Balance_Date_57|source_57|source_date_57|Account_Currency_57|Account_Number_57|imac_advd_lmt_amt_57|prod_cod_57|imac_ulim_amt_57|br_no_57|Booking_Country_57|imac_advd_lmt_expr_dt_57|Account_Balance_57|Account_Closure_Date_57|Account_Open_Date_57|prod_cod_des_57|imac_rec_type_57|Account_Name_57|br_no_des_57|imac_advd_lmt_strt_dt_57|source_input_path_57
Banking_Account_Active_58|Account_Balance_Date_58|source_58|source_date_58|Account_Currency_58|Account_Number_58|imac_advd_lmt_amt_58|prod_cod_58|imac_ulim_amt_58|br_no_58|Booking_Country_58|imac_advd_lmt_expr_dt_58|Account_Balance_58|Account_Closure_Date_58|Account_Open_Date_58|prod_cod_des_58|imac_rec_type_58|Account_Name_58|br_no_des_58|imac_advd_lmt_strt_dt_58|source_input_path_58
Banking_Account_Active_59|Account_Balance_Date_59|source_59|source_date_59|Account_Currency_59|Account_Number_59|imac_advd_lmt_amt_59|prod_cod_59|imac_ulim_amt_59|br_no_59|Booking_Country_59|imac_advd_lmt_expr_dt_59|Account_Balance_59|Account_Closure_Date_59|Account_Open_Date_59|prod_cod_des_59|imac_rec_type_59|Account_Name_59|br_no_des_59|imac_advd_lmt_strt_dt_59|source_input_path_59
Banking_Account_Active_60|Account_Balance_Date_60|source_60|source_date_60|Account_Currency_60|Account_Number_60|imac_advd_lmt_amt_60|prod_cod_60|imac_ulim_amt_60|br_no_60|Booking_Country_60|imac_advd_lmt_expr_dt_60|Account_Balance_60|Account_Closure_Date_60|Account_Open_Date_60|prod_cod_des_60|imac_rec_type_60|Account_Name_60|br_no_des_60|imac_advd_lmt_strt_dt_60|source_input_path_60
Banking_Account_Active|Account_Balance_Date|source_date|Account_Currency|Account_Number|WS_PROC_GRP_CDE|Booking_Country|Account_Balance|WS_ACCT_STA_CHG_DTE|Account_Closure_Date|WS_CC_NO|WS_COA_NO|tresataId_sub|Account_Name|Product|source_input_path|WS_OFCR_RESP_CDE
ZxfwlA-82931|us|39735|uk_hk|-(1637766888440_uk)-|1637766888447|iRbvc|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_1|Account_Name_1|Product_1|source_input_path_1|WS_OFCR_RESP_CDE_1
nsuLFw-91551|hk|15158|uk_hk|-(1637766888440_uk)-|1637766888447|CgDHK|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_2|Account_Name_2|Product_2|source_input_path_2|WS_OFCR_RESP_CDE_2
fkVyhQ-12580|us|10490|us_uk|-(1637766888440_uk)-|1637766888447|liMFv|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_3|Account_Name_3|Product_3|source_input_path_3|WS_OFCR_RESP_CDE_3
ryPmeN-29199|us|65542|hk_hk|-(1637766888440_hk)-|1637766888447|CFQlB|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_4|Account_Name_4|Product_4|source_input_path_4|WS_OFCR_RESP_CDE_4
DGQuvu-42428|uk|77174|hk_uk|-(1637766888440_us)-|1637766888447|FDrup|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_5|Account_Name_5|Product_5|source_input_path_5|WS_OFCR_RESP_CDE_5
PPSTpJ-15657|uk|46873|us_us|-(1637766888440_hk)-|1637766888447|FUjPN|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_6|Account_Name_6|Product_6|source_input_path_6|WS_OFCR_RESP_CDE_6
iqBrKh-36289|hk|68539|us_us|-(1637766888440_hk)-|1637766888447|mQeaH|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_7|Account_Name_7|Product_7|source_input_path_7|WS_OFCR_RESP_CDE_7
XdPgpX-28165|us|69723|us_us|-(1637766888440_us)-|1637766888447|illBh|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_8|Account_Name_8|Product_8|source_input_path_8|WS_OFCR_RESP_CDE_8
AIBlTj-32594|us|84158|uk_hk|-(1637766888440_us)-|1637766888447|ShvhD|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_9|Account_Name_9|Product_9|source_input_path_9|WS_OFCR_RESP_CDE_9
VPIHzk-51322|hk|21541|hk_hk|-(1637766888441_uk)-|1637766888447|pBwCF|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_10|Account_Name_10|Product_10|source_input_path_10|WS_OFCR_RESP_CDE_10
iIvLjm-67311|hk|69663|us_hk|-(1637766888441_uk)-|1637766888447|wUsDa|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_11|Account_Name_11|Product_11|source_input_path_11|WS_OFCR_RESP_CDE_11
PJFZeD-27675|uk|23267|uk_uk|-(1637766888441_uk)-|1637766888447|atBrq|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_12|Account_Name_12|Product_12|source_input_path_12|WS_OFCR_RESP_CDE_12
kUtDfU-92100|us|59611|us_uk|-(1637766888441_uk)-|1637766888447|fqEWL|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_13|Account_Name_13|Product_13|source_input_path_13|WS_OFCR_RESP_CDE_13
MUpLIg-38146|us|15761|hk_hk|-(1637766888441_uk)-|1637766888447|GyKRA|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_14|Account_Name_14|Product_14|source_input_path_14|WS_OFCR_RESP_CDE_14
kbXiFw-11427|us|23691|hk_uk|-(1637766888441_uk)-|1637766888449|TbXJH|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_15|Account_Name_15|Product_15|source_input_path_15|WS_OFCR_RESP_CDE_15
iPPgGF-55165|us|42313|hk_us|-(1637766888441_uk)-|1637766888449|TeWjk|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_16|Account_Name_16|Product_16|source_input_path_16|WS_OFCR_RESP_CDE_16
SnQHVA-11966|us|56577|us_uk|-(1637766888441_hk)-|1637766888449|JWQgJ|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_17|Account_Name_17|Product_17|source_input_path_17|WS_OFCR_RESP_CDE_17
FLgjnb-18319|uk|67651|uk_uk|-(1637766888441_uk)-|1637766888449|nfUph|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_18|Account_Name_18|Product_18|source_input_path_18|WS_OFCR_RESP_CDE_18
lvaJyM-81189|us|55113|us_uk|-(1637766888441_hk)-|1637766888449|jpkrZ|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_19|Account_Name_19|Product_19|source_input_path_19|WS_OFCR_RESP_CDE_19
KcaiCW-19148|uk|69111|hk_uk|-(1637766888441_us)-|1637766888449|Xfhjh|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_20|Account_Name_20|Product_20|source_input_path_20|WS_OFCR_RESP_CDE_20
crFtzg-97941|hk|65319|hk_us|-(1637766888441_hk)-|1637766888449|bHFud|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_21|Account_Name_21|Product_21|source_input_path_21|WS_OFCR_RESP_CDE_21
QqZDbA-12495|us|52413|hk_uk|-(1637766888441_us)-|1637766888449|CHsqj|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_22|Account_Name_22|Product_22|source_input_path_22|WS_OFCR_RESP_CDE_22
kNsbpa-55158|us|29911|uk_uk|-(1637766888442_hk)-|1637766888449|wdkYP|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_23|Account_Name_23|Product_23|source_input_path_23|WS_OFCR_RESP_CDE_23
gJvjXP-89849|uk|74384|hk_hk|-(1637766888442_hk)-|1637766888449|gNFIB|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_24|Account_Name_24|Product_24|source_input_path_24|WS_OFCR_RESP_CDE_24
DPncrF-51528|uk|59587|hk_us|-(1637766888442_hk)-|1637766888449|UrUsJ|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_25|Account_Name_25|Product_25|source_input_path_25|WS_OFCR_RESP_CDE_25
CyikJp-54927|us|63239|hk_hk|-(1637766888442_us)-|1637766888449|KLaua|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_26|Account_Name_26|Product_26|source_input_path_26|WS_OFCR_RESP_CDE_26
GcdisN-26511|hk|31712|us_hk|-(1637766888442_us)-|1637766888449|izwzi|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_27|Account_Name_27|Product_27|source_input_path_27|WS_OFCR_RESP_CDE_27
FLbDwe-99151|uk|66811|us_us|-(1637766888442_uk)-|1637766888449|DCvpq|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_28|Account_Name_28|Product_28|source_input_path_28|WS_OFCR_RESP_CDE_28
TDdkbG-13126|hk|73455|uk_hk|-(1637766888442_us)-|1637766888449|gQunV|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_29|Account_Name_29|Product_29|source_input_path_29|WS_OFCR_RESP_CDE_29
qCqlKE-74691|hk|35615|hk_hk|-(1637766888442_us)-|1637766888449|QBJzB|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_30|Account_Name_30|Product_30|source_input_path_30|WS_OFCR_RESP_CDE_30
VKnHXT-61287|hk|84546|us_hk|-(1637766888442_hk)-|1637766888449|VbMTy|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_31|Account_Name_31|Product_31|source_input_path_31|WS_OFCR_RESP_CDE_31
JMfwnk-75344|hk|15318|us_us|-(1637766888442_us)-|1637766888449|YYaGZ|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_32|Account_Name_32|Product_32|source_input_path_32|WS_OFCR_RESP_CDE_32
CtkLzz-33343|uk|91113|uk_us|-(1637766888442_us)-|1637766888449|KJiNT|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_33|Account_Name_33|Product_33|source_input_path_33|WS_OFCR_RESP_CDE_33
PgimxN-15599|hk|94881|uk_us|-(1637766888444_hk)-|1637766888449|abFLK|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_34|Account_Name_34|Product_34|source_input_path_34|WS_OFCR_RESP_CDE_34
aJlTYq-12577|hk|85146|hk_us|-(1637766888444_hk)-|1637766888450|NHqUY|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_35|Account_Name_35|Product_35|source_input_path_35|WS_OFCR_RESP_CDE_35
GKmlVJ-84546|us|48219|us_hk|-(1637766888444_hk)-|1637766888450|biWpV|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_36|Account_Name_36|Product_36|source_input_path_36|WS_OFCR_RESP_CDE_36
vDGCHN-26188|uk|99897|us_hk|-(1637766888444_hk)-|1637766888450|NBEZW|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_37|Account_Name_37|Product_37|source_input_path_37|WS_OFCR_RESP_CDE_37
rZGlBE-29512|hk|29311|us_hk|-(1637766888444_hk)-|1637766888450|JYhyg|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_38|Account_Name_38|Product_38|source_input_path_38|WS_OFCR_RESP_CDE_38
wtxGWk-51643|us|53548|hk_hk|-(1637766888444_us)-|1637766888450|qcEKt|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_39|Account_Name_39|Product_39|source_input_path_39|WS_OFCR_RESP_CDE_39
hDcnuJ-89175|uk|10553|hk_hk|-(1637766888444_us)-|1637766888450|vnEPb|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_40|Account_Name_40|Product_40|source_input_path_40|WS_OFCR_RESP_CDE_40
SBHYIV-51847|us|61814|us_hk|-(1637766888444_uk)-|1637766888450|ueydi|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_41|Account_Name_41|Product_41|source_input_path_41|WS_OFCR_RESP_CDE_41
fddkeT-64179|us|12327|uk_hk|-(1637766888444_us)-|1637766888450|rDPCl|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_42|Account_Name_42|Product_42|source_input_path_42|WS_OFCR_RESP_CDE_42
yLUmwA-59381|us|95331|hk_uk|-(1637766888444_uk)-|1637766888450|sPNNk|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_43|Account_Name_43|Product_43|source_input_path_43|WS_OFCR_RESP_CDE_43
mAIdji-96386|uk|86177|uk_uk|-(1637766888444_us)-|1637766888450|bawNi|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_44|Account_Name_44|Product_44|source_input_path_44|WS_OFCR_RESP_CDE_44
PvRNAm-81291|uk|21517|hk_hk|-(1637766888444_us)-|1637766888450|PDaiG|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_45|Account_Name_45|Product_45|source_input_path_45|WS_OFCR_RESP_CDE_45
LBwVRn-69185|us|45245|uk_us|-(1637766888444_hk)-|1637766888450|Chxsl|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_46|Account_Name_46|Product_46|source_input_path_46|WS_OFCR_RESP_CDE_46
Nwywaa-29927|hk|12851|us_uk|-(1637766888445_hk)-|1637766888450|dNCXP|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_47|Account_Name_47|Product_47|source_input_path_47|WS_OFCR_RESP_CDE_47
svurZD-44114|hk|11097|uk_hk|-(1637766888445_us)-|1637766888450|AnefN|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_48|Account_Name_48|Product_48|source_input_path_48|WS_OFCR_RESP_CDE_48
JcHVmm-53494|hk|58653|us_hk|-(1637766888445_uk)-|1637766888450|RKGUx|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_49|Account_Name_49|Product_49|source_input_path_49|WS_OFCR_RESP_CDE_49
XRZanK-51676|us|21914|hk_us|-(1637766888445_hk)-|1637766888450|yGLcY|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_50|Account_Name_50|Product_50|source_input_path_50|WS_OFCR_RESP_CDE_50
fWbMKC-19557|us|23243|us_us|-(1637766888445_uk)-|1637766888450|QCMBP|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_51|Account_Name_51|Product_51|source_input_path_51|WS_OFCR_RESP_CDE_51
NNKZVc-13813|uk|12536|us_hk|-(1637766888445_us)-|1637766888450|GkwdE|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_52|Account_Name_52|Product_52|source_input_path_52|WS_OFCR_RESP_CDE_52
ZgTUqr-57868|hk|19813|uk_uk|-(1637766888445_uk)-|1637766888450|diUDb|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_53|Account_Name_53|Product_53|source_input_path_53|WS_OFCR_RESP_CDE_53
hytWhd-59153|hk|91751|uk_us|-(1637766888445_uk)-|1637766888450|KTgzl|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_54|Account_Name_54|Product_54|source_input_path_54|WS_OFCR_RESP_CDE_54
WsJACj-84213|hk|61055|us_uk|-(1637766888445_hk)-|1637766888450|twMIl|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_55|Account_Name_55|Product_55|source_input_path_55|WS_OFCR_RESP_CDE_55
FAcEeX-33659|uk|83167|uk_hk|-(1637766888445_hk)-|1637766888450|qiSvZ|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_56|Account_Name_56|Product_56|source_input_path_56|WS_OFCR_RESP_CDE_56
qvAXNA-65883|hk|39444|uk_uk|-(1637766888445_hk)-|1637766888450|hWBqN|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_57|Account_Name_57|Product_57|source_input_path_57|WS_OFCR_RESP_CDE_57
EcZkCz-61276|hk|81431|uk_us|-(1637766888445_uk)-|1637766888450|pbbjf|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_58|Account_Name_58|Product_58|source_input_path_58|WS_OFCR_RESP_CDE_58
FJrQQp-49348|hk|64314|us_hk|-(1637766888445_hk)-|1637766888450|LnuyR|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_59|Account_Name_59|Product_59|source_input_path_59|WS_OFCR_RESP_CDE_59
vQumrj-99169|us|97961|uk_uk|-(1637766888445_us)-|1637766888450|pTLML|1637766888000|1637078400000|1637134306000|1637134367000|just for test|tresataId_sub_60|Account_Name_60|Product_60|source_input_path_60|WS_OFCR_RESP_CDE_60
wda-acct:
  Banking_Account_Active: <@random(string, 6)/>-<@random(int,5)/>
  Account_Balance_Date: <@random([uk     us      hk]) />
  source_date: <@random(int,5) />
  Account_Currency: <@random([uk     us      hk])/>_<@random([uk     us      hk])/>
  Account_Number: -(<@timestamp/>_<@random([ uk  us   hk ])/>)-
  WS_PROC_GRP_CDE: <@timestamp />
  Booking_Country: <@random />
  Account_Balance: <@timestamp(10) />
  WS_ACCT_STA_CHG_DTE: <@timestamp(20211117) />
  Account_Closure_Date: <@timestamp(20211117153146) />
  WS_CC_NO: <@timestamp(2021-11-17 15:32:47) />
  WS_COA_NO: <@test/>
  tresataId_sub: ''
  Account_Name: ''
  Product: ''
  source_input_path: ''
  WS_OFCR_RESP_CDE: ''
rps-acnt:
  Banking_Account_Active: ''
  Account_Balance_Date: ''
  source: ''
  source_date: ''
  Account_Currency: ''
  Account_Number: ''
  imac_advd_lmt_amt: ''
  prod_cod: ''
  imac_ulim_amt: ''
  br_no: ''
  Booking_Country: ''
  imac_advd_lmt_expr_dt: ''
  Account_Balance: ''
  Account_Closure_Date: ''
  Account_Open_Date: ''
  prod_cod_des: ''
  imac_rec_type: ''
  Account_Name: ''
  br_no_des: ''
  imac_advd_lmt_strt_dt: ''
  source_input_path: ''
cat: ./clientlifecycle-common-core/src/test/resources/test-data: Is a directory
cat: ./clientlifecycle-common-core/src/test/resources/test-data/hive: Is a directory
cat: ./clientlifecycle-common-core/src/test/resources/test-data/hive/db_demo: Is a directory
id|name
1|Amy
2|Zipcat: ./clientlifecycle-common-core/src/test/resources/test-data/parq: Is a directory
tid|product
t1|prod1
t2|prod2cat: ./clientlifecycle-common-core/src/test/scala: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm/bd/clm: Is a directory
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm/bd/clm/renderer: Is a directory
package com.hsbc.gbm.bd.clm.renderer

import java.io.File

import com.hsbc.gbm.bd.clm.env.RawJobParams
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

@RunWith(classOf[JUnitRunner])
class GenericTemplateRendererTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll {

  val renderer: GenericTemplateRenderer.type = GenericTemplateRenderer

  override def beforeAll(): Unit = {
    val script = new File("src/test/resources/out")
    if (script.exists()) {
      script.delete()
    }
  }

  override def afterAll(): Unit = {

  }


  test("Test generate from SubmitJobFgHDP06") {
    val args = Array(
      "artifactId=test-artifact-id-hdp06"
      , "artifactVersion=1.0.0"
      , "deploymentYamlPath=config/deployment-hdp06.yml"
      , "outputDir=src/test/resources/out/submit-job-fg-hdp06.sh"
      , "templateId=submit-job-fg-hdp06"
      , "templateVersion=1.1"
      , "printOutput=false"
      , "sparkHome=/usr/hdp/current/spark2-client"
    )
    renderer.render(RawJobParams(args))
    val script = new File("src/test/resources/out/submit-job-fg-hdp06.sh")
    script should exist
  }

  test("Test generate from SubmitJobFgHDP45") {
    val args = Array(
      "artifactId=test-artifact-id-hdp45"
      , "artifactVersion=1.0.0"
      , "deploymentYamlPath=config/deployment-hdp45.yml"
      , "outputDir=src/test/resources/out/submit-job-fg-hdp45.sh"
      , "templateId=submit-job-fg-hdp45"
      , "templateVersion=1.1"
      , "printOutput=false"
      , "sparkHome=/tmp/clm/spark3.1.1"
      , "submitCmd=spark-submit.sh"
    )
    renderer.render(RawJobParams(args))
    val script = new File("src/test/resources/out/submit-job-fg-hdp45.sh")
    script should exist
  }

  test("Test generate from SubmitJobFgHDP48") {
    val args = Array(
      "artifactId=test-artifact-id-hdp48"
      , "artifactVersion=1.0.0"
      , "deploymentYamlPath=config/deployment-hdp48.yml"
      , "outputDir=src/test/resources/out/submit-job-fg-hdp48.sh"
      , "templateId=submit-job-fg-hdp48"
      , "templateVersion=1.1"
      , "printOutput=false"
      , "sparkHome=/tmp/clm/spark2.4.3"
      , "submitCmd=spark3-submit"
    )
    renderer.render(RawJobParams(args))
    val script = new File("src/test/resources/out/submit-job-fg-hdp48.sh")
    script should exist
  }

}
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm/bd/clm/runner: Is a directory
package com.hsbc.gbm.bd.clm.runner

import org.apache.log4j.{Level, Logger}
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

class GenericSparkJobRunnerTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll {

  Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
  Logger.getRootLogger.setLevel(Level.ERROR)

  test("test GenericSparkJobRunner") {
    GenericSparkJobRunner.main(Array("SparkJobTest", "src/test/resources/config/test-application-scala.yml", "parameter0", "key1=parameter1"))
  }
}
cat: ./clientlifecycle-common-core/src/test/scala/com/hsbc/gbm/bd/clm/spark: Is a directory
package com.hsbc.gbm.bd.clm.spark

import com.hsbc.gbm.bd.clm.env.SparkEnv
import org.apache.spark.sql.SparkSession
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}
import com.hsbc.gbm.bd.clm.utils._
import org.apache.spark.sql.functions.{base64, col, concat_ws}

@RunWith(classOf[JUnitRunner])
class CommonFunctionsTest extends FunSuite
  with Matchers
  with SparkEnv
  with BeforeAndAfterAll {

  implicit val _spark_ : SparkSession = spark

  private val mainTable = spark.createDataFrame(Seq(
    ("1", "a"),
    ("1", "b"),
    ("1", "c"),
    ("1", "d1"),
    ("1", "d2"),
    ("1", "d3"),
    ("1", "d4"),
    ("1", "d5"),
    ("1", "d6"),
    ("2", "e")
  )).toDF("id", "product")
    .as("m")

  private val sideTable = spark.createDataFrame(Seq(
    ("1", "I"),
    ("2", "II"),
    ("4", "IIII"),
    ("3", null)
  )).toDF("id", "brand")
    .as("s")

  private val sideTable2 = spark.createDataFrame(Seq(
    ("1", "I"),
    ("2", "II"),
    ("3", null)
  )).toDF("id", "brand")
    .as("s")

  test("test joinDebaseSkew function") {
    val frame1 = mainTable.skewJoin(sideTable, Seq("id"), "left", Seq("m.id", "s.id"), Seq("1"))

    val tuple = mainTable.preSkewJoin(sideTable, "id", "id", Seq("1"))
    val frame2 = tuple._1.join(tuple._2, Seq("__id__"), "left").drop("__id__").drop(tuple._2("id"))

    frame1.collect() should contain allElementsOf frame2.collect()
  }

  test("test except function") {
    sideTable.except(sideTable2, Seq("run_date"), true)
      .select("id")
      .rdd
      .distinct
      .map(r => r(0).toString)
      .collect
      .toSeq should contain noElementsOf List("3")
    sideTable.except(sideTable2, Seq("run_date"), false)
      .select("id")
      .rdd
      .distinct
      .map(r => r(0).toString)
      .collect
      .toSeq should contain oneElementOf List("3")
  }

  def appName(): String = "spark-common-test"

  def configLocation(): String = "src/test/resources/config/test-application-scala.yml"
}
package com.hsbc.gbm.bd.clm.spark


import java.io.File

import com.hsbc.gbm.bd.clm.env.SparkEnv
import com.hsbc.gbm.bd.clm.utils.CsvUnitTestUtils
import org.apache.commons.io.FileUtils
import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.functions._
import org.apache.spark.sql.{DataFrame, SparkSession}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

@RunWith(classOf[JUnitRunner])
class CsvUnitTestUtilsTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll
  with SparkEnv {

  Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
  Logger.getRootLogger.setLevel(Level.ERROR)

  def appName(): String = "spark-common-test"

  def configLocation(): String = "src/test/resources/config/test-application-scala.yml"

  implicit val _spark_ : SparkSession = spark

  private def output: DataFrame = spark.read.parquet(appConfig("output"))

  override def beforeAll(): Unit = {
    CsvUnitTestUtils.csvToParquet(path = "src/test/resources/test-data/parq")
  }

  override def afterAll(): Unit = {
    FileUtils.deleteDirectory(new File("csv_data.parq"))
  }

  test("Test count") {
    output.show(false)
    output.count() shouldBe 2
  }

  test("Test column value") {
    output.select("product")
      .filter("tid = 't1'")
      .rdd.distinct.map(r => r(0).toString)
      .collect.toSeq should contain allElementsOf List("prod1")
  }
}
package com.hsbc.gbm.bd.clm.spark

import java.io.File

import com.hsbc.gbm.bd.clm.env.SparkEnv
import com.hsbc.gbm.bd.clm.utils.{CsvUnitTestUtils, MockDataUtils}
import org.apache.commons.io.FileUtils
import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.{DataFrame, SparkSession}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

@RunWith(classOf[JUnitRunner])
class MockDataTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll
  with SparkEnv {

  Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
  Logger.getRootLogger.setLevel(Level.ERROR)

  def appName(): String = "spark-mock-test"

  def configLocation(): String = "src/test/resources/config/test-mock-application.yml"

  implicit val _spark_ : SparkSession = spark

  private def output: DataFrame = spark.read.parquet(appConfig("outputPath"))

  override def beforeAll(): Unit = {
    val testParse: PartialFunction[String, String] = {
      case x if x.toLowerCase.contains("<@test") => {
        val pattern = "(<@test.*?/>)".r
        val first = pattern.findFirstIn(x).get

        x.replaceFirst(first.replace("(", """\(""")
          .replace(")", """\)""")
          , "just for test")
      }
    }

    //MockDataUtils.writeMockData(mappingPath = "src/test/resources/mapping.yml", num = 60, processFunc = Option(testParse))
    CsvUnitTestUtils.csvToParquet(path = "src/test/resources/mock-data-content/parq")
  }

  override def afterAll(): Unit = {
    FileUtils.deleteDirectory(new File("wda-acct.parq"))
    FileUtils.deleteDirectory(new File("rps-acnt.parq"))
  }

  test("Test count") {
    output.show(100, false)
    output.count() shouldBe 60
  }

  test("Test column value") {
    output.select("Account_Balance_Date")
      .rdd.distinct.map(r => r(0).toString)
      .collect.toSeq should contain allElementsOf List("uk", "us", "hk")
  }

  test("Test Partial Function") {
    output.select("WS_COA_NO")
      .rdd.distinct.map(r => r(0).toString)
      .collect.toSeq should contain allElementsOf List("just for test")
  }
}
package com.hsbc.gbm.bd.clm.spark

import com.hsbc.gbm.bd.clm.env.SparkEnv
import org.scalatest.FunSuite

class SparkEnvTest extends FunSuite with SparkEnv {

  def appName(): String = "spark-config-test"

  def configLocation(): String = "src/test/resources/config/test-application-scala.yml"


  test("Test getting a string value from appConfig") {
    val value: String = appConfig("monitoring.table.name")
    assert(value === "monitoring")
  }

  test("Test getting an integer value from appConfig") {
    val value: Int = appConfig("int-property")
    assert(value === 123)
  }

  test("Test getting a double value from appConfig") {
    val value: Double = appConfig("double-property")
    assert(value === 456.789)
  }

  test("Test getting a boolean value from appConfig") {
    val value: Boolean = appConfig("bool-property")
    assert(value === true)
  }

  test("Test getting a list of strings from appConfig") {
    val value: List[String] = appConfig("some-key.string-list")
    assert(value === List("item1", "item2", "item3"))
  }

  test("Test getting a map of strings from appConfig") {
    val value: Map[String, String] = appConfig("some-key.map-of-strings")
    assert(value === Map("item1" -> "value1", "item2" -> "value2", "item3" -> "value3"))
  }

  test("Test getting a map of ints from appConfig") {
    val value: Map[String, Int] = appConfig("some-key.map-of-ints")
    assert(value === Map("item1" -> 168, "item2" -> 2569, "item3" -> -14))
  }

  test("Test getting a map of doubles from appConfig") {
    val value: Map[String, Double] = appConfig("some-key.map-of-doubles")
    assert(value === Map("item1" -> 16.81256, "item2" -> 2.5690745, "item3" -> -0.1425456))
  }

  test("Test getting a map of booleans from appConfig") {
    val value: Map[String, Boolean] = appConfig("some-key.map-of-booleans")
    assert(value === Map("item1" -> true, "item2" -> false, "item3" -> true))
  }

  test("Test getting a list of integers from appConfig") {
    val value: List[Int] = appConfig("some-key.int-list")
    assert(value === List(101, 1045, 8625))
  }

  test("Test getting a list of doubles from appConfig") {
    val value: List[Double] = appConfig("some-key.double-list")
    assert(value === List(1.01, 104.5, 8625.16548))
  }

  test("Test non-existing key") {
    val thrown = intercept[NoSuchElementException] {
      val value: List[Double] = appConfig("invalid-key")
    }
    assert(thrown.getMessage === "key not found: invalid-key")
  }

  test("Test non-existing list key with default value") {
    val value: List[Int] = appConfig("invalid-key", List(1, 2, 3))
    assert(value === List(1, 2, 3))
  }

  test("Test non-existing string key with default value") {
    val value: String = appConfig("invalid-key", "DefaultValue")
    assert(value === "DefaultValue")
  }

}
package com.hsbc.gbm.bd.clm.spark

import com.hsbc.gbm.bd.clm.annotation.SparkJobName
import com.hsbc.gbm.bd.clm.env.{RawJobParams, SparkJob}

@SparkJobName("SparkJobTest")
class SparkJobTest(jobName: String, configPath: String, params: RawJobParams) extends SparkJob {
  override def process(): Unit = {

    val a = spark.createDataFrame(Seq(
      ("1", "a"),
      ("2", "b")
    )).toDF("id", "product")

    val b = spark.createDataFrame(Seq(
      ("1", "I"),
      ("2", "II")
    )).toDF("id", "level")

    a.join(b, Seq("id"), "inner").show(false)

    println(params(0))
    println(params("key1"))
  }

  override def appName(): String = jobName

  override def configLocation(): String = configPath
}
package com.hsbc.gbm.bd.clm

import com.hsbc.gbm.bd.clm.env.SparkEnv
import org.apache.spark.sql.SparkSession
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}
import com.hsbc.gbm.bd.clm.utils._

@RunWith(classOf[JUnitRunner])
class WriteValidTest extends FunSuite
  with Matchers
  with SparkEnv
  with BeforeAndAfterAll {

  implicit val _spark_ : SparkSession = spark

  test("test the speed of validate logic") {
    val csv_data = spark.read.option("header", "true").option("delimiter", "|").csv("src/test/resources/test-data/parq")
    csv_data.show()

    //write to Es
    if (appConfig("write.es").toString == "true") {
      csv_data.write2Es("clm-test", "clm-test.parquet")
    }
  }

  def appName(): String = "spark-common-test"

  def configLocation(): String = "src/test/resources/config/application.yml"
}cat: ./clientlifecycle-common-datalineage_2.11: Is a directory
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hsbc.gbm.bd.clm</groupId>
        <artifactId>clientlifecycle-common</artifactId>
        <version>2.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <artifactId>clientlifecycle-common-datalineage_2.11</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.hsbc.gbm.bd.clm</groupId>
            <artifactId>clientlifecycle-common-core_${scala.binary.version}</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>
cat: ./clientlifecycle-common-datalineage_2.11/src: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org/apache: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org/apache/spark: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org/apache/spark/api: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org/apache/spark/api/python: Is a directory
package org.apache.spark.api.python

import java.io.FileWriter

import org.apache.spark.sql.DataLineage.generateTempViewDataLineageString

object DataLineageApi {

  def save(viewName: String, optimize: Boolean = false, path: String): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(generateTempViewDataLineageString(viewName, optimize))
    } finally {
      writer.close()
    }
  }

  def get(viewName: String, optimize: Boolean = false): String = {
    generateTempViewDataLineageString(viewName, optimize)
  }

  def get(viewName: String): String = {
    generateTempViewDataLineageString(viewName, false)
  }
}
cat: ./clientlifecycle-common-datalineage_2.11/src/main/scala/org/apache/spark/sql: Is a directory
package org.apache.spark.sql

import java.util.concurrent.atomic.AtomicInteger

import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils

import scala.collection.mutable
import org.apache.spark.internal.Logging
import org.apache.spark.sql.catalyst.catalog.HiveTableRelation
import org.apache.spark.sql.catalyst.expressions._
import org.apache.spark.sql.catalyst.plans.LeftExistence
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.execution.datasources.{HadoopFsRelation, LogicalRelation}


trait AbstractDataLineage extends PredicateHelper with Logging {

  private val nextNodeId = new AtomicInteger(0)

  def generateSpecificDataFrameDataLineageString(df: DataFrame, viewName: String, optimize: Boolean = false)(implicit spark: SparkSession): String = {
    df.createOrReplaceTempView(viewName)
    generateTempViewDataLineageString(viewName, optimize)
  }

  def generateTempViewDataLineageString(viewName: String, optimize: Boolean = false): String = {
    val nodeMap = mutable.Map[String, String]()

    implicit val spark: SparkSession = SparkSession.getActiveSession.getOrElse(throw new RuntimeException(s"Active SparkSession not found"))

    val catalog = spark.sessionState.catalog
    val executor = if (optimize) spark.sessionState.optimizer else spark.sessionState.analyzer

    //get all temp views
    val tempViews = catalog.listTables("default").filter(catalog.isTemporaryTable).filter(_.table == viewName.toLowerCase).map { x =>
      val analyzed = executor.execute(catalog.getTempView(x.table).get)
      (x.table, analyzed)
    }

    //get all temp views node information
    tempViews.foreach { case (viewName, analyzed) =>
      nodeMap(viewName) = generateNodeString(analyzed, viewName, {
        if (isCached(analyzed)) "lightblue" else "lightyellow"
      })
    }

    val edges = tempViews.map { case (tempView, analyzed) =>
      val analyzer = {
        val plan = analyzed.transformUp {
          case p if isCached(p) => CachedNode(p) // Because of cache node is a leaf node, so we have to transform it, CachedNode is a custom node and it no longer leaf node
        }.transformDown {
          case s@SubqueryAlias(name, _) if tempViews.map(_._1).contains(name) => TempViewNode(name, s.output)
        } match {
          case f@Filter(condition, _) if condition.sql.contains("'__useless_") => f.child
          case x => x
        }

        executor.execute(plan)
      }

      val (inputNodeId, edges) = traversePlanRecursively(analyzer, nodeMap, isRoot = true) //temp view node is certainly root node in the logical tree
      val inputNodeToTempView = if (inputNodeId != tempView) {
        analyzer.output.indices.map { i =>
          s""""$inputNodeId":$i -> "$tempView":$i;"""
        }
      } else {
        Nil
      }
      edges ++ inputNodeToTempView
    }

    generateGraphString(nodeMap.values.toSeq, edges.flatten)
  }

  private def isCached(plan: LogicalPlan)(implicit spark: SparkSession): Boolean = {
    spark.sharedState.cacheManager.lookupCachedData(plan).isDefined
  }

  private def isCached(name: String)(implicit spark: SparkSession): Boolean = {
    spark.sessionState.catalog.getTempView(name).exists { p =>
      val analyzed = spark.sessionState.analyzer.execute(p)
      spark.sharedState.cacheManager.lookupCachedData(analyzed).isDefined
    }
  }

  protected def getNodeName(p: LogicalPlan): String = p match {
    case TempViewNode(name, _) => name
    case LogicalRelation(fs: HadoopFsRelation, _, _, false) => fs.location.rootPaths.head.getName
    case LogicalRelation(_, _, Some(table), false) => table.qualifiedName
    case HiveTableRelation(table, _, _) => table.qualifiedName
    case j: Join => s"${p.nodeName}_${j.joinType}_${nextNodeId.getAndIncrement()}"
    case sa: SubqueryAlias => s"Alias:${sa.alias}"
    case _@Filter(condition, _) if condition.sql.contains("'__useless_") =>
      val pattern = ".*__useless_(.*)'.*".r
      val pattern(aliasName) = condition.sql
      aliasName
    case _ => s"${p.nodeName}_${nextNodeId.getAndIncrement()}"
  }

  private def getNodeColor(plan: LogicalPlan)(implicit spark: SparkSession): String = plan match {
    case TempViewNode(name, _) if isCached(name) => "lightblue"
    case _: View | _: TempViewNode => "lightyellow"
    case _: LeafNode => "lightpink"
    case _@Filter(condition, _) if condition.sql.contains("'__useless_") => "lightpink"
    case _ => "lightgray"
  }

  private def normalizeForHtml(str: String): String = {
    str.replaceAll("&", "&amp;")
      .replaceAll("<", "&lt;")
      .replaceAll(">", "&gt;")
  }

  protected def tryCreateNode(
                               plan: LogicalPlan,
                               nodeMap: mutable.Map[String, String],
                               cached: Boolean = false)(implicit spark: SparkSession): String = {
    val nodeName = getNodeName(plan)
    if (plan.output.nonEmpty) {
      val nodeColor = if (cached) "lightblue" else ""
      if (!nodeMap.contains(nodeName)) nodeMap.put(nodeName, generateNodeString(plan, nodeName, nodeColor))
    }
    nodeName
  }

  // extract  node extra info
  protected def getExtraInfos(plan: LogicalPlan): Option[String] = {
    plan match {
      case j: Join => Option(j.condition.get.sql)
      case f@Filter(condition, _) if (!condition.sql.contains("'__useless_")) && (condition.sql.split("trim").length < 3) => Option(f.condition.sql)
      case s: Project if (!s.validConstraints.foldLeft("")((s, x) => s + x.sql).contains("'__useless_"))
        && (s.validConstraints.foldLeft("")((s, x) => s + x.sql).split("trim").length < 3) => Option(s.validConstraints.map(_.sql.replaceAll("<=>", "to")).mkString(" :: "))
      case _ => None
    }
  }

  protected def generateGraphString(nodes: Seq[String], edges: Seq[String])(implicit spark: SparkSession): String = {
    if (nodes.nonEmpty) {
      s"""
         |digraph {
         |  graph [pad="0.5", nodesep="0.5", ranksep="2", fontname="Helvetica"];
         |  node [shape=plain]
         |  rankdir=LR;
         |
         |  ${nodes.sorted.mkString("\n")}
         |  ${edges.sorted.mkString("\n")}
         |}
       """.stripMargin
    } else {
      ""
    }
  }

  protected def generateNodeString(plan: LogicalPlan, nodeName: String, nodeColor: String = "")(implicit spark: SparkSession): String = {
    val outputAttrs = plan.output.zipWithIndex.map { case (attr, i) =>
      s"""<tr><td port="$i">${normalizeForHtml(attr.name)}</td></tr>"""
    }

    val extraInfos = getExtraInfos(plan)

    s"""
       |"$nodeName" [label=<
       |<table border="1" cellborder="0" cellspacing="0">
       |  <tr><td bgcolor="${if (nodeColor.isEmpty) getNodeColor(plan) else nodeColor}" port="nodeName"><i>$nodeName</i></td></tr>
       | ${
      if (extraInfos.nonEmpty && extraInfos.get.length != 0 && !extraInfos.get.contains(" to ")) {
        if (extraInfos.get.contains("::")) {
          extraInfos.get.split(" :: ").grouped(2).map(_.mkString(" :: ")).map(x => s"""<tr><td bgcolor="lightblue"><i>${x}</i></td></tr>""").mkString("\n")
        } else
          s"""<tr><td bgcolor="lightblue"><i>${extraInfos.get}</i></td></tr>"""
      } else ""
    }
       |  ${outputAttrs.mkString("\n")}
       |</table>>];
     """.stripMargin
  }

  protected def getEdges(
                          plan: LogicalPlan,
                          currNodeName: String,
                          inputNodeNames: Seq[String],
                          nodeMap: mutable.Map[String, String])(implicit spark: SparkSession): Seq[String] = {
    val inputAttrSeq = plan.children.map(_.output).zip(inputNodeNames).map { case (attrs, nodeName) =>
      attrs.zipWithIndex.map { case (a, i) =>
        a -> s""""$nodeName":$i"""
      }
    }
    val inputAttrMap = AttributeMap(inputAttrSeq.flatten)
    val outputAttrWithIndex = plan.output.zipWithIndex

    val edges1 = plan match {
      case Aggregate(_, aggExprs, _) =>
        aggExprs.zip(outputAttrWithIndex).flatMap { case (ne, (_, i)) =>
          ne.references.filter(inputAttrMap.contains).map { attr =>
            s"""${inputAttrMap(attr)} -> "$currNodeName":$i;"""
          }
        }

      case Project(projList, _) =>
        val extraInfos = getExtraInfos(plan)
        projList.zip(outputAttrWithIndex).flatMap { case (ne, (_, i)) =>
          val labelMap = if (extraInfos.nonEmpty && extraInfos.get.length != 0)
            extraInfos.get.replaceAll("[()]", "")
              .split(" :: ")
              .filter(_.contains(" to "))
              .map(x => x.trim.split(" to "))
              .map(x => x(0) -> x(1))
              .toMap
              .map(x => x._1 -> s"[label=<<SUB>${x._1} to ${x._2}</SUB>>]")
          else Map[String, String]()
          ne.references.filter(inputAttrMap.contains).map { attr =>
            s"""${inputAttrMap(attr)} -> "$currNodeName":$i ${labelMap.getOrElse(attr.sql, "")};"""
          }
        }

      case g@Generate(generator, _, _, _, generatorOutput, _) =>
        val edgesForChildren = g.requiredChildOutput.zipWithIndex.flatMap { case (attr, i) =>
          inputAttrMap.get(attr).map { input => s"""$input -> "$currNodeName":$i;""" }
        }
        val edgeForGenerator = generator.references.flatMap(inputAttrMap.get).headOption
          .map { genInput =>
            generatorOutput.zipWithIndex.map { case (attr, i) =>
              s"""$genInput -> "$currNodeName":${g.requiredChildOutput.size + i}"""
            }
          }
        edgesForChildren ++ edgeForGenerator.seq.flatten

      case Expand(projections, _, _) =>
        projections.transpose.zipWithIndex.flatMap { case (projs, i) =>
          projs.flatMap(e => e.references.flatMap(inputAttrMap.get))
            .map { input => s"""$input -> "$currNodeName":$i;""" }
            .distinct
        }

      case _: Union =>
        inputAttrSeq.transpose.zipWithIndex.flatMap { case (attrs, i) =>
          attrs.map { case (_, input) => s"""$input -> "$currNodeName":$i""" }
        }

      case Join(_, _, joinType, condition) =>
        // To avoid ambiguous joins, we need this
        val Seq(left, right) = inputAttrSeq
        joinType match {
          case LeftExistence(_) =>
            val leftAttrSet = AttributeSet(left.map(_._1))
            val leftAttrIndexMap = AttributeMap(left.map(_._1).zipWithIndex)
            val predicateEdges = condition.map { c =>
              val referenceSeq = splitConjunctivePredicates(c).map(_.references)
              right.flatMap { case (attr, input) =>
                val leftAttrs = referenceSeq.flatMap { refs =>
                  if (refs.contains(attr)) {
                    refs.intersect(leftAttrSet).toSeq
                  } else {
                    Nil
                  }
                }
                leftAttrs.map { attr =>
                  s"""$input -> "$currNodeName":${leftAttrIndexMap(attr)};"""
                }
              }
            }
            val joinOutputEdges = left.map(_._2).zipWithIndex.map { case (input, i) =>
              s"""$input -> "$currNodeName":$i;"""
            }
            joinOutputEdges ++ predicateEdges.getOrElse(Nil)
          case _ =>
            (left ++ right).map(_._2).zipWithIndex.map { case (input, i) =>
              s"""$input -> "$currNodeName":$i;"""
            }
        }

      case _ =>
        outputAttrWithIndex.flatMap { case (attr, i) =>
          inputAttrMap.get(attr).map { input => s"""$input -> "$currNodeName":$i;""" }
        }
    }

    val edges2 = if (plan.expressions.exists(SubqueryExpression.hasSubquery)) collectEdgesInSubqueries(currNodeName, plan, nodeMap) else Nil

    edges1 ++ edges2
  }

  private def collectEdgesInSubqueries(
                                        nodeName: String,
                                        plan: LogicalPlan,
                                        nodeMap: mutable.Map[String, String])(implicit spark: SparkSession): Seq[String] = {
    val planOutputMap = AttributeMap(plan.output.zipWithIndex)

    def collectEdgesInExprs(ne: NamedExpression): Seq[String] = {
      val attr = ne.toAttribute
      val ss = ne.collectFirst { case ss: ScalarSubquery => ss }.get
      val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
      edges ++ ss.plan.output.indices.map { i =>
        if (planOutputMap.contains(attr)) {
          s""""$inputNodeId":$i -> "$nodeName":${planOutputMap(attr)}"""
        } else {
          s""""$inputNodeId":$i -> "$nodeName":nodeName"""
        }
      }
    }

    plan match {
      case Filter(SubqueryPredicate(subqueries), _) =>
        subqueries.flatMap { case (ss, attrs) =>
          val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
          edges ++ ss.plan.output.indices.flatMap { i =>
            val edgesInSubqueries = attrs.flatMap { attr =>
              if (planOutputMap.contains(attr)) {
                Some(s""""$inputNodeId":$i -> "$nodeName":${planOutputMap(attr)}""")
              } else {
                None
              }
            }

            if (edgesInSubqueries.nonEmpty) {
              edgesInSubqueries
            } else {
              s""""$inputNodeId":$i -> "$nodeName":nodeName""" :: Nil
            }
          }
        }

      case Project(projList, _) =>
        projList.filter(SubqueryExpression.hasSubquery).flatMap { ne =>
          collectEdgesInExprs(ne)
        }

      case Aggregate(_, aggregateExprs, _) =>
        aggregateExprs.filter(SubqueryExpression.hasSubquery).flatMap { ne =>
          collectEdgesInExprs(ne)
        }

      case _ =>
        val subqueries = plan.expressions.flatMap(_.collect { case ss: ScalarSubquery => ss })
        subqueries.flatMap { ss =>
          val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
          edges ++ ss.plan.output.indices.map { i =>
            s""""$inputNodeId":$i -> "$nodeName":nodeName"""
          }
        }
    }
  }

  def dot2Svg(dot: String, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph"): String = {
    val client = HttpClients.createDefault()
    val httpPost = new HttpPost(api)
    val entity = new StringEntity(dot, "UTF-8")
    httpPost.setEntity(entity)
    httpPost.setHeader("Content-type", "text/vnd.graphviz")
    httpPost.setHeader("Accept", "image/svg+xml")

    val httpResponse = try {
      client.execute(httpPost)
    } catch {
      case e: Exception => throw new RuntimeException(e.getMessage)
    }

    val svg = EntityUtils.toString(httpResponse.getEntity, "UTF-8")
    EntityUtils.consume(httpResponse.getEntity)

    client.close()
    svg
  }

  object SubqueryPredicate {
    def unapply(cond: Expression): Option[Seq[(ScalarSubquery, Seq[Attribute])]] = {
      val comps = cond.collect {
        case BinaryComparison(le, re) if SubqueryExpression.hasSubquery(re) =>
          val ss = re.collectFirst { case ss: ScalarSubquery => ss }.get
          (ss, le.references.toSeq)
      }
      if (comps.nonEmpty) {
        Some(comps)
      } else {
        None
      }
    }
  }

  /**
   *
   * @param plan
   * @param nodeMap
   * @param cached
   * @param isRoot
   * @param spark
   * @return (inputNodeName, edges)
   */
  protected def traversePlanRecursively(plan: LogicalPlan,
                                        nodeMap: mutable.Map[String, String],
                                        cached: Boolean = false,
                                        isRoot: Boolean = false)(implicit spark: SparkSession): (String, Seq[String])
}

case class CachedNode(cachedPlan: LogicalPlan) extends UnaryNode {
  override lazy val resolved: Boolean = true

  override def output: Seq[Attribute] = cachedPlan.output

  override def child: LogicalPlan = cachedPlan
}

case class TempViewNode(name: String, output: Seq[Attribute]) extends LeafNode {
  override lazy val resolved: Boolean = true
}


package org.apache.spark.sql

import java.io.FileWriter
import java.util.concurrent.atomic.AtomicInteger

import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils
import org.apache.spark.internal.Logging
import org.apache.spark.sql.catalyst.catalog.HiveTableRelation
import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeMap, AttributeSet, PredicateHelper}
import org.apache.spark.sql.catalyst.plans.LeftExistence
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.execution.datasources.{HadoopFsRelation, LogicalRelation}

import scala.collection.mutable

object DataLineage extends Logging with AbstractDataLineage {

  def tryGenerateDFImageFile(df: DataFrame, viewName: String, path: String, optimize: Boolean = false, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph")(implicit spark: SparkSession): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(dot2Svg(generateSpecificDataFrameDataLineageString(df, viewName, optimize), api))
    } finally {
      writer.close()
    }
  }

  def tryGenerateViewImageFile(viewName: String, path: String, optimize: Boolean = false, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph")(implicit spark: SparkSession): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(dot2Svg(generateTempViewDataLineageString(viewName, optimize), api))
    } finally {
      writer.close()
    }
  }

  /**
   *
   * @param plan
   * @param nodeMap
   * @param cached
   * @param isRoot
   * @param spark
   * @return (inputNodeName, edges)
   */
  override protected def traversePlanRecursively(plan: LogicalPlan, nodeMap: mutable.Map[String, String], cached: Boolean, isRoot: Boolean)(implicit spark: SparkSession): (String, Seq[String]) = plan match {
    case _: LeafNode =>
      val currNodeName = tryCreateNode(plan, nodeMap)
      (currNodeName, Nil)

    case CachedNode(cachedPlan) =>
      traversePlanRecursively(cachedPlan, nodeMap, cached = !isRoot)

    case _@Filter(condition, _) if condition.sql.contains("'__useless_") =>
      val currNodeName = tryCreateNode(plan, nodeMap)
      (currNodeName, Nil)

    case _ =>
      val edgesInChildren = plan.children.map(traversePlanRecursively(_, nodeMap))
      val currNodeName = tryCreateNode(plan, nodeMap, cached)
      if (plan.output.nonEmpty) {
        val inputNodeNames = edgesInChildren.map(_._1)
        val edges = getEdges(plan, currNodeName, inputNodeNames, nodeMap)

        (currNodeName, edges ++ edgesInChildren.flatMap(_._2))
      } else {
        (currNodeName, edgesInChildren.flatMap(_._2))
      }
  }
}cat: ./clientlifecycle-common-datalineage_2.11/src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./clientlifecycle-common-datalineage_2.11/src/site/resources: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./clientlifecycle-common-datalineage_2.11/src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>cat: ./clientlifecycle-common-datalineage_2.11/src/test: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala/com: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-datalineage_2.11/src/test/scala/com/hsbc/gbm/bd/clm: Is a directory
package com.hsbc.gbm.bd.clm

import java.io.File

import org.apache.spark.sql.{DataLineage, SparkSession}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

import com.hsbc.gbm.bd.clm.utils._

@RunWith(classOf[JUnitRunner])
class DataLineageTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll {

  private val fileName = "target/df.svg"

  override def beforeAll(): Unit = {
    val script = new File(fileName)
    if (script.exists()) {
      script.delete()
    }
  }

  implicit def spark: SparkSession = SparkSession
    .builder()
    .master("local[*]")
    .config("spark.sql.crossJoin.enabled", "true")
    .enableHiveSupport()
    .getOrCreate()

  private val aTable = spark.createDataFrame(Seq(
    ("1", "a"),
    ("1", "b"),
    ("1", "c"),
    ("2", "e")
  )).toDF("id", "product")
    .cut("aTable")
    .as("a_table")

  private val bTable = spark.createDataFrame(Seq(
    ("1", "I"),
    ("2", "II")
  )).toDF("id", "brand")
    .cut("bTable")
    .as("b_table")

  test("test getSkewValues function") {
    val df = aTable.join(bTable, Seq("id"), "left")

    DataLineage.tryGenerateDFImageFile(df, "output", fileName, false)

    val script = new File(fileName)
    script should exist
  }
}
cat: ./clientlifecycle-common-datalineage_2.12: Is a directory
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hsbc.gbm.bd.clm</groupId>
        <artifactId>clientlifecycle-common</artifactId>
        <version>2.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <artifactId>clientlifecycle-common-datalineage_2.12</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.hsbc.gbm.bd.clm</groupId>
            <artifactId>clientlifecycle-common-core_${scala.binary.version}</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>
cat: ./clientlifecycle-common-datalineage_2.12/src: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org/apache: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org/apache/spark: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org/apache/spark/api: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org/apache/spark/api/python: Is a directory
package org.apache.spark.api.python

import java.io.FileWriter

import org.apache.spark.sql.DataLineage.generateTempViewDataLineageString

object DataLineageApi {

  def save(viewName: String, optimize: Boolean = false, path: String): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(generateTempViewDataLineageString(viewName, optimize))
    } finally {
      writer.close()
    }
  }

  def get(viewName: String, optimize: Boolean = false): String = {
    generateTempViewDataLineageString(viewName, optimize)
  }

  def get(viewName: String): String = {
    generateTempViewDataLineageString(viewName, false)
  }
}
cat: ./clientlifecycle-common-datalineage_2.12/src/main/scala/org/apache/spark/sql: Is a directory
package org.apache.spark.sql

import java.util.concurrent.atomic.AtomicInteger

import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils

import scala.collection.mutable
import org.apache.spark.internal.Logging
import org.apache.spark.sql.catalyst.catalog.HiveTableRelation
import org.apache.spark.sql.catalyst.expressions._
import org.apache.spark.sql.catalyst.plans.LeftExistence
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.execution.datasources.{HadoopFsRelation, LogicalRelation}


trait AbstractDataLineage extends PredicateHelper with Logging {

  private val nextNodeId = new AtomicInteger(0)

  def generateSpecificDataFrameDataLineageString(df: DataFrame, viewName: String, optimize: Boolean = false)(implicit spark: SparkSession): String = {
    df.createOrReplaceTempView(viewName)
    generateTempViewDataLineageString(viewName, optimize)
  }

  def generateTempViewDataLineageString(viewName: String, optimize: Boolean = false): String = {
    val nodeMap = mutable.Map[String, String]()

    implicit val spark: SparkSession = SparkSession.getActiveSession.getOrElse(throw new RuntimeException(s"Active SparkSession not found"))

    val catalog = spark.sessionState.catalog
    val executor = if (optimize) spark.sessionState.optimizer else spark.sessionState.analyzer

    //get all temp views
    val tempViews = catalog.listTables("default").filter(catalog.isTemporaryTable).filter(_.table == viewName.toLowerCase).map { x =>
      val analyzed = executor.execute(catalog.getTempView(x.table).get)
      (x.table, analyzed)
    }

    //get all temp views node information
    tempViews.foreach { case (viewName, analyzed) =>
      nodeMap(viewName) = generateNodeString(analyzed, viewName, {
        if (isCached(analyzed)) "lightblue" else "lightyellow"
      })
    }

    val edges = tempViews.map { case (tempView, analyzed) =>
      val analyzer = {
        val plan = analyzed.transformUp {
          case p if isCached(p) => CachedNode(p) // Because of cache node is a leaf node, so we have to transform it, CachedNode is a custom node and it no longer leaf node
        }.transformDown {
          case s@SubqueryAlias(identifier, _) if tempViews.map(_._1).contains(identifier.name) => TempViewNode(identifier.name, s.output)
        } match {
          case f@Filter(condition, _) if condition.sql.contains("'__useless_") => f.child
          case x => x
        }

        executor.execute(plan)
      }

      val (inputNodeId, edges) = traversePlanRecursively(analyzer, nodeMap, isRoot = true) //temp view node is certainly root node in the logical tree
      val inputNodeToTempView = if (inputNodeId != tempView) {
        analyzer.output.indices.map { i =>
          s""""$inputNodeId":$i -> "$tempView":$i;"""
        }
      } else {
        Nil
      }
      edges ++ inputNodeToTempView
    }

    generateGraphString(nodeMap.values.toSeq, edges.flatten)
  }

  private def isCached(plan: LogicalPlan)(implicit spark: SparkSession): Boolean = {
    spark.sharedState.cacheManager.lookupCachedData(plan).isDefined
  }

  private def isCached(name: String)(implicit spark: SparkSession): Boolean = {
    spark.sessionState.catalog.getTempView(name).exists { p =>
      val analyzed = spark.sessionState.analyzer.execute(p)
      spark.sharedState.cacheManager.lookupCachedData(analyzed).isDefined
    }
  }

  protected def getNodeName(p: LogicalPlan): String = p match {
    case TempViewNode(name, _) => name
    case LogicalRelation(fs: HadoopFsRelation, _, _, false) => fs.location.rootPaths.head.getName
    case LogicalRelation(_, _, Some(table), false) => table.qualifiedName
    case HiveTableRelation(table, _, _, _, _) => table.qualifiedName
    case j: Join => s"${p.nodeName}_${j.joinType}_${nextNodeId.getAndIncrement()}"
    case sa: SubqueryAlias => s"Alias:${sa.alias}"
    case _@Filter(condition, _) if condition.sql.contains("'__useless_") =>
      val pattern = ".*__useless_(.*)'.*".r
      val pattern(aliasName) = condition.sql
      aliasName
    case _ => s"${p.nodeName}_${nextNodeId.getAndIncrement()}"
  }

  private def getNodeColor(plan: LogicalPlan)(implicit spark: SparkSession): String = plan match {
    case TempViewNode(name, _) if isCached(name) => "lightblue"
    case _: View | _: TempViewNode => "lightyellow"
    case _: LeafNode => "lightpink"
    case _@Filter(condition, _) if condition.sql.contains("'__useless_") => "lightpink"
    case _ => "lightgray"
  }

  private def normalizeForHtml(str: String): String = {
    str.replaceAll("&", "&amp;")
      .replaceAll("<", "&lt;")
      .replaceAll(">", "&gt;")
  }

  protected def tryCreateNode(
                               plan: LogicalPlan,
                               nodeMap: mutable.Map[String, String],
                               cached: Boolean = false)(implicit spark: SparkSession): String = {
    val nodeName = getNodeName(plan)
    if (plan.output.nonEmpty) {
      val nodeColor = if (cached) "lightblue" else ""
      if (!nodeMap.contains(nodeName)) nodeMap.put(nodeName, generateNodeString(plan, nodeName, nodeColor))
    }
    nodeName
  }

  // extract  node extra info
  protected def getExtraInfos(plan: LogicalPlan): Option[String] = {
    plan match {
      case j: Join => Option(j.condition.get.sql)
      case f@Filter(condition, _) if (!condition.sql.contains("'__useless_")) && (condition.sql.split("trim").length < 3) => Option(f.condition.sql)
      case s: Project if (!s.validConstraints.foldLeft("")((s, x) => s + x.sql).contains("'__useless_"))
        && (s.validConstraints.foldLeft("")((s, x) => s + x.sql).split("trim").length < 3) => Option(s.validConstraints.map(_.sql.replaceAll("<=>", "to")).mkString(" :: "))
      case _ => None
    }
  }

  protected def generateGraphString(nodes: Seq[String], edges: Seq[String])(implicit spark: SparkSession): String = {
    if (nodes.nonEmpty) {
      s"""
         |digraph {
         |  graph [pad="0.5", nodesep="0.5", ranksep="2", fontname="Helvetica"];
         |  node [shape=plain]
         |  rankdir=LR;
         |
         |  ${nodes.sorted.mkString("\n")}
         |  ${edges.sorted.mkString("\n")}
         |}
       """.stripMargin
    } else {
      ""
    }
  }

  protected def generateNodeString(plan: LogicalPlan, nodeName: String, nodeColor: String = "")(implicit spark: SparkSession): String = {
    val outputAttrs = plan.output.zipWithIndex.map { case (attr, i) =>
      s"""<tr><td port="$i">${normalizeForHtml(attr.name)}</td></tr>"""
    }

    val extraInfos = getExtraInfos(plan)

    s"""
       |"$nodeName" [label=<
       |<table border="1" cellborder="0" cellspacing="0">
       |  <tr><td bgcolor="${if (nodeColor.isEmpty) getNodeColor(plan) else nodeColor}" port="nodeName"><i>$nodeName</i></td></tr>
       | ${
      if (extraInfos.nonEmpty && extraInfos.get.length != 0 && !extraInfos.get.contains(" to ")) {
        if (extraInfos.get.contains("::")) {
          extraInfos.get.split(" :: ").grouped(2).map(_.mkString(" :: ")).map(x => s"""<tr><td bgcolor="lightblue"><i>${x}</i></td></tr>""").mkString("\n")
        } else
          s"""<tr><td bgcolor="lightblue"><i>${extraInfos.get}</i></td></tr>"""
      } else ""
    }
       |  ${outputAttrs.mkString("\n")}
       |</table>>];
     """.stripMargin
  }

  protected def getEdges(
                          plan: LogicalPlan,
                          currNodeName: String,
                          inputNodeNames: Seq[String],
                          nodeMap: mutable.Map[String, String])(implicit spark: SparkSession): Seq[String] = {
    val inputAttrSeq = plan.children.map(_.output).zip(inputNodeNames).map { case (attrs, nodeName) =>
      attrs.zipWithIndex.map { case (a, i) =>
        a -> s""""$nodeName":$i"""
      }
    }
    val inputAttrMap = AttributeMap(inputAttrSeq.flatten)
    val outputAttrWithIndex = plan.output.zipWithIndex

    val edges1 = plan match {
      case Aggregate(_, aggExprs, _) =>
        aggExprs.zip(outputAttrWithIndex).flatMap { case (ne, (_, i)) =>
          ne.references.filter(inputAttrMap.contains).map { attr =>
            s"""${inputAttrMap(attr)} -> "$currNodeName":$i;"""
          }
        }

      case Project(projList, _) =>
        val extraInfos = getExtraInfos(plan)
        projList.zip(outputAttrWithIndex).flatMap { case (ne, (_, i)) =>
          val labelMap = if (extraInfos.nonEmpty && extraInfos.get.length != 0)
            extraInfos.get.replaceAll("[()]", "")
              .split(" :: ")
              .filter(_.contains(" to "))
              .map(x => x.trim.split(" to "))
              .map(x => x(0) -> x(1))
              .toMap
              .map(x => x._1 -> s"[label=<<SUB>${x._1} to ${x._2}</SUB>>]")
          else Map[String, String]()
          ne.references.filter(inputAttrMap.contains).map { attr =>
            s"""${inputAttrMap(attr)} -> "$currNodeName":$i ${labelMap.getOrElse(attr.sql, "")};"""
          }
        }

      case g@Generate(generator, _, _, _, generatorOutput, _) =>
        val edgesForChildren = g.requiredChildOutput.zipWithIndex.flatMap { case (attr, i) =>
          inputAttrMap.get(attr).map { input => s"""$input -> "$currNodeName":$i;""" }
        }
        val edgeForGenerator = generator.references.flatMap(inputAttrMap.get).headOption
          .map { genInput =>
            generatorOutput.zipWithIndex.map { case (attr, i) =>
              s"""$genInput -> "$currNodeName":${g.requiredChildOutput.size + i}"""
            }
          }
        edgesForChildren ++ edgeForGenerator.seq.flatten

      case Expand(projections, _, _) =>
        projections.transpose.zipWithIndex.flatMap { case (projs, i) =>
          projs.flatMap(e => e.references.flatMap(inputAttrMap.get))
            .map { input => s"""$input -> "$currNodeName":$i;""" }
            .distinct
        }

      case _: Union =>
        inputAttrSeq.transpose.zipWithIndex.flatMap { case (attrs, i) =>
          attrs.map { case (_, input) => s"""$input -> "$currNodeName":$i""" }
        }

      case Join(_, _, joinType, condition, _) =>
        // To avoid ambiguous joins, we need this
        val Seq(left, right) = inputAttrSeq
        joinType match {
          case LeftExistence(_) =>
            val leftAttrSet = AttributeSet(left.map(_._1))
            val leftAttrIndexMap = AttributeMap(left.map(_._1).zipWithIndex)
            val predicateEdges = condition.map { c =>
              val referenceSeq = splitConjunctivePredicates(c).map(_.references)
              right.flatMap { case (attr, input) =>
                val leftAttrs = referenceSeq.flatMap { refs =>
                  if (refs.contains(attr)) {
                    refs.intersect(leftAttrSet).toSeq
                  } else {
                    Nil
                  }
                }
                leftAttrs.map { attr =>
                  s"""$input -> "$currNodeName":${leftAttrIndexMap(attr)};"""
                }
              }
            }
            val joinOutputEdges = left.map(_._2).zipWithIndex.map { case (input, i) =>
              s"""$input -> "$currNodeName":$i;"""
            }
            joinOutputEdges ++ predicateEdges.getOrElse(Nil)
          case _ =>
            (left ++ right).map(_._2).zipWithIndex.map { case (input, i) =>
              s"""$input -> "$currNodeName":$i;"""
            }
        }

      case _ =>
        outputAttrWithIndex.flatMap { case (attr, i) =>
          inputAttrMap.get(attr).map { input => s"""$input -> "$currNodeName":$i;""" }
        }
    }

    val edges2 = if (plan.expressions.exists(SubqueryExpression.hasSubquery)) collectEdgesInSubqueries(currNodeName, plan, nodeMap) else Nil

    edges1 ++ edges2
  }

  private def collectEdgesInSubqueries(
                                        nodeName: String,
                                        plan: LogicalPlan,
                                        nodeMap: mutable.Map[String, String])(implicit spark: SparkSession): Seq[String] = {
    val planOutputMap = AttributeMap(plan.output.zipWithIndex)

    def collectEdgesInExprs(ne: NamedExpression): Seq[String] = {
      val attr = ne.toAttribute
      val ss = ne.collectFirst { case ss: ScalarSubquery => ss }.get
      val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
      edges ++ ss.plan.output.indices.map { i =>
        if (planOutputMap.contains(attr)) {
          s""""$inputNodeId":$i -> "$nodeName":${planOutputMap(attr)}"""
        } else {
          s""""$inputNodeId":$i -> "$nodeName":nodeName"""
        }
      }
    }

    plan match {
      case Filter(SubqueryPredicate(subqueries), _) =>
        subqueries.flatMap { case (ss, attrs) =>
          val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
          edges ++ ss.plan.output.indices.flatMap { i =>
            val edgesInSubqueries = attrs.flatMap { attr =>
              if (planOutputMap.contains(attr)) {
                Some(s""""$inputNodeId":$i -> "$nodeName":${planOutputMap(attr)}""")
              } else {
                None
              }
            }

            if (edgesInSubqueries.nonEmpty) {
              edgesInSubqueries
            } else {
              s""""$inputNodeId":$i -> "$nodeName":nodeName""" :: Nil
            }
          }
        }

      case Project(projList, _) =>
        projList.filter(SubqueryExpression.hasSubquery).flatMap { ne =>
          collectEdgesInExprs(ne)
        }

      case Aggregate(_, aggregateExprs, _) =>
        aggregateExprs.filter(SubqueryExpression.hasSubquery).flatMap { ne =>
          collectEdgesInExprs(ne)
        }

      case _ =>
        val subqueries = plan.expressions.flatMap(_.collect { case ss: ScalarSubquery => ss })
        subqueries.flatMap { ss =>
          val (inputNodeId, edges) = traversePlanRecursively(ss.plan, nodeMap)
          edges ++ ss.plan.output.indices.map { i =>
            s""""$inputNodeId":$i -> "$nodeName":nodeName"""
          }
        }
    }
  }

  def dot2Svg(dot: String, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph"): String = {
    val client = HttpClients.createDefault()
    val httpPost = new HttpPost(api)
    val entity = new StringEntity(dot, "UTF-8")
    httpPost.setEntity(entity)
    httpPost.setHeader("Content-type", "text/vnd.graphviz")
    httpPost.setHeader("Accept", "image/svg+xml")

    val httpResponse = try {
      client.execute(httpPost)
    } catch {
      case e: Exception => throw new RuntimeException(e.getMessage)
    }

    val svg = EntityUtils.toString(httpResponse.getEntity, "UTF-8")
    EntityUtils.consume(httpResponse.getEntity)

    client.close()
    svg
  }

  object SubqueryPredicate {
    def unapply(cond: Expression): Option[Seq[(ScalarSubquery, Seq[Attribute])]] = {
      val comps = cond.collect {
        case BinaryComparison(le, re) if SubqueryExpression.hasSubquery(re) =>
          val ss = re.collectFirst { case ss: ScalarSubquery => ss }.get
          (ss, le.references.toSeq)
      }
      if (comps.nonEmpty) {
        Some(comps)
      } else {
        None
      }
    }
  }

  /**
   *
   * @param plan
   * @param nodeMap
   * @param cached
   * @param isRoot
   * @param spark
   * @return (inputNodeName, edges)
   */
  protected def traversePlanRecursively(plan: LogicalPlan,
                                        nodeMap: mutable.Map[String, String],
                                        cached: Boolean = false,
                                        isRoot: Boolean = false)(implicit spark: SparkSession): (String, Seq[String])
}

case class CachedNode(cachedPlan: LogicalPlan) extends UnaryNode {
  override lazy val resolved: Boolean = true

  override def output: Seq[Attribute] = cachedPlan.output

  override def child: LogicalPlan = cachedPlan
}

case class TempViewNode(name: String, output: Seq[Attribute]) extends LeafNode {
  override lazy val resolved: Boolean = true
}


package org.apache.spark.sql

import java.io.FileWriter
import java.util.concurrent.atomic.AtomicInteger

import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils
import org.apache.spark.internal.Logging
import org.apache.spark.sql.catalyst.catalog.HiveTableRelation
import org.apache.spark.sql.catalyst.expressions.{Attribute, AttributeMap, AttributeSet, PredicateHelper}
import org.apache.spark.sql.catalyst.plans.LeftExistence
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.execution.datasources.{HadoopFsRelation, LogicalRelation}

import scala.collection.mutable

object DataLineage extends Logging with AbstractDataLineage {

  def tryGenerateDFImageFile(df: DataFrame, viewName: String, path: String, optimize: Boolean = false, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph")(implicit spark: SparkSession): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(dot2Svg(generateSpecificDataFrameDataLineageString(df, viewName, optimize), api))
    } finally {
      writer.close()
    }
  }

  def tryGenerateViewImageFile(viewName: String, path: String, optimize: Boolean = false, api: String = "https://apprunner.hk.hsbc/graph/api/v1/graph")(implicit spark: SparkSession): Unit = {
    val writer = new FileWriter(path, false)
    try {
      writer.write(dot2Svg(generateTempViewDataLineageString(viewName, optimize), api))
    } finally {
      writer.close()
    }
  }

  /**
   *
   * @param plan
   * @param nodeMap
   * @param cached
   * @param isRoot
   * @param spark
   * @return (inputNodeName, edges)
   */
  override protected def traversePlanRecursively(plan: LogicalPlan, nodeMap: mutable.Map[String, String], cached: Boolean, isRoot: Boolean)(implicit spark: SparkSession): (String, Seq[String]) = plan match {
    case _: LeafNode =>
      val currNodeName = tryCreateNode(plan, nodeMap)
      (currNodeName, Nil)

    case CachedNode(cachedPlan) =>
      traversePlanRecursively(cachedPlan, nodeMap, cached = !isRoot)

    case _@Filter(condition, _) if condition.sql.contains("'__useless_") =>
      val currNodeName = tryCreateNode(plan, nodeMap)
      (currNodeName, Nil)

    case _ =>
      val edgesInChildren = plan.children.map(traversePlanRecursively(_, nodeMap))
      val currNodeName = tryCreateNode(plan, nodeMap, cached)
      if (plan.output.nonEmpty) {
        val inputNodeNames = edgesInChildren.map(_._1)
        val edges = getEdges(plan, currNodeName, inputNodeNames, nodeMap)

        (currNodeName, edges ++ edgesInChildren.flatMap(_._2))
      } else {
        (currNodeName, edgesInChildren.flatMap(_._2))
      }
  }
}cat: ./clientlifecycle-common-datalineage_2.12/src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./clientlifecycle-common-datalineage_2.12/src/site/resources: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./clientlifecycle-common-datalineage_2.12/src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>cat: ./clientlifecycle-common-datalineage_2.12/src/test: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala/com: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-datalineage_2.12/src/test/scala/com/hsbc/gbm/bd/clm: Is a directory
package com.hsbc.gbm.bd.clm

import java.io.File

import org.apache.spark.sql.{DataLineage, SparkSession}
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite, Matchers}

import com.hsbc.gbm.bd.clm.utils._

@RunWith(classOf[JUnitRunner])
class DataLineageTest extends FunSuite
  with Matchers
  with BeforeAndAfterAll {

  private val fileName = "target/df.svg"

  override def beforeAll(): Unit = {
    val script = new File(fileName)
    if (script.exists()) {
      script.delete()
    }
  }

  implicit def spark: SparkSession = SparkSession
    .builder()
    .master("local[*]")
    .config("spark.sql.crossJoin.enabled", "true")
    .enableHiveSupport()
    .getOrCreate()

  private val aTable = spark.createDataFrame(Seq(
    ("1", "a"),
    ("1", "b"),
    ("1", "c"),
    ("2", "e")
  )).toDF("id", "product")
    .cut("aTable")
    .as("a_table")

  private val bTable = spark.createDataFrame(Seq(
    ("1", "I"),
    ("2", "II")
  )).toDF("id", "brand")
    .cut("bTable")
    .as("b_table")

  test("test getSkewValues function") {
    val df = aTable.join(bTable, Seq("id"), "left")

    DataLineage.tryGenerateDFImageFile(df, "output", fileName, false)

    val script = new File(fileName)
    script should exist
  }
}
cat: ./clientlifecycle-common-hint_2.11: Is a directory
<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hsbc.gbm.bd.clm</groupId>
        <artifactId>clientlifecycle-common</artifactId>
        <version>2.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>clientlifecycle-common-hint_${scala.binary.version}</artifactId>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>org.scalaj</groupId>
            <artifactId>scalaj-http_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>
cat: ./clientlifecycle-common-hint_2.11/src: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org/apache: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org/apache/spark: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org/apache/spark/sql: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org/apache/spark/sql/catalyst: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/main/scala/org/apache/spark/sql/catalyst/analysis: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.catalyst.analysis

import java.util.Locale

import org.apache.commons.lang3.StringUtils
import org.apache.spark.sql.AnalysisException
import org.apache.spark.sql.catalyst.expressions.{In, Literal, Not}
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.catalyst.rules.Rule
import org.apache.spark.sql.catalyst.trees.CurrentOrigin
import org.apache.spark.sql.internal.SQLConf


/**
 * Collection of rules related to hints. The only hint currently available is broadcast join hint.
 *
 * Note that this is separately into two rules because in the future we might introduce new hint
 * rules that have different ordering requirements from broadcast.
 */
object ResolveHints {

  /**
   * For broadcast hint, we accept "BROADCAST", "BROADCASTJOIN", and "MAPJOIN", and a sequence of
   * relation aliases can be specified in the hint. A broadcast hint plan node will be inserted
   * on top of any relation (that is not aliased differently), subquery, or common table expression
   * that match the specified name.
   *
   * The hint resolution works by recursively traversing down the query plan to find a relation or
   * subquery that matches one of the specified broadcast aliases. The traversal does not go past
   * beyond any existing broadcast hints, subquery aliases.
   *
   * This rule must happen before common table expressions.
   */
  class ResolveBroadcastHints(conf: SQLConf) extends Rule[LogicalPlan] {
    private val BROADCAST_HINT_NAMES = Set("BROADCAST", "BROADCASTJOIN", "MAPJOIN")

    //SKEW_JOIN(filter_key(t1.id, t2.id), skew_values(0,1))
    private val SKEW_JOIN = "SKEW_JOIN"

    def resolver: Resolver = conf.resolver

    private def applyBroadcastHint(plan: LogicalPlan, toBroadcast: Set[String]): LogicalPlan = {
      // Whether to continue recursing down the tree
      var recurse = true

      val newNode = CurrentOrigin.withOrigin(plan.origin) {
        plan match {
          case u: UnresolvedRelation if toBroadcast.exists(resolver(_, u.tableIdentifier.table)) =>
            ResolvedHint(plan, HintInfo(broadcast = true))
          case r: SubqueryAlias if toBroadcast.exists(resolver(_, r.alias)) =>
            ResolvedHint(plan, HintInfo(broadcast = true))

          case _: ResolvedHint | _: View | _: With | _: SubqueryAlias =>
            // Don't traverse down these nodes.
            // For an existing broadcast hint, there is no point going down (if we do, we either
            // won't change the structure, or will introduce another broadcast hint that is useless.
            // The rest (view, with, subquery) indicates different scopes that we shouldn't traverse
            // down. Note that technically when this rule is executed, we haven't completed view
            // resolution yet and as a result the view part should be deadcode. I'm leaving it here
            // to be more future proof in case we change the view we do view resolution.
            recurse = false
            plan

          case _ =>
            plan
        }
      }

      if ((plan fastEquals newNode) && recurse) {
        newNode.mapChildren(child => applyBroadcastHint(child, toBroadcast))
      } else {
        newNode
      }
    }

    private def applySkewJointHint(plan: LogicalPlan, skewJoin: SkewJoin): LogicalPlan = {
      var recurse = true

      val newNode = CurrentOrigin.withOrigin(plan.origin) {
        plan match {
          case Join(left, right, joinType, condition) if condition.isDefined => {
            if (skewJoin.skewValues.isEmpty) return plan

            def getTableAliasName(lp: LogicalPlan): String = {
              val alias = lp.map(lp => lp).filter(_.isInstanceOf[SubqueryAlias]).map(_.asInstanceOf[SubqueryAlias].alias).toList.head
              if (!skewJoin.filterKey.keyMap.contains(alias)) throw new RuntimeException(s"Appear invalidated table alias")
              alias
            }

            val leftField = skewJoin.filterKey.keyMap(getTableAliasName(left))
            val rightField = skewJoin.filterKey.keyMap(getTableAliasName(right))
            val skewValues = skewJoin.skewValues.map(Literal(_))

            val left1 = Filter(Not(In(UnresolvedAttribute(leftField), skewValues)), left)
            val right1 = Filter(Not(In(UnresolvedAttribute(rightField), skewValues)), right)
            val left2 = Filter(In(UnresolvedAttribute(leftField), skewValues), left)
            val right2 = Filter(In(UnresolvedAttribute(rightField), skewValues), right)

            val join1 = Join(left1, right1, joinType, condition)
            val join2 = Join(ResolvedHint(left2, HintInfo(broadcast = true)), ResolvedHint(right2, HintInfo(broadcast = true)), joinType, condition)

            Union(join1, join2)
          }
          case _: ResolvedHint | _: View | _: With | _: SubqueryAlias =>
            recurse = false
            plan
          case _ =>
            plan
        }
      }

      if ((plan fastEquals newNode) && recurse) {
        newNode.mapChildren(child => applySkewJointHint(child, skewJoin))
      } else {
        newNode
      }
    }

    def apply(plan: LogicalPlan): LogicalPlan = plan transformUp {
      case h: UnresolvedHint if BROADCAST_HINT_NAMES.contains(h.name.toUpperCase(Locale.ROOT)) =>
        if (h.parameters.isEmpty) {
          // If there is no table alias specified, turn the entire subtree into a BroadcastHint.
          ResolvedHint(h.child, HintInfo(broadcast = true))
        } else {
          // Otherwise, find within the subtree query plans that should be broadcasted.
          applyBroadcastHint(h.child, h.parameters.map {
            case tableName: String => tableName
            case tableId: UnresolvedAttribute => tableId.name
            case unsupported => throw new AnalysisException("Broadcast hint parameter should be " +
              s"an identifier or string but was $unsupported (${unsupported.getClass}")
          }.toSet)
        }

      case h: UnresolvedHint if SKEW_JOIN == h.name.toUpperCase(Locale.ROOT) => {
        if (h.parameters.isEmpty) {
          throw new RuntimeException("Feel free to fill parameter, filter_key(t1.id, t2.id) and skew_values(a,b) as well")
        } else {
          val paramMap = h.parameters.map {
            case UnresolvedFunction(funId, children, _) =>
              (
                funId.funcName.toLowerCase(),
                children.map {
                  case ua: UnresolvedAttribute => ua.name
                  case other => other.toString()
                }
              )
            case str: String => {
              val pattern = "(.*)[(](.*)[)]".r
              if (pattern.findAllIn(str).isEmpty) throw new RuntimeException(s"Skew join hint parameter should be filter_key(t1.id, t2.id) and skew_values(a,b) but was $str")
              val pattern(funId, param) = str
              (funId.toLowerCase, param.split(",").toList.map(_.trim).filter(StringUtils.isNotBlank(_)))
            }
            case unsupported => throw new RuntimeException(s"Skew join hint parameter should be filter_key(t1.id, t2.id) and skew_values(a,b) but was $unsupported (${unsupported.getClass}")
          }.toMap

          val filterKey = paramMap("filter_key")
          val skewValues = paramMap("skew_values")

          if (filterKey.length != 2) throw new RuntimeException("filter_key paramter lenght not equal 2")

          val skewJoin = SkewJoin(FilterKey(filterKey.head.trim, filterKey(1).trim), skewValues)
          applySkewJointHint(h.child, skewJoin)
        }
      }
    }
  }

  /**
   * Removes all the hints, used to remove invalid hints provided by the user.
   * This must be executed after all the other hint rules are executed.
   */
  object RemoveAllHints extends Rule[LogicalPlan] {
    def apply(plan: LogicalPlan): LogicalPlan = plan transformUp {
      case h: UnresolvedHint => h.child
    }
  }

  case class FilterKey(leftPart: String, rightPart: String) {
    private val pattern = "(.*)[.].*".r
    private val pattern(tableName1) = leftPart
    private val pattern(tableName2) = rightPart

    val keyMap = Map(tableName1 -> leftPart, tableName2 -> rightPart)
  }

  case class SkewJoin(filterKey: FilterKey, skewValues: Seq[String])

}
cat: ./clientlifecycle-common-hint_2.11/src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./clientlifecycle-common-hint_2.11/src/site/resources: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./clientlifecycle-common-hint_2.11/src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>cat: ./clientlifecycle-common-hint_2.11/src/test: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala/com: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-hint_2.11/src/test/scala/com/hsbc/gbm/bd/clm: Is a directory
package com.hsbc.gbm.bd.clm;

import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Unit test for simple App.
 */
public class AppTest 
{
    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue()
    {
        assertTrue( true );
    }
}
cat: ./clientlifecycle-common-measure: Is a directory
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "{}"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright {yyyy} {name of copyright owner}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.CLM
Copyright 2017-2018 HSBC

This product includes software developed at
The Apache Software Foundation (http://www.apache.org/).<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.hsbc.gbm.bd.clm</groupId>
        <artifactId>clientlifecycle-common</artifactId>
        <version>2.0.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <artifactId>clientlifecycle-common-measure_${scala.binary.version}</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>org.scalaj</groupId>
            <artifactId>scalaj-http_${scala.binary.version}</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-hive_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-sql_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>
cat: ./clientlifecycle-common-measure/src: Is a directory
cat: ./clientlifecycle-common-measure/src/main: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/configuration: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/configuration/dqdefinition: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition

import com.fasterxml.jackson.annotation.{JsonInclude, JsonProperty}
import com.fasterxml.jackson.annotation.JsonInclude.Include
import org.apache.commons.lang.StringUtils
import com.hsbc.gbm.bd.clm.measure.configuration.enums._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DqType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DslType.{DslType, GriffinDsl}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.{DefaultFlattenType, FlattenType}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType.{OutputType, UnknownOutputType}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.SinkType.SinkType


/**
 * dq param
 *
 * @param name         name of dq measurement (must)
 * @param timestamp    default timestamp of measure in batch mode (optional)
 * @param procType     batch mode or streaming mode (must)
 * @param dataSources  data sources (must)
 * @param evaluateRule dq measurement (must)
 * @param sinks        sink types (optional, by default will be elasticsearch)
 */
case class DQConfig(
                     private val name: String,
                     private val timestamp: Long,
                     private val procType: String,
                     private val dataSources: Seq[DataSourceParam],
                     private val evaluateRule: EvaluateRuleParam,
                     private val sinks: Seq[String] = Nil)
  extends Param {
  def getName: String = name

  def getTimestampOpt: Option[Long] = if (timestamp != 0) Some(timestamp) else None

  def getProcType: String = procType

  def getDataSources: Seq[DataSourceParam] = {
    dataSources
      .foldLeft((Nil: Seq[DataSourceParam], Set[String]())) { (ret, ds) =>
        val (seq, names) = ret
        if (!names.contains(ds.getName)) {
          (seq :+ ds, names + ds.getName)
        } else ret
      }
      ._1
  }

  def getEvaluateRule: EvaluateRuleParam = evaluateRule

  def getSinkNames: Seq[String] = sinks

  def getValidSinkTypes: Seq[SinkType] = SinkType.validSinkTypes(sinks)

  def validate(): Unit = {
    assert(StringUtils.isNotBlank(name), "dq config name should not be blank")
    assert(StringUtils.isNotBlank(procType), "process.type should not be blank")
    assert(dataSources != null, "data.sources should not be null")
    assert(evaluateRule != null, "evaluate.rule should not be null")
    getDataSources.foreach(_.validate())
    evaluateRule.validate()
  }
}

/**
 * data source param
 *
 * @param name       data source name (must)
 * @param baseline   data source is baseline or not, false by default (optional)
 * @param connector  data connector (optional)
 * @param checkpoint data source checkpoint configuration (must in streaming mode with streaming connectors)
 */
case class DataSourceParam(
                            private val name: String,
                            private val connector: DataConnectorParam,
                            private val baseline: Boolean = false,
                            private val checkpoint: Map[String, Any] = null)
  extends Param {
  def getName: String = name

  def isBaseline: Boolean = if (Option(baseline).isDefined) baseline else false

  def getConnector: Option[DataConnectorParam] = Option(connector)

  def getCheckpointOpt: Option[Map[String, Any]] = Option(checkpoint)

  def validate(): Unit = {
    assert(StringUtils.isNotBlank(name), "data source name should not be empty")
    assert(getConnector.isDefined, "Connector is undefined or invalid")
    getConnector.foreach(_.validate())
  }
}

/**
 * data connector param
 *
 * @param conType       data connector type, e.g.: hive, avro, kafka (must)
 * @param dataFrameName data connector dataframe name, for pre-process input usage (optional)
 * @param config        detail configuration of data connector (must)
 * @param preProc       pre-process rules after load data (optional)
 */
case class DataConnectorParam(
                               private val conType: String,
                               private val dataFrameName: String,
                               private val config: Map[String, Any],
                               private val preProc: List[RuleParam])
  extends Param {
  def getType: String = conType

  def getDataFrameName(defName: String): String =
    if (dataFrameName != null) dataFrameName else defName

  def getConfig: Map[String, Any] = if (config != null) config else Map[String, Any]()

  def getPreProcRules: Seq[RuleParam] = if (preProc != null) preProc else Nil

  def validate(): Unit = {
    assert(StringUtils.isNotBlank(conType), "data connector type should not be empty")
    getPreProcRules.foreach(_.validate())
  }
}

/**
 * evaluate rule param
 *
 * @param rules rules to define dq measurement (optional)
 */
@JsonInclude(Include.NON_NULL)
case class EvaluateRuleParam(@JsonProperty("rules") private val rules: Seq[RuleParam])
  extends Param {
  def getRules: Seq[RuleParam] = if (rules != null) rules else Nil

  def validate(): Unit = {
    getRules.foreach(_.validate())
  }
}

/**
 * rule param
 *
 * @param dslType    dsl type of this rule (must)
 * @param dqType     dq type of this rule (must if dsl type is "griffin-dsl")
 * @param inDfName   name of input dataframe of this rule, by default will be the previous rule output dataframe name
 * @param outDfName  name of output dataframe of this rule, by default will be generated
 *                   as data connector dataframe name with index suffix
 * @param rule       rule to define dq step calculation (must)
 * @param details    detail config of rule (optional)
 * @param cache      cache the result for multiple usage (optional, valid for "spark-sql" and "df-ops" mode)
 * @param outputs    output ways configuration (optional)
 * @param errorConfs error configuration (valid for 'COMPLETENESS' mode)
 */
@JsonInclude(Include.NON_NULL)
case class RuleParam(
                      @JsonProperty("dsl.type") private val dslType: String,
                      @JsonProperty("dq.type") private val dqType: String,
                      @JsonProperty("in.dataframe.name") private val inDfName: String = null,
                      @JsonProperty("out.dataframe.name") private val outDfName: String = null,
                      @JsonProperty("rule") private val rule: String = null,
                      @JsonProperty("details") private val details: Map[String, Any] = null,
                      @JsonProperty("cache") private val cache: Boolean = false,
                      @JsonProperty("out") private val outputs: List[RuleOutputParam] = null,
                      @JsonProperty("error.confs") private val errorConfs: List[RuleErrorConfParam] = null)
  extends Param {
  def getDslType: DslType =
    if (dslType != null) DslType.withNameWithDefault(dslType) else GriffinDsl

  def getDqType: DqType = if (dqType != null) DqType.withNameWithDefault(dqType) else Unknown

  def getCache: Boolean = if (cache) cache else false

  def getInDfName(defName: String = ""): String = if (inDfName != null) inDfName else defName

  def getOutDfName(defName: String = ""): String = if (outDfName != null) outDfName else defName

  def getRule: String = if (rule != null) rule else ""

  def getDetails: Map[String, Any] = if (details != null) details else Map[String, Any]()

  def getOutputs: Seq[RuleOutputParam] = if (outputs != null) outputs else Nil

  def getOutputOpt(tp: OutputType): Option[RuleOutputParam] =
    getOutputs.find(_.getOutputType == tp)

  def getErrorConfs: Seq[RuleErrorConfParam] = if (errorConfs != null) errorConfs else Nil

  def replaceInDfName(newName: String): RuleParam = {
    if (StringUtils.equals(newName, inDfName)) this
    else RuleParam(dslType, dqType, newName, outDfName, rule, details, cache, outputs)
  }

  def replaceOutDfName(newName: String): RuleParam = {
    if (StringUtils.equals(newName, outDfName)) this
    else RuleParam(dslType, dqType, inDfName, newName, rule, details, cache, outputs)
  }

  def replaceInOutDfName(in: String, out: String): RuleParam = {
    if (StringUtils.equals(inDfName, in) && StringUtils.equals(outDfName, out)) this
    else RuleParam(dslType, dqType, in, out, rule, details, cache, outputs)
  }

  def replaceRule(newRule: String): RuleParam = {
    if (StringUtils.equals(newRule, rule)) this
    else RuleParam(dslType, dqType, inDfName, outDfName, newRule, details, cache, outputs)
  }

  def validate(): Unit = {
    assert(
      !(getDslType.equals(GriffinDsl) && getDqType.equals(Unknown)),
      "unknown dq type for griffin dsl")

    getOutputs.foreach(_.validate())
    getErrorConfs.foreach(_.validate())
  }
}

/**
 * out param of rule
 *
 * @param outputType output type (must)
 * @param name       output name (optional)
 * @param flatten    flatten type of output metric (optional, available in output metric type)
 */
@JsonInclude(Include.NON_NULL)
case class RuleOutputParam(
                            @JsonProperty("type") private val outputType: String,
                            @JsonProperty("name") private val name: String,
                            @JsonProperty("flatten") private val flatten: String)
  extends Param {
  def getOutputType: OutputType = {
    if (outputType != null) OutputType.withNameWithDefault(outputType)
    else UnknownOutputType
  }

  def getNameOpt: Option[String] = Some(name).filter(StringUtils.isNotBlank)

  def getFlatten: FlattenType = {
    if (StringUtils.isNotBlank(flatten)) FlattenType.withNameWithDefault(flatten)
    else DefaultFlattenType
  }

  def validate(): Unit = {}
}

/**
 * error configuration parameter
 *
 * @param columnName the name of the column
 * @param errorType  the way to match error, regex or enumeration
 * @param values     error value list
 */
@JsonInclude(Include.NON_NULL)
case class RuleErrorConfParam(
                               @JsonProperty("column.name") private val columnName: String,
                               @JsonProperty("type") private val errorType: String,
                               @JsonProperty("values") private val values: List[String])
  extends Param {
  def getColumnName: Option[String] = Some(columnName).filter(StringUtils.isNotBlank)

  def getErrorType: Option[String] = Some(errorType).filter(StringUtils.isNotBlank)

  def getValues: Seq[String] = if (values != null) values else Nil

  def validate(): Unit = {
    assert(
      "regex".equalsIgnoreCase(getErrorType.get) ||
        "enumeration".equalsIgnoreCase(getErrorType.get),
      "error error.conf type")
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition

import com.fasterxml.jackson.annotation.{JsonInclude, JsonProperty}
import com.fasterxml.jackson.annotation.JsonInclude.Include
import org.apache.commons.lang.StringUtils

import com.hsbc.gbm.bd.clm.measure.configuration.enums.SinkType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.SinkType.SinkType

/**
 * Model for Environment Config.
 *
 * @param sparkParam       Job specific Spark Configs to override the Defaults set on the cluster
 * @param sinkParams       A [[Seq]] of sink definitions where records and metrics can be persisted
 * @param checkpointParams Config of checkpoint locations (required in streaming mode)
 */
@JsonInclude(Include.NON_NULL)
case class EnvConfig(
                      @JsonProperty("spark") private val sparkParam: SparkParam,
                      @JsonProperty("sinks") private val sinkParams: List[SinkParam],
                      @JsonProperty("griffin.checkpoint") private val checkpointParams: List[CheckpointParam])
  extends Param {
  def getSparkParam: SparkParam = sparkParam

  def getSinkParams: Seq[SinkParam] = if (sinkParams != null) sinkParams else Nil

  def getCheckpointParams: Seq[CheckpointParam] =
    if (checkpointParams != null) checkpointParams else Nil

  def validate(): Unit = {
    assert(sparkParam != null, "spark param should not be null")
    sparkParam.validate()
    getSinkParams.foreach(_.validate())
    val repeatedSinks = sinkParams
      .map(_.getName)
      .groupBy(x => x)
      .mapValues(_.size)
      .filter(_._2 > 1)
      .keys
    assert(
      repeatedSinks.isEmpty,
      s"sink names must be unique. duplicate sink names ['${repeatedSinks.mkString("', '")}'] were found.")
    getCheckpointParams.foreach(_.validate())
  }
}

/**
 * spark param
 *
 * @param logLevel        log level of spark application (optional)
 * @param cpDir           checkpoint directory for spark streaming (required in streaming mode)
 * @param batchInterval   batch interval for spark streaming (required in streaming mode)
 * @param processInterval process interval for streaming dq calculation (required in streaming mode)
 * @param config          extra config for spark environment (optional)
 * @param initClear       clear checkpoint directory or not when initial (optional)
 */
@JsonInclude(Include.NON_NULL)
case class SparkParam(
                       @JsonProperty("log.level") private val logLevel: String,
                       @JsonProperty("checkpoint.dir") private val cpDir: String,
                       @JsonProperty("batch.interval") private val batchInterval: String,
                       @JsonProperty("process.interval") private val processInterval: String,
                       @JsonProperty("config") private val config: Map[String, String],
                       @JsonProperty("init.clear") private val initClear: Boolean)
  extends Param {
  def getLogLevel: String = if (logLevel != null) logLevel else "WARN"

  def getCpDir: String = if (cpDir != null) cpDir else ""

  def getBatchInterval: String = if (batchInterval != null) batchInterval else ""

  def getProcessInterval: String = if (processInterval != null) processInterval else ""

  def getConfig: Map[String, String] = if (config != null) config else Map[String, String]()

  def needInitClear: Boolean = if (initClear) initClear else false

  def validate(): Unit = {
    //    assert(StringUtils.isNotBlank(cpDir), "checkpoint.dir should not be empty")
    //    assert(TimeUtil.milliseconds(getBatchInterval).nonEmpty, "batch.interval should be valid time string")
    //    assert(TimeUtil.milliseconds(getProcessInterval).nonEmpty, "process.interval should be valid time string")
  }
}

/**
 * sink param
 *
 * @param sinkType sink type, e.g.: log, hdfs, http, mongo (must)
 * @param config   config of sink way (must)
 */
case class SinkParam(
                      private val name: String,
                      private val sinkType: String,
                      private val config: Map[String, Any] = Map.empty)
  extends Param {
  def getName: String = name

  def getType: SinkType = SinkType.withNameWithDefault(sinkType)

  def getConfig: Map[String, Any] = config

  def validate(): Unit = {
    assert(name != null, "sink name should must be defined")
    assert(StringUtils.isNotBlank(sinkType), "sink type should not be empty")
  }
}

/**
 * checkpoint param
 *
 * @param cpType checkpoint location type, e.g.: zookeeper (must)
 * @param config config of checkpoint location
 */
@JsonInclude(Include.NON_NULL)
case class CheckpointParam(
                            @JsonProperty("type") private val cpType: String,
                            @JsonProperty("config") private val config: Map[String, Any])
  extends Param {
  def getType: String = cpType

  def getConfig: Map[String, Any] = if (config != null) config else Map[String, Any]()

  def validate(): Unit = {
    assert(StringUtils.isNotBlank(cpType), "griffin checkpoint type should not be empty")
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition

import com.fasterxml.jackson.annotation.{JsonInclude, JsonProperty}
import com.fasterxml.jackson.annotation.JsonInclude.Include

/**
 * full set of griffin configuration
 * @param envConfig   environment configuration (must)
 * @param dqConfig    dq measurement configuration (must)
 */
@JsonInclude(Include.NON_NULL)
case class GriffinConfig(
    @JsonProperty("env") private val envConfig: EnvConfig,
    @JsonProperty("dq") private val dqConfig: DQConfig)
    extends Param {
  def getEnvConfig: EnvConfig = envConfig
  def getDqConfig: DQConfig = dqConfig

  def validate(): Unit = {
    assert(envConfig != null, "environment config should not be null")
    assert(dqConfig != null, "dq config should not be null")
    envConfig.validate()
    dqConfig.validate()
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition

trait Param extends Serializable {

  /**
   * validate param internally
   */
  def validate(): Unit

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/configuration/dqdefinition/reader: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.reader

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.Param
import com.hsbc.gbm.bd.clm.measure.utils.{HdfsUtil, JsonUtil}

import scala.reflect.ClassTag
import scala.util.Try

/**
 * read params from config file path
 *
 * @param filePath:  hdfs path ("hdfs://cluster-name/path")
 *                   local file path ("file:///path")
 *                   relative file path ("relative/path")
 */
case class ParamFileReader(filePath: String) extends ParamReader {

  def readConfig[T <: Param](implicit m: ClassTag[T]): Try[T] = {
    Try {
      val source = HdfsUtil.openFile(filePath)
      val param = JsonUtil.fromJson[T](source)
      source.close()
      validate(param)
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.reader

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.Param
import com.hsbc.gbm.bd.clm.measure.utils.JsonUtil

import scala.reflect.ClassTag
import scala.util.Try


/**
 * read params from json string directly
 *
 * @param jsonString
 */
case class ParamJsonReader(jsonString: String) extends ParamReader {

  def readConfig[T <: Param](implicit m: ClassTag[T]): Try[T] = {
    Try {
      val param = JsonUtil.fromJson[T](jsonString)
      validate(param)
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.reader

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.Param

import scala.reflect.ClassTag
import scala.util.Try


trait ParamReader extends Loggable with Serializable {

  /**
   * read config param
   *
   * @tparam T     param type expected
   * @return       parsed param
   */
  def readConfig[T <: Param](implicit m: ClassTag[T]): Try[T]

  /**
   * validate config param
   *
   * @param param  param to be validated
   * @return       param itself
   */
  protected def validate[T <: Param](param: T): T = {
    param.validate()
    param
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.reader

import com.hsbc.gbm.bd.clm.measure.utils.JsonUtil


object ParamReaderFactory {

  val json = "json"
  val file = "file"

  /**
   * parse string content to get param reader
   * @param pathOrJson
   * @return
   */
  def getParamReader(pathOrJson: String): ParamReader = {
    val strType = paramStrType(pathOrJson)
    if (json.equals(strType)) ParamJsonReader(pathOrJson)
    else ParamFileReader(pathOrJson)
  }

  private def paramStrType(str: String): String = {
    try {
      JsonUtil.toAnyMap(str)
      json
    } catch {
      case _: Throwable => file
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/configuration/enums: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

import com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * effective when dsl type is "griffin-dsl",
 * indicates the dq type of griffin pre-defined measurements
 * <li> - The match percentage of items between source and target
 *                         count(source items matched with the ones from target) / count(source)
 *                         e.g.: source [1, 2, 3, 4, 5], target: [1, 2, 3, 4]
 *                         metric will be: { "total": 5, "miss": 1, "matched": 4 } accuracy is 80%.</li>
 * <li> - The statistic data of data source
 *                          e.g.: max, min, average, group by count, ...</li>
 * <li> - The uniqueness of data source comparing with itself
 *                           count(unique items in source) / count(source)
 *                           e.g.: [1, 2, 3, 3] -> { "unique": 2, "total": 4, "dup-arr": [ "dup": 1, "num": 1 ] }
 *                           uniqueness indicates the items without any replica of data</li>
 * <li> - The distinctness of data source comparing with itself
 *                             count(distinct items in source) / count(source)
 *                             e.g.: [1, 2, 3, 3] -> { "dist": 3, "total": 4, "dup-arr": [ "dup": 1, "num": 1 ] }
 *                             distinctness indicates the valid information of data
 *                             comparing with uniqueness, distinctness is more meaningful</li>
 * <li> - The latency of data source with timestamp information
 *                           e.g.: (receive_time - send_time)
 *                           timeliness can get the statistic metric of latency, like average, max, min,
 *                            percentile-value,
 *                           even more, it can record the items with latency above threshold you configured</li>
 * <li> - The completeness of data source
 *                             the columns you measure is incomplete if it is null</li>
 */
object DqType extends GriffinEnum {

  type DqType = Value

  val Accuracy, Profiling, Uniqueness, Duplicate, Distinct, Timeliness, Completeness = Value

  override def withNameWithDefault(name: String): enums.DqType.Value = {
    val dqType = super.withNameWithDefault(name)
    dqType match {
      case Uniqueness | Duplicate => Uniqueness
      case _ => dqType
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

import com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * dsl type indicates the language type of rule param
 * <li> - spark-sql: rule defined in "SPARK-SQL" directly</li>
 * <li> - df-ops|df-opr|: data frame operations rule, support some pre-defined data frame ops()</li>
 * <li> - griffin dsl rule, to define dq measurements easier</li>
 */
object DslType extends GriffinEnum {
  type DslType = Value

  val SparkSql, DfOps, DfOpr, DfOperations, GriffinDsl, DataFrameOpsType = Value

  /**
   *
   * @param name Dsltype from config file
   * @return Enum value corresponding to string
   */
  def withNameWithDslType(name: String): Value =
    values
      .find(_.toString.toLowerCase == name.replace("-", "").toLowerCase())
      .getOrElse(GriffinDsl)

  override def withNameWithDefault(name: String): enums.DslType.Value = {
    val dslType = withNameWithDslType(name)
    dslType match {
      case DfOps | DfOpr | DfOperations => DataFrameOpsType
      case _ => dslType
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * the strategy to flatten metric
 *  <li> -  default flatten strategy
 *                                     metrics contains 1 row -> flatten metric json map
 *                                     metrics contains n > 1 rows -> flatten metric json array
 *                                     n = 0: { }
 *                                     n = 1: { "col1": "value1", "col2": "value2", ... }
 *                                     n > 1: { "arr-name": [ { "col1": "value1", "col2": "value2", ... }, ... ] }
 *                                     all rows
 *  </li>
 *  <li> - metrics contains n rows -> flatten metric json map
 *                                    n = 0: { }
 *                                    n >= 1: { "col1": "value1", "col2": "value2", ... }
 *                                    the first row only
 *  </li>
 *  <li> -   metrics contains n rows -> flatten metric json array
 *                                    n = 0: { "arr-name": [ ] }
 *                                    n >= 1: { "arr-name": [ { "col1": "value1", "col2": "value2", ... }, ... ] }
 *                                    all rows
 *  </li>
 *  <li> - metrics contains n rows -> flatten metric json wrapped map
 *                                n = 0: { "map-name": { } }
 *                                n >= 1: { "map-name": { "col1": "value1", "col2": "value2", ... } }
 *                                the first row only
 *  </li>
 */
object FlattenType extends GriffinEnum {
  type FlattenType = Value

  val DefaultFlattenType, EntriesFlattenType, ArrayFlattenType, MapFlattenType =
    Value

  val List, Array, Entries, Map, Default = Value

  override def withNameWithDefault(name: String): Value = {
    val flattenType = super.withNameWithDefault(name)
    flattenType match {
      case Array | List => ArrayFlattenType
      case Map => MapFlattenType
      case Entries => EntriesFlattenType
      case _ => DefaultFlattenType
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

trait GriffinEnum extends Enumeration {
  type GriffinEnum = Value

  val Unknown: Value = Value

  /**
   *
   * @param name Constant value in String
   * @return Enum constant value
   */
  def withNameWithDefault(name: String): Value =
    values
      .find(_.toString.toLowerCase == name.replace("-", "").toLowerCase())
      .getOrElse(Unknown)

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * the strategy to output metric
 *  <li> - output the rule step result as metric</li>
 *  <li> - output the rule step result as records</li>
 *  <li> - output the rule step result to update data source cache</li>
 *  <li> - will not output the result </li>
 */
object OutputType extends GriffinEnum {
  type OutputType = Value

  val MetricOutputType, RecordOutputType, DscUpdateOutputType, UnknownOutputType = Value

  val Metric, Record, Records, DscUpdate = Value

  override def withNameWithDefault(name: String): Value = {
    val flattenType = super.withNameWithDefault(name)
    flattenType match {
      case Metric => MetricOutputType
      case Record | Records => RecordOutputType
      case DscUpdate => DscUpdateOutputType
      case _ => UnknownOutputType
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

import com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * process type enum
 *  <li> - Process in batch mode </li>
 *  <li> - Process in streaming mode</li>
 */
object ProcessType extends GriffinEnum {
  type ProcessType = Value

  val BatchProcessType: enums.ProcessType.Value = Value("Batch")
  val StreamingProcessType: enums.ProcessType.Value = Value("Streaming")
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

import com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * Supported Sink types
 *  <li>{@link #Console #Log} -  console sink, will sink metric in console (alias log)</li>
 *  <li>{@link #Hdfs} - hdfs sink, will sink metric and record in hdfs</li>
 *  <li>{@link #Es #Elasticsearch #Http} - elasticsearch sink, will sink metric
 *  in elasticsearch (alias Es and Http)</li>
 *  <li>{@link #Mongo #MongoDB} - mongo sink, will sink metric in mongo db (alias MongoDb)</li>
 *  <li>{@link #Custom} - custom sink (needs using extra jar-file-extension)</li>
 *  <li>{@link #Unknown} - </li>
 */
object SinkType extends GriffinEnum {
  type SinkType = Value

  val Console, Log, Hdfs, Es, Http, ElasticSearch, MongoDB, Mongo, Custom =
    Value

  def validSinkTypes(sinkTypeSeq: Seq[String]): Seq[SinkType] = {
    sinkTypeSeq
      .map(s => SinkType.withNameWithDefault(s))
      .filter(_ != SinkType.Unknown)
      .distinct
  }

  override def withNameWithDefault(name: String): enums.SinkType.Value = {
    val sinkType = super.withNameWithDefault(name)
    sinkType match {
      case Console | Log => Console
      case Es | ElasticSearch | Http => ElasticSearch
      case MongoDB | Mongo => MongoDB
      case _ => sinkType
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.configuration.enums

/**
 * write mode when write metrics and records
 */
sealed trait WriteMode {}

object WriteMode {
  def defaultMode(procType: ProcessType.ProcessType): WriteMode = {
    procType match {
      case ProcessType.BatchProcessType => SimpleMode
      case ProcessType.StreamingProcessType => TimestampMode
    }
  }
}

/**
 * simple mode: write metrics and records directly
 */
case object SimpleMode extends WriteMode {}

/**
 * timestamp mode: write metrics and records with timestamp information
 */
case object TimestampMode extends WriteMode {}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/context: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

/**
 * context id, unique by different timestamp and tag
 */
case class ContextId(timestamp: Long, tag: String = "") extends Serializable {
  def id: String = {
    if (tag.nonEmpty) s"${tag}_$timestamp" else s"$timestamp"
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.collection.mutable
import org.apache.spark.sql.DataFrame

/**
 * cache and unpersist dataframes
 */
case class DataFrameCache() extends Loggable {

  val dataFrames: mutable.Map[String, DataFrame] = mutable.Map()
  val trashDataFrames: mutable.MutableList[DataFrame] = mutable.MutableList()

  private def trashDataFrame(df: DataFrame): Unit = {
    trashDataFrames += df
  }
  private def trashDataFrames(dfs: Seq[DataFrame]): Unit = {
    trashDataFrames ++= dfs
  }

  def cacheDataFrame(name: String, df: DataFrame): Unit = {
    info(s"try to cache data frame $name")
    dataFrames.get(name) match {
      case Some(odf) =>
        trashDataFrame(odf)
        dataFrames += (name -> df)
        df.cache
        info("cache after replace old df")
      case _ =>
        dataFrames += (name -> df)
        df.cache
        info("cache after replace no old df")
    }
  }

  def uncacheDataFrame(name: String): Unit = {
    dataFrames.get(name).foreach(df => trashDataFrame(df))
    dataFrames -= name
  }
  def uncacheAllDataFrames(): Unit = {
    trashDataFrames(dataFrames.values.toSeq)
    dataFrames.clear
  }

  def clearAllTrashDataFrames(): Unit = {
    trashDataFrames.foreach(_.unpersist)
    trashDataFrames.clear
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.SinkParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType.ProcessType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType.BatchProcessType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.WriteMode
import com.hsbc.gbm.bd.clm.measure.datasource.DataSource
import com.hsbc.gbm.bd.clm.measure.sink.{Sink, SinkFactory}
import org.apache.spark.sql.{Encoder, Encoders, SparkSession}


/**
 * dq context: the context of each calculation
 * unique context id in each calculation
 * access the same spark session this app created
 */
case class DQContext(
                      contextId: ContextId,
                      name: String,
                      dataSources: Seq[DataSource],
                      sinkParams: Seq[SinkParam],
                      procType: ProcessType)(@transient implicit val sparkSession: SparkSession) extends Loggable {

  val compileTableRegister: CompileTableRegister = CompileTableRegister()
  val runTimeTableRegister: RunTimeTableRegister = RunTimeTableRegister(sparkSession)

  val dataFrameCache: DataFrameCache = DataFrameCache()

  val metricWrapper: MetricWrapper = MetricWrapper(name, sparkSession.sparkContext.applicationId)
  val writeMode: WriteMode = WriteMode.defaultMode(procType)

  val dataSourceNames: Seq[String] = {
    // sort data source names, put baseline data source name to the head
    val (blOpt, others) = dataSources.foldLeft((None: Option[String], Nil: Seq[String])) {
      (ret, ds) =>
        val (opt, seq) = ret
        if (opt.isEmpty && ds.isBaseline) (Some(ds.name), seq) else (opt, seq :+ ds.name)
    }
    blOpt match {
      case Some(bl) => bl +: others
      case _ => others
    }
  }
  dataSourceNames.foreach(name => compileTableRegister.registerTable(name))

  def getDataSourceName(index: Int): String = {
    if (dataSourceNames.size > index) dataSourceNames(index) else ""
  }

  implicit val encoder: Encoder[String] = Encoders.STRING
  val functionNames: Seq[String] = sparkSession.catalog.listFunctions.map(_.name).collect.toSeq

  val dataSourceTimeRanges: Map[String, TimeRange] = loadDataSources()

  def loadDataSources(): Map[String, TimeRange] = {
    dataSources.map { ds =>
      (ds.name, ds.loadData(this))
    }.toMap
  }

  printTimeRanges()

  private val sinkFactory = SinkFactory(sinkParams, name)
  private val defaultSinks: Seq[Sink] = createSinks(contextId.timestamp)

  def getSinks(timestamp: Long): Seq[Sink] = {
    if (timestamp == contextId.timestamp) getSinks
    else createSinks(timestamp)
  }

  def getSinks: Seq[Sink] = defaultSinks

  private def createSinks(t: Long): Seq[Sink] = {
    procType match {
      case BatchProcessType => sinkFactory.getSinks(t, block = true)
    }
  }

  def cloneDQContext(newContextId: ContextId): DQContext = {
    DQContext(newContextId, name, dataSources, sinkParams, procType)(sparkSession)
  }

  def clean(): Unit = {
    compileTableRegister.unregisterAllTables()
    runTimeTableRegister.unregisterAllTables()

    dataFrameCache.uncacheAllDataFrames()
    dataFrameCache.clearAllTrashDataFrames()
  }

  private def printTimeRanges(): Unit = {
    if (dataSourceTimeRanges.nonEmpty) {
      val timeRangesStr = dataSourceTimeRanges
        .map { pair =>
          val (name, timeRange) = pair
          s"$name -> (${timeRange.begin}, ${timeRange.end}]"
        }
        .mkString("\r\n")
      info(s"data source timeRanges: \r\n$timeRangesStr")
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/context/metric: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context.metric

/**
 * accuracy metric
 * @param miss     miss count
 * @param total    total count
 */
case class AccuracyMetric(miss: Long, total: Long) extends Metric {

  type T = AccuracyMetric

  override def isLegal: Boolean = getTotal > 0

  def update(delta: T): T = {
    if (delta.miss < miss) AccuracyMetric(delta.miss, total) else this
  }

  def initial(): Boolean = {
    getMatch <= 0
  }

  def eventual(): Boolean = {
    this.miss <= 0
  }

  def differsFrom(other: T): Boolean = {
    (this.miss != other.miss) || (this.total != other.total)
  }

  def getMiss: Long = miss

  def getTotal: Long = total

  def getMatch: Long = total - miss

  def matchFraction: Double = if (getTotal <= 0) 1 else getMatch.toDouble / getTotal

  def matchPercentage: Double = matchFraction * 100

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context.metric

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.collection.mutable.{Map => MutableMap}

/**
 * in streaming mode, some metrics may update,
 * the old metrics are cached here
 */
object CacheResults extends Loggable {

  case class CacheResult(timeStamp: Long, updateTime: Long, result: Metric) {
    def olderThan(ut: Long): Boolean = updateTime < ut
    def update[A <: result.T: Manifest](ut: Long, r: Metric): Option[Metric] = {
      r match {
        case m: A if olderThan(ut) =>
          val ur = result.update(m)
          Some(ur).filter(result.differsFrom)
        case _ => None
      }
    }
  }

  private val cacheGroup: MutableMap[Long, CacheResult] = MutableMap()

  private def update(r: CacheResult): Unit = {
    cacheGroup += (r.timeStamp -> r)
  }

  /**
   * input new metric results, output the updated metric results.
   */
  def update(cacheResults: Iterable[CacheResult]): Iterable[CacheResult] = {
    val updatedCacheResults = cacheResults.flatMap { cacheResult =>
      val CacheResult(t, ut, r) = cacheResult
      (cacheGroup.get(t) match {
        case Some(cr) => cr.update(ut, r)
        case _ => Some(r)
      }).map(m => CacheResult(t, ut, m))
    }
    updatedCacheResults.foreach(r => update(r))
    updatedCacheResults
  }

  /**
   * clean the out-time cached results, to avoid memory leak
   */
  def refresh(overtime: Long): Unit = {
    val curCacheGroup = cacheGroup.toMap
    val deadCache = curCacheGroup.filter { pr =>
      val (_, cr) = pr
      cr.timeStamp < overtime || cr.result.eventual()
    }
    info(s"=== dead cache group count: ${deadCache.size} ===")
    deadCache.keySet.foreach(cacheGroup -= _)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context.metric

trait Metric extends Serializable {

  type T <: Metric

  def isLegal: Boolean = true

  def update(delta: T): T

  def initial(): Boolean

  def eventual(): Boolean

  def differsFrom(other: T): Boolean

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

import scala.collection.mutable.{Map => MutableMap}

/**
 * wrap metrics into one, each calculation produces one metric map
 */
case class MetricWrapper(name: String, applicationId: String) extends Serializable {

  val _Name = "name"
  val _Timestamp = "tmst"
  val _Value = "value"
  val _Metadata = "metadata"

  val metrics: MutableMap[Long, Map[String, Any]] = MutableMap()

  def insertMetric(timestamp: Long, value: Map[String, Any]): Unit = {
    val newValue = metrics.get(timestamp) match {
      case Some(v) => v ++ value
      case _ => value
    }
    metrics += (timestamp -> newValue)
  }

  def flush: Map[Long, Map[String, Any]] = {
    metrics.toMap.map { pair =>
      val (timestamp, value) = pair
      (
        timestamp,
        Map[String, Any](
          _Name -> name,
          _Timestamp -> timestamp,
          _Value -> value,
          _Metadata -> Map("applicationId" -> applicationId)))
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.collection.mutable.{Set => MutableSet}
import org.apache.spark.sql._

/**
 * register table name
 */
trait TableRegister extends Loggable with Serializable {

  protected val tables: MutableSet[String] = MutableSet()

  def registerTable(name: String): Unit = {
    tables += name
  }

  def existsTable(name: String): Boolean = {
    tables.exists(_.equals(name))
  }

  def unregisterTable(name: String): Unit = {
    if (existsTable(name)) tables -= name
  }
  def unregisterAllTables(): Unit = {
    tables.clear
  }

  def getTables: Set[String] = {
    tables.toSet
  }

}

/**
 * register table name when building dq job
 */
case class CompileTableRegister() extends TableRegister {}

/**
 * register table name and create temp view during calculation
 */
case class RunTimeTableRegister(@transient sparkSession: SparkSession) extends TableRegister {

  def registerTable(name: String, df: DataFrame): Unit = {
    registerTable(name)
    df.createOrReplaceTempView(name)
  }

  override def unregisterTable(name: String): Unit = {
    if (existsTable(name)) {
      sparkSession.catalog.dropTempView(name)
      tables -= name
    }
  }
  override def unregisterAllTables(): Unit = {
    val uts = getTables
    uts.foreach(t => sparkSession.catalog.dropTempView(t))
    tables.clear
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.context

import scala.math.{max, min}

case class TimeRange(begin: Long, end: Long, tmsts: Set[Long]) extends Serializable {
  def merge(tr: TimeRange): TimeRange = {
    TimeRange(min(begin, tr.begin), max(end, tr.end), tmsts ++ tr.tmsts)
  }
  def minTmstOpt: Option[Long] = {
    try {
      if (tmsts.nonEmpty) Some(tmsts.min) else None
    } catch {
      case _: Throwable => None
    }
  }
}

object TimeRange {
  val emptyTimeRange: TimeRange = TimeRange(0, 0, Set[Long]())
  def apply(range: (Long, Long), tmsts: Set[Long]): TimeRange =
    TimeRange(range._1, range._2, tmsts)
  def apply(ts: Long, tmsts: Set[Long]): TimeRange = TimeRange(ts, ts, tmsts)
  def apply(ts: Long): TimeRange = TimeRange(ts, ts, Set[Long](ts))
  def apply(tmsts: Set[Long]): TimeRange = {
    try {
      TimeRange(tmsts.min, tmsts.max, tmsts)
    } catch {
      case _: Throwable => emptyTimeRange
    }
  }
}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/datasource: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/datasource/connector: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/datasource/connector/batch: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector.batch

import com.hsbc.gbm.bd.clm.measure.datasource.connector.DataConnector

trait BatchDataConnector extends DataConnector {

  def init(): Unit = {}

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector.batch


import scala.collection.mutable.{Map => MutableMap}
import scala.util._
import org.apache.spark.sql.{DataFrame, SparkSession}
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.context.TimeRange
import com.hsbc.gbm.bd.clm.measure.datasource.TimestampStorage
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * A batch data connector for ElasticSearch source with read support for multiple indices.
 *
 * Supported Configurations:
 *  - filterExprs : [[Seq]] of string expressions that act as where conditions (row filters)
 *  - selectionExprs : [[Seq]] of string expressions that act as selection conditions (column filters)
 *  - options : [[Map]] of elasticsearch options. Refer to [[ConfigurationOptions]] for options
 *  - paths : [[Seq]] of elasticsearch paths (indexes) to read from
 *
 * Some defaults assumed by this connector (if not set) are as follows:
 *  - `es.nodes` in options is 'localhost',
 *  - `es.port` in options is 9200
 *  - filterExprs is empty list
 *  - selectionExprs is empty list
 *
 * Note:
 *  - When reading from multiple indices, the schemas are merged.
 *  - Selection expressions are applied first, then the filter expressions.
 *  - filterExprs/selectionExprs may be left empty if no filters are to be applied.
 */
case class ElasticSearchDataConnector(
    @transient sparkSession: SparkSession,
    dcParam: DataConnectorParam,
    timestampStorage: TimestampStorage)
    extends BatchDataConnector {

  final val ElasticSearchFormat: String = "es"
  final val Options: String = "options"

  final val Paths: String = "paths"
  final val FilterExprs: String = "filterExprs"
  final val SelectionExprs: String = "selectionExprs"

  val config: Map[String, Any] = dcParam.getConfig

  final val filterExprs: Seq[String] = config.getStringArr(FilterExprs)
  final val selectionExprs: Seq[String] = config.getStringArr(SelectionExprs)
  final val options: MutableMap[String, String] =
    MutableMap(config.getParamStringMap(Options, Map.empty).toSeq: _*)
  final val paths: String = config.getStringArr(Paths).map(_.trim).mkString(",") match {
    case s: String if s.isEmpty =>
      griffinLogger.error(s"Mandatory configuration '$Paths' is either empty or not defined.")
      throw new IllegalArgumentException()
    case s: String => s
  }

  override def data(ms: Long): (Option[DataFrame], TimeRange) = {
    val dfOpt = {
      val dfOpt = Try {
        val indexesDF = sparkSession.read
          .options(options)
          .format(ElasticSearchFormat)
          .load(paths)

        val df = {
          if (selectionExprs.nonEmpty) indexesDF.selectExpr(selectionExprs: _*)
          else indexesDF
        }

        filterExprs.foldLeft(df)((currentDf, expr) => currentDf.where(expr))
      }

      dfOpt match {
        case Success(_) =>
        case Failure(exception) =>
          griffinLogger.error("Error occurred while reading data set.", exception)
      }

      val preDfOpt = preProcess(dfOpt.toOption, ms)
      preDfOpt
    }

    (dfOpt, TimeRange(ms, readTmst(ms)))
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector.batch

import scala.collection.mutable.{Map => MutableMap}
import scala.util._
import org.apache.spark.sql.{DataFrame, DataFrameReader, SparkSession}
import org.apache.spark.sql.internal.SQLConf
import org.apache.spark.sql.types.StructType
import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.context.TimeRange
import com.hsbc.gbm.bd.clm.measure.datasource.TimestampStorage
import com.hsbc.gbm.bd.clm.measure.utils.HdfsUtil
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * A batch data connector for file based sources which allows support various
 * file based data sources like Parquet, CSV, TSV, ORC etc.
 * Local files can also be read by prepending `file://` namespace.
 *
 * Currently supported formats like Parquet, ORC, AVRO, Text and Delimited types like CSV, TSV etc.
 *
 * Supported Configurations:
 *  - format : [[String]] specifying the type of file source (parquet, orc, etc.).
 *  - paths : [[Seq]] specifying the paths to be read
 *  - options : [[Map]] of format specific options
 *  - skipOnError : [[Boolean]] specifying whether to continue execution if one or more paths are invalid.
 *  - schema : [[Seq]] of {colName, colType and isNullable} given as key value pairs. If provided, this can
 * help skip the schema inference step for some underlying data sources.
 *
 * Some defaults assumed by this connector (if not set) are as follows:
 *  - `delimiter` is \t for TSV format,
 *  - `schema` is None,
 *  - `header` is false,
 *  - `format` is parquet
 */
case class FileBasedDataConnector(
    @transient sparkSession: SparkSession,
    dcParam: DataConnectorParam,
    timestampStorage: TimestampStorage)
    extends BatchDataConnector {

  import FileBasedDataConnector._

  val config: Map[String, Any] = dcParam.getConfig
  val options: MutableMap[String, String] = MutableMap(
    config.getParamStringMap(Options, Map.empty).toSeq: _*)

  var format: String = config.getString(Format, DefaultFormat).toLowerCase
  val paths: Seq[String] = config.getStringArr(Paths, Nil)
  val schemaSeq: Seq[Map[String, String]] =
    config.getAnyRef[Seq[Map[String, String]]](Schema, Nil)
  val skipErrorPaths: Boolean = config.getBoolean(SkipErrorPaths, defValue = false)

  val currentSchema: Option[StructType] = Try(getUserDefinedSchema) match {
    case Success(structType) if structType.fields.nonEmpty => Some(structType)
    case _ => None
  }

  assert(
    SupportedFormats.contains(format),
    s"Invalid format '$format' specified. Must be one of ${SupportedFormats.mkString("['", "', '", "']")}")

  if (format == "csv") validateCSVOptions()
  if (format == "tsv") {
    format = "csv"
    options.getOrElseUpdate(Delimiter, TabDelimiter)
  }

  /**
   * Builds a [[StructType]] from the given schema string provided as `Schema` config.
   *
   * @example
   * {"schema":[{"name":"user_id","type":"string","nullable":"true"},{"name":"age","type":"int","nullable":"false"}]}
   * {"schema":[{"name":"user_id","type":"decimal(5,2)","nullable":"true"}]}
   * {"schema":[{"name":"my_struct","type":"struct<f1:int,f2:string>","nullable":"true"}]}
   * @return
   */
  private def getUserDefinedSchema: StructType = {
    schemaSeq.foldLeft(new StructType())((currentStruct, fieldMap) => {
      val colName = fieldMap(ColName).toLowerCase
      val colType = fieldMap(ColType).toLowerCase
      val isNullable = Try(fieldMap(IsNullable).toLowerCase.toBoolean).getOrElse(true)

      currentStruct.add(colName, colType, isNullable)
    })
  }

  /**
   * Ensures the presence of schema either via `header` or `schema` options.
   *
   *  - If both are present, the preference will be given to `schema`. First row will be omitted
   * if `header` is set to true, else will be included.
   *  - If `schema` is defined, it must be valid.
   *  - If neither is set, a fatal exception is thrown.
   */
  private def validateCSVOptions(): Unit = {
    if (options.contains(Header) && config.contains(Schema)) {
      griffinLogger.warn(
        s"Both $Options.$Header and $Schema were provided. Defaulting to provided $Schema")
    }

    if (!options.contains(Header) && !config.contains(Schema)) {
      throw new IllegalArgumentException(
        s"Either '$Header' must be set in '$Options' or '$Schema' must be set.")
    }

    if (config.contains(Schema) && (schemaSeq.isEmpty || currentSchema.isEmpty)) {
      throw new IllegalStateException("Unable to create schema from specification")

    }
  }

  def data(ms: Long): (Option[DataFrame], TimeRange) = {
    val validPaths = getValidPaths(paths, skipErrorPaths)

    val dfOpt = {
      val dfOpt = Try(
        sparkSession.read
          .options(options)
          .format(format)
          .withSchemaIfAny(currentSchema)
          .load(validPaths: _*))

      dfOpt match {
        case Success(_) =>
        case Failure(exception) =>
          griffinLogger.error("Error occurred while reading data set.", exception)
      }

      val preDfOpt = preProcess(dfOpt.toOption, ms)
      preDfOpt
    }

    (dfOpt, TimeRange(ms, readTmst(ms)))
  }
}

object FileBasedDataConnector extends Loggable {
  private val Format: String = "format"
  private val Paths: String = "paths"
  private val Options: String = "options"
  private val SkipErrorPaths: String = "skipErrorPaths"
  private val Schema: String = "schema"
  private val Header: String = "header"
  private val Delimiter: String = "delimiter"

  private val ColName: String = "name"
  private val ColType: String = "type"
  private val IsNullable: String = "nullable"
  private val TabDelimiter: String = "\t"

  private val DefaultFormat: String = SQLConf.DEFAULT_DATA_SOURCE_NAME.defaultValueString
  private val SupportedFormats: Seq[String] = Seq("parquet", "orc", "avro", "text", "csv", "tsv")

  /**
   * Validates the existence of paths in a given sequence.
   * Set option `skipOnError` to true to avoid fatal errors if any erroneous paths are encountered.
   *
   * @param paths       given sequence of paths
   * @param skipOnError flag to skip erroneous paths if any
   * @return
   */
  private def getValidPaths(paths: Seq[String], skipOnError: Boolean): Seq[String] = {
    val validPaths = paths.filter(
      path =>
        if (HdfsUtil.existPath(path)) true
        else {
          val msg = s"Path '$path' does not exist!"
          if (skipOnError) griffinLogger.error(msg)
          else throw new IllegalArgumentException(msg)

          false
      })

    assert(validPaths.nonEmpty, "No paths were given for the data source.")
    validPaths
  }

  /**
   * Adds methods implicitly to [[DataFrameReader]]
   *
   * @param dfr an instance of [[DataFrameReader]]
   */
  implicit class Implicits(dfr: DataFrameReader) {

    /**
     * Applies a schema to this [[DataFrameReader]] if any.
     *
     * @param schemaOpt an optional Schema
     * @return
     */
    def withSchemaIfAny(schemaOpt: Option[StructType]): DataFrameReader = {
      schemaOpt match {
        case Some(structType) => dfr.schema(structType)
        case None => dfr
      }
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector.batch

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.context.TimeRange
import com.hsbc.gbm.bd.clm.measure.datasource.TimestampStorage
import org.apache.spark.sql.{DataFrame, SparkSession}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._


/**
 * batch data connector for hive table
 */
case class HiveBatchDataConnector(
    @transient sparkSession: SparkSession,
    dcParam: DataConnectorParam,
    timestampStorage: TimestampStorage)
    extends BatchDataConnector {

  val config: Map[String, Any] = dcParam.getConfig

  val Database = "database"
  val TableName = "table.name"
  val Where = "where"

  val database: String = config.getString(Database, "default")
  val tableName: String = config.getString(TableName, "")
  val whereString: String = config.getString(Where, "")

  val concreteTableName = s"$database.$tableName"
  val wheres: Array[String] = whereString.split(",").map(_.trim).filter(_.nonEmpty)

  def data(ms: Long): (Option[DataFrame], TimeRange) = {
    val dfOpt = {
      val dtSql = dataSql()
      info(dtSql)
      val df = sparkSession.sql(dtSql)
      val dfOpt = Some(df)
      val preDfOpt = preProcess(dfOpt, ms)
      preDfOpt
    }
    val tmsts = readTmst(ms)
    (dfOpt, TimeRange(ms, tmsts))
  }

  private def dataSql(): String = {
    val tableClause = s"SELECT * FROM $concreteTableName"
    if (wheres.length > 0) {
      val clauses = wheres.map { w =>
        s"$tableClause WHERE $w"
      }
      clauses.mkString(" UNION ALL ")
    } else tableClause
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector

import java.util.concurrent.atomic.AtomicLong

import org.apache.spark.sql.{DataFrame, SparkSession}
import org.apache.spark.sql.functions._
import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType.BatchProcessType
import com.hsbc.gbm.bd.clm.measure.context.{ContextId, DQContext, TimeRange}
import com.hsbc.gbm.bd.clm.measure.datasource.TimestampStorage
import com.hsbc.gbm.bd.clm.measure.job.builder.DQJobBuilder
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.preproc.PreProcParamMaker

import scala.collection.mutable

trait DataConnector extends Loggable with Serializable {

  val sparkSession: SparkSession

  val dcParam: DataConnectorParam

  val id: String = DataConnectorIdGenerator.genId

  val timestampStorage: TimestampStorage
  protected def saveTmst(t: Long): mutable.SortedSet[Long] = timestampStorage.insert(t)
  protected def readTmst(t: Long): Set[Long] = timestampStorage.fromUntil(t, t + 1)

  def init(): Unit

  // get data frame in batch mode
  def data(ms: Long): (Option[DataFrame], TimeRange)

  private def createContext(t: Long): DQContext = {
    DQContext(ContextId(t, id), id, Nil, Nil, BatchProcessType)(sparkSession)
  }

  def preProcess(dfOpt: Option[DataFrame], ms: Long): Option[DataFrame] = {
    // new context
    val context = createContext(ms)

    val timestamp = context.contextId.timestamp
    val suffix = context.contextId.id
    val dcDfName = dcParam.getDataFrameName("this")

    try {
      saveTmst(timestamp) // save timestamp

      dfOpt.flatMap { df =>
        val (preProcRules, thisTable) =
          PreProcParamMaker.makePreProcRules(dcParam.getPreProcRules, suffix, dcDfName)

        // init data
        context.compileTableRegister.registerTable(thisTable)
        context.runTimeTableRegister.registerTable(thisTable, df)

        // build job
        val preprocJob = DQJobBuilder.buildDQJob(context, preProcRules)

        // job execute
        preprocJob.execute(context)

        // out data
        val outDf = context.sparkSession.table(s"`$thisTable`")

        // add tmst column
        val withTmstDf = outDf.withColumn(ConstantColumns.tmst, lit(timestamp))

        // clean context
        context.clean()

        Some(withTmstDf)
      }

    } catch {
      case e: Throwable =>
        error(s"pre-process of data connector [$id] error: ${e.getMessage}", e)
        None
    }
  }
}

object DataConnectorIdGenerator {
  private val counter: AtomicLong = new AtomicLong(0L)
  private val head: String = "dc"

  def genId: String = {
    s"$head$increment"
  }

  private def increment: Long = {
    counter.incrementAndGet()
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource.connector

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.datasource.TimestampStorage
import com.hsbc.gbm.bd.clm.measure.datasource.connector.batch._
import org.apache.spark.sql.SparkSession

import scala.util.Try
import scala.util.matching.Regex

object DataConnectorFactory extends Loggable {

  @deprecated val AvroRegex: Regex = """^(?i)avro$""".r
  @deprecated val TextDirRegex: Regex = """^(?i)text-dir$""".r

  val HiveRegex: Regex = """^(?i)hive$""".r
  val FileRegex: Regex = """^(?i)file$""".r
  val KafkaRegex: Regex = """^(?i)kafka$""".r
  val JDBCRegex: Regex = """^(?i)jdbc$""".r
  val CustomRegex: Regex = """^(?i)custom$""".r
  val ElasticSearchRegex: Regex = """^(?i)elasticsearch$""".r

  /**
   * create data connector
   *
   * @param sparkSession spark env
   * @param dcParam      data connector param
   * @param tmstCache    same tmst cache in one data source
   * @return data connector
   */
  def getDataConnector(
                        sparkSession: SparkSession,
                        dcParam: DataConnectorParam,
                        tmstCache: TimestampStorage): Try[DataConnector] = {
    val conType = dcParam.getType
    Try {
      conType match {
        case HiveRegex() => HiveBatchDataConnector(sparkSession, dcParam, tmstCache)
        case FileRegex() => FileBasedDataConnector(sparkSession, dcParam, tmstCache)
        case ElasticSearchRegex() => ElasticSearchDataConnector(sparkSession, dcParam, tmstCache)
        case CustomRegex() =>
          getCustomConnector(sparkSession, dcParam, tmstCache)
        case _ => throw new Exception("connector creation error!")
      }
    }
  }

  private def getCustomConnector(
                                  sparkSession: SparkSession,
                                  dcParam: DataConnectorParam,
                                  timestampStorage: TimestampStorage): DataConnector = {
    val className = dcParam.getConfig("class").asInstanceOf[String]
    val cls = Class.forName(className)
    if (classOf[BatchDataConnector].isAssignableFrom(cls)) {
      val method = cls.getDeclaredMethod(
        "apply",
        classOf[SparkSession],
        classOf[DataConnectorParam],
        classOf[TimestampStorage])
      method
        .invoke(null, sparkSession, dcParam, timestampStorage)
        .asInstanceOf[BatchDataConnector]
    } else {
      throw new ClassCastException(
        s"$className should extend BatchDataConnector or StreamingDataConnector")
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataSourceParam
import com.hsbc.gbm.bd.clm.measure.context.{DQContext, TimeRange}
import com.hsbc.gbm.bd.clm.measure.datasource.connector.DataConnector
import org.apache.spark.sql._
import com.hsbc.gbm.bd.clm.measure.utils.DataFrameUtil._

/**
 * data source
 *
 * @param name          name of data source
 * @param dsParam       param of this data source
 * @param dataConnector data connector
 */
case class DataSource(
                       name: String,
                       dsParam: DataSourceParam,
                       dataConnector: Option[DataConnector])
  extends Loggable
    with Serializable {

  val isBaseline: Boolean = dsParam.isBaseline

  def init(): Unit = {
    dataConnector.foreach(_.init())
  }

  def loadData(context: DQContext): TimeRange = {
    info(s"load data [$name]")
    try {
      val timestamp = context.contextId.timestamp
      val (dfOpt, timeRange) = data(timestamp)
      dfOpt match {
        case Some(df) =>
          context.runTimeTableRegister.registerTable(name, df)
        case None =>
          throw new RuntimeException(s"Data source [$name] is null!")
      }
      timeRange
    } catch {
      case e: Throwable =>
        error(s"load data source [$name] fails")
        throw e
    }
  }

  private def data(timestamp: Long): (Option[DataFrame], TimeRange) = {
    val batches = dataConnector.flatMap { dc =>
      val (dfOpt, timeRange) = dc.data(timestamp)
      dfOpt match {
        case Some(_) => Some((dfOpt, timeRange))
        case _ => None
      }
    }

    if (batches.nonEmpty) {
      batches.reduce { (a, b) =>
        (unionDfOpts(a._1, b._1), a._2.merge(b._2))
      }
    } else {
      (None, TimeRange.emptyTimeRange)
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataSourceParam
import com.hsbc.gbm.bd.clm.measure.datasource.connector.DataConnectorFactory
import org.apache.spark.sql.SparkSession

import scala.util.Success

object DataSourceFactory extends Loggable {

  def getDataSources(sparkSession: SparkSession, dataSources: Seq[DataSourceParam]): Seq[DataSource] = {
    dataSources.zipWithIndex.flatMap { pair =>
      val (param, _) = pair
      getDataSource(sparkSession, param)
    }
  }

  private def getDataSource(sparkSession: SparkSession, dataSourceParam: DataSourceParam): Option[DataSource] = {
    val name = dataSourceParam.getName
    val timestampStorage = TimestampStorage()

    val connectorParamsOpt = dataSourceParam.getConnector

    connectorParamsOpt match {
      case Some(connectorParam) =>
        val dataConnectors = DataConnectorFactory.getDataConnector(
          sparkSession,
          connectorParam,
          timestampStorage) match {
          case Success(connector) => Some(connector)
          case _ => None
        }

        Some(DataSource(name, dataSourceParam, dataConnectors))
      case None => None
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.datasource

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.collection.mutable.{SortedSet => MutableSortedSet}


/**
 * tmst cache, CRUD of timestamps
 */
case class TimestampStorage() extends Loggable {

  private val tmstGroup: MutableSortedSet[Long] = MutableSortedSet.empty[Long]

  // -- insert tmst into tmst group --
  def insert(tmst: Long): MutableSortedSet[Long] = tmstGroup += tmst
  def insert(tmsts: Iterable[Long]): MutableSortedSet[Long] = tmstGroup ++= tmsts

  // -- remove tmst from tmst group --
  def remove(tmst: Long): MutableSortedSet[Long] = tmstGroup -= tmst
  def remove(tmsts: Iterable[Long]): MutableSortedSet[Long] = tmstGroup --= tmsts

  // -- get subset of tmst group --
  def fromUntil(from: Long, until: Long): Set[Long] = tmstGroup.range(from, until).toSet
  def afterTil(after: Long, til: Long): Set[Long] = tmstGroup.range(after + 1, til + 1).toSet
  def until(until: Long): Set[Long] = tmstGroup.until(until).toSet
  def from(from: Long): Set[Long] = tmstGroup.from(from).toSet
  def all: Set[Long] = tmstGroup.toSet

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/job: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/job/builder: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.job.builder

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.job._
import com.hsbc.gbm.bd.clm.measure.step.builder.DQStepBuilder
import com.hsbc.gbm.bd.clm.measure.step.write.MetricFlushStep

/**
 * build dq job based on configuration
 */
object DQJobBuilder {

  /**
   * build dq job with rule param
   * @param context              dq context
   * @param evaluateRuleParam    evaluate rule param
   * @return       dq job
   */
  def buildDQJob(context: DQContext, evaluateRuleParam: EvaluateRuleParam): DQJob = {
    val ruleParams = evaluateRuleParam.getRules
    buildDQJob(context, ruleParams)
  }

  /**
   * build dq job with rules in evaluate rule param or pre-proc param
   * @param context          dq context
   * @param ruleParams       rule params
   * @return       dq job
   */
  def buildDQJob(context: DQContext, ruleParams: Seq[RuleParam]): DQJob = {
    // build steps by datasources
    val dsSteps = context.dataSources.flatMap { dataSource =>
      DQStepBuilder.buildStepOptByDataSourceParam(context, dataSource.dsParam)
    }
    // build steps by rules
    val ruleSteps = ruleParams.flatMap { ruleParam =>
      DQStepBuilder.buildStepOptByRuleParam(context, ruleParam)
    }
    // metric flush step
    val metricFlushStep = MetricFlushStep()

    DQJob(dsSteps ++ ruleSteps :+ metricFlushStep)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.job

import scala.util.{Failure, Success, Try}
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep

case class DQJob(dqSteps: Seq[DQStep]) extends Serializable {

  def execute(context: DQContext): Try[Boolean] = {
    dqSteps
      .map(_.execute(context))
      .foldLeft(Try(true)) { (ret, stepResult) =>
        (ret, stepResult) match {
          case (Success(_), nextResult) => nextResult
          case (Failure(_), _) => ret
        }
      }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/launch: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/launch/batch: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.launch.batch

import java.util.concurrent.TimeUnit

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DQConfig, SinkParam}
import com.hsbc.gbm.bd.clm.measure.context.{ContextId, DQContext}

import scala.util.Try
import org.apache.spark.sql.SparkSession
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType.BatchProcessType
import com.hsbc.gbm.bd.clm.measure.datasource.DataSourceFactory
import com.hsbc.gbm.bd.clm.measure.job.builder.DQJobBuilder
import com.hsbc.gbm.bd.clm.measure.launch.DQApp
import com.hsbc.gbm.bd.clm.measure.step.builder.udf.GriffinUDFAgent
import com.hsbc.gbm.bd.clm.measure.utils.CommonUtils

case class BatchDQApp(dqParam: DQConfig, sinkParams: Seq[SinkParam]) extends DQApp {

  def retryable: Boolean = false

  def run(implicit spark: SparkSession): Try[Boolean] = {
    CommonUtils.timeThis({
      val logLevel = getGriffinLogLevel
      griffinLogger.setLevel(logLevel)
      // register udf
      GriffinUDFAgent.register(spark)

      val measureTime = getMeasureTime
      val contextId = ContextId(measureTime)

      // get data sources
      val dataSources =
        DataSourceFactory.getDataSources(spark, dqParam.getDataSources)
      dataSources.foreach(_.init())

      // create dq context
      val dqContext = DQContext(contextId, dqParam.getName, dataSources, sinkParams, BatchProcessType)(spark)

      // start id
      val applicationId = spark.sparkContext.applicationId
      dqContext.getSinks.foreach(_.open(applicationId))

      // build job
      val dqJob = DQJobBuilder.buildDQJob(dqContext, dqParam.getEvaluateRule)

      // dq job execute
      val executeStatuCode = dqJob.execute(dqContext)

      // clean context
      dqContext.clean()

      // finish
      dqContext.getSinks.foreach(_.close())

      executeStatuCode
    }, TimeUnit.MILLISECONDS)
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.launch

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.SinkParam

import scala.util.Try
import org.apache.spark.metrics.sink.Sink
import org.apache.spark.sql.SparkSession
import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DQConfig, EnvConfig, SinkParam}

/**
 * dq application process
 */
trait DQApp extends Loggable with Serializable {

  def sinkParams: Seq[SinkParam]

  def dqParam: DQConfig

  /**
   * @return execution success
   */
  def run(implicit spark: SparkSession): Try[Boolean]

  /**
   * application will exit if it fails in run phase.
   * if retryable is true, the exception will be threw to spark env,
   * and enable retry strategy of spark application
   */
  def retryable: Boolean

  /**
   * timestamp as a key for metrics
   */
  protected def getMeasureTime: Long = {
    dqParam.getTimestampOpt match {
      case Some(t) if t > 0 => t
      case _ => System.currentTimeMillis
    }
  }

  /**
   * Gets a valid [[Sink]] definition from the Env Config for each [[Sink]] defined in Job Config.
   *
   * @throws AssertionError if Env Config does not contain definition for a sink defined in Job Config
   * @return [[Seq]] of [[Sink]] definitions
   */
  protected def getSinkParams: Seq[SinkParam] = {
    val sinkParams = dqParam.getSinkNames
      .map(_.toLowerCase())
      .map { sinkName =>
        (sinkName, this.sinkParams.find(_.getName.toLowerCase().matches(sinkName)))
      }

    val missingSinks = sinkParams.filter(_._2.isEmpty).map(_._1)

    assert(
      missingSinks.isEmpty,
      s"Sink(s) ['${missingSinks.mkString("', '")}'] not defined in env config.")

    sinkParams.flatMap(_._2)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure

import org.apache.log4j.Level
import org.apache.log4j.Logger

trait Loggable {

  @transient private lazy val logger = Logger.getLogger(getClass)

  @transient protected lazy val griffinLogger: Logger = Logger.getLogger("com.hsbc.gbm.bd.clm")

  def getGriffinLogLevel: Level = {
    var logger = griffinLogger
    while (logger != null && logger.getLevel == null) {
      logger = logger.getParent.asInstanceOf[Logger]
    }
    logger.getLevel
  }

  protected def info(msg: => String): Unit = {
    logger.info(msg)
  }

  protected def debug(msg: => String): Unit = {
    logger.debug(msg)
  }

  protected def warn(msg: => String): Unit = {
    logger.warn(msg)
  }

  protected def warn(msg: => String, e: Throwable): Unit = {
    logger.warn(msg, e)
  }

  protected def error(msg: => String): Unit = {
    logger.error(msg)
  }

  protected def error(msg: => String, e: Throwable): Unit = {
    logger.error(msg, e)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.reader.ParamReaderFactory
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DQConfig, DataConnectorParam, DataSourceParam, EvaluateRuleParam, Param, RuleParam, SinkParam}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType.BatchProcessType
import com.hsbc.gbm.bd.clm.measure.launch.DQApp
import com.hsbc.gbm.bd.clm.measure.launch.batch.BatchDQApp
import com.hsbc.gbm.bd.clm.measure.utils.HdfsUtil
import org.apache.spark.sql.SparkSession

import scala.reflect.ClassTag
import scala.util.{Failure, Success, Try}

trait MeasureDQ extends Loggable {

  def measureDirPath: String

  def dsParams: Seq[DataSourceParam]

  def sinkParams: Seq[SinkParam]

  def measurementName = "CLM_Measure"

  implicit def spark: SparkSession

  def measure(): Unit = {
    val evaluateRuleParam: EvaluateRuleParam = HdfsUtil.listSubPathsByType(measureDirPath, "file", fullPath = true).map(x => {
      readFile[EvaluateRuleParam](x) match {
        case Success(p) => p
        case Failure(ex) =>
          error(ex.getMessage, ex)
          sys.exit(-1)
      }
    }).foldLeft(EvaluateRuleParam(List[RuleParam]()))((x, xs) => EvaluateRuleParam(x.getRules ++ xs.getRules))

    val dqParam: DQConfig = DQConfig(measurementName, 0L, "batch", dsParams, evaluateRuleParam, sinkParams.map(_.getName))

    // choose process
    val procType: ProcessType.Value = ProcessType.withNameWithDefault(dqParam.getProcType)
    val dqApp: DQApp = procType match {
      case BatchProcessType => BatchDQApp(dqParam, sinkParams)
      case _ =>
        error(s"$procType is unsupported process type!")
        sys.exit(-2)
    }

    // dq app run
    val success: Boolean = dqApp.run match {
      case Success(result) =>
        info("process run result: " + (if (result) "success" else "failed"))
        result

      case Failure(ex) =>
        error(s"process run error: ${ex.getMessage}", ex)

        if (dqApp.retryable) {
          throw ex
        } else {
          sys.exit(-3)
        }
    }

    if (!success) {
      sys.exit(-3)
    }
  }

  private def readFile[T <: Param](file: String)(implicit m: ClassTag[T]): Try[T] = {
    val paramReader = ParamReaderFactory.getParamReader(file)
    paramReader.readConfig[T]
  }
}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/sink: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.DataFrame
import com.hsbc.gbm.bd.clm.measure.utils.JsonUtil
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * Console Sink for Records and Metrics.
 * Records are shown in a tabular structure and Metrics are logged as JSON string.
 *
 * Supported Configurations:
 *  - truncate : [[Boolean]] Whether truncate long strings. If true, strings more than 20 characters
 * will be truncated and all cells will be aligned right. Default is true.
 *  - numRows : [[Int]] Number of rows to show. Default is 20.
 */
case class ConsoleSink(config: Map[String, Any], jobName: String, timeStamp: Long) extends Sink {

  val block: Boolean = true

  val Truncate: String = "truncate"
  val truncateRecords: Boolean = config.getBoolean(Truncate, defValue = true)

  val NumberOfRows: String = "numRows"
  val numRows: Int = config.getInt(NumberOfRows, 20)

  def validate(): Boolean = true

  override def open(applicationId: String): Unit = {
    griffinLogger.info(
      s"Opened ConsoleSink for job with name '$jobName', " +
        s"timestamp '$timeStamp' and applicationId '$applicationId'")
  }

  override def close(): Unit = {
    griffinLogger.info(
      s"Closed ConsoleSink for job with name '$jobName' and timestamp '$timeStamp'")
  }

  override def sinkRecords(records: RDD[String], name: String): Unit = {}

  override def sinkRecords(records: Iterable[String], name: String): Unit = {}

  override def sinkMetrics(metrics: Map[String, Any])(context: DQContext): Unit = {
    import context.sparkSession.implicits._
    Seq(JsonUtil.toJson(metrics)).toDF(s"${jobName.replaceAll("[ |-]", "_")}_Metrics").show(false)
  }

  override def sinkBatchRecords(dataset: DataFrame, key: Option[String] = None): Unit = {
    println(key.getOrElse(""))
    dataset.show(numRows, truncateRecords)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import com.hsbc.gbm.bd.clm.measure.context.DQContext

import scala.concurrent.Future
import org.apache.spark.sql.DataFrame
import com.hsbc.gbm.bd.clm.measure.utils.{HttpUtil, JsonUtil, TimeUtil}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * sink metric and record through http request
 */
case class ElasticSearchSink(
    config: Map[String, Any],
    jobName: String,
    timeStamp: Long,
    block: Boolean)
    extends Sink {

  val Api = "api"
  val Method = "method"
  val ConnectionTimeout = "connection.timeout"
  val Retry = "retry"

  val api: String = config.getString(Api, "")
  val method: String = config.getString(Method, "post")

  val connectionTimeout: Long =
    TimeUtil.milliseconds(config.getString(ConnectionTimeout, "")).getOrElse(-1L)

  val retry: Int = config.getInt(Retry, 10)

  val _Value = "value"

  def validate(): Boolean = {
    api.nonEmpty
  }

  private def httpResult(dataMap: Map[String, Any]): Unit = {
    try {
      val data = JsonUtil.toJson(dataMap)
      // http request
      val params = Map[String, Object]()
      val header = Map[String, Object](("Content-Type", "application/json"))

      def func(): (Long, Future[Boolean]) = {
        import scala.concurrent.ExecutionContext.Implicits.global
        (timeStamp, Future(HttpUtil.doHttpRequest(api, method, params, header, data)))
      }
      if (block) SinkTaskRunner.addBlockTask(func _, retry, connectionTimeout)
      else SinkTaskRunner.addNonBlockTask(func _, retry)
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }

  }

  override def sinkMetrics(metrics: Map[String, Any])(context: DQContext): Unit = {
    httpResult(metrics)
  }

  override def sinkBatchRecords(dataset: DataFrame, key: Option[String] = None): Unit = {}
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.DataFrame
import com.hsbc.gbm.bd.clm.measure.utils.{HdfsUtil, JsonUtil}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * sink metric and record to hdfs
 */
case class HdfsSink(config: Map[String, Any], jobName: String, timeStamp: Long) extends Sink {

  val block: Boolean = true

  val PathKey = "path"
  val MaxPersistLines = "max.persist.lines"
  val MaxLinesPerFile = "max.lines.per.file"

  val parentPath: String = config.getOrElse(PathKey, "").toString
  val maxPersistLines: Int = config.getInt(MaxPersistLines, -1)
  val maxLinesPerFile: Int = math.min(config.getInt(MaxLinesPerFile, 10000), 1000000)

  val StartFile: String = filePath("_START")
  val FinishFile: String = filePath("_FINISH")
  val MetricsFile: String = filePath("_METRICS")

  val LogFile: String = filePath("_LOG")

  var _init = true

  def validate(): Boolean = {
    parentPath.nonEmpty
  }

//  private def logHead: String = {
//    if (_init) {
//      _init = false
//      val dt = new Date(timeStamp)
//      s"================ log of $dt ================\n"
//    } else ""
//  }
//
//  private def timeHead(rt: Long): String = {
//    val dt = new Date(rt)
//    s"--- $dt ---\n"
//  }
//
//  private def logWrap(rt: Long, msg: String): String = {
//    logHead + timeHead(rt) + s"$msg\n\n"
//  }

  protected def filePath(file: String): String = {
    HdfsUtil.getHdfsFilePath(parentPath, s"$jobName/$timeStamp/$file")
  }

  protected def withSuffix(path: String, suffix: String): String = {
    s"$path.$suffix"
  }

  override def open(applicationId: String): Unit = {
    try {
      HdfsUtil.writeContent(StartFile, applicationId)
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

  override def close(): Unit = {
    try {
      HdfsUtil.createEmptyFile(FinishFile)
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

//  def log(rt: Long, msg: String): Unit = {
//    try {
//      val logStr = logWrap(rt, msg)
//      HdfsUtil.withHdfsFile(LogFile) { out =>
//        out.write(logStr.getBytes("utf-8"))
//      }
//    } catch {
//      case e: Throwable => error(e.getMessage, e)
//    }
//  }

  private def getHdfsPath(path: String, groupId: Int): String = {
    HdfsUtil.getHdfsFilePath(path, s"$groupId")
  }

  private def clearOldRecords(path: String): Unit = {
    HdfsUtil.deleteHdfsPath(path)
  }

  override def sinkRecords(records: RDD[String], name: String): Unit = {
    val path = filePath(name)
    clearOldRecords(path)
    try {
      val recordCount = records.count

      val count =
        if (maxPersistLines < 0) recordCount else scala.math.min(maxPersistLines, recordCount)

      if (count > 0) {
        val groupCount = ((count - 1) / maxLinesPerFile + 1).toInt
        if (groupCount <= 1) {
          val recs = records.take(count.toInt)
          sinkRecords2Hdfs(path, recs)
        } else {
          val groupedRecords: RDD[(Long, Iterable[String])] =
            records.zipWithIndex
              .flatMap { r =>
                val gid = r._2 / maxLinesPerFile
                if (gid < groupCount) Some((gid, r._1)) else None
              }
              .groupByKey()
          groupedRecords.foreach { group =>
            val (gid, recs) = group
            val hdfsPath = if (gid == 0) path else withSuffix(path, gid.toString)
            sinkRecords2Hdfs(hdfsPath, recs)
          }
        }
      }
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

  override def sinkRecords(records: Iterable[String], name: String): Unit = {
    val path = filePath(name)
    clearOldRecords(path)
    try {
      val recordCount = records.size

      val count =
        if (maxPersistLines < 0) recordCount else scala.math.min(maxPersistLines, recordCount)

      if (count > 0) {
        val groupCount = (count - 1) / maxLinesPerFile + 1
        if (groupCount <= 1) {
          val recs = records.take(count.toInt)
          sinkRecords2Hdfs(path, recs)
        } else {
          val groupedRecords = records.grouped(maxLinesPerFile).zipWithIndex
          groupedRecords.take(groupCount).foreach { group =>
            val (recs, gid) = group
            val hdfsPath = getHdfsPath(path, gid)
            sinkRecords2Hdfs(hdfsPath, recs)
          }
        }
      }
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

  override def sinkMetrics(metrics: Map[String, Any])(context: DQContext): Unit = {
    try {
      val json = JsonUtil.toJson(metrics)
      sinkRecords2Hdfs(MetricsFile, json :: Nil)
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

  private def sinkRecords2Hdfs(hdfsPath: String, records: Iterable[String]): Unit = {
    try {
      HdfsUtil.withHdfsFile(hdfsPath, appendIfExists = false) { out =>
        records.map { record =>
          out.write((record + "\n").getBytes("utf-8"))
        }
      }
    } catch {
      case e: Throwable => error(e.getMessage, e)
    }
  }

  override def sinkBatchRecords(dataset: DataFrame, key: Option[String] = None): Unit = {
    sinkRecords(dataset.toJSON.rdd, key.getOrElse(""))
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.DataFrame

/**
 * Base trait for batch and Streaming Sinks.
 * To implement custom sinks, extend your classes with this trait.
 */
trait Sink extends Loggable with Serializable {

  val jobName: String
  val timeStamp: Long

  val config: Map[String, Any]

  val block: Boolean

  /**
   * Ensures that the pre-requisites (if any) of the Sink are met before opening it.
   */
  def validate(): Boolean

  /**
   * Allows initialization of the connection to the sink (if required).
   *
   * @param applicationId Spark Application ID
   */
  def open(applicationId: String): Unit = {}

  /**
   * Allows clean up for the sink (if required).
   */
  def close(): Unit = {}

  /**
   * Implementation of persisting records for streaming pipelines.
   */
  def sinkRecords(records: RDD[String], name: String): Unit = {}

  /**
   * Implementation of persisting records for streaming pipelines.
   */
  def sinkRecords(records: Iterable[String], name: String): Unit = {}

  /**
   * Implementation of persisting metrics.
   */
  def sinkMetrics(metrics: Map[String, Any])(context: DQContext): Unit = {}

  /**
   * Implementation of persisting records for batch pipelines.
   */
  def sinkBatchRecords(dataset: DataFrame, key: Option[String] = None): Unit = {}
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import scala.util.{Failure, Success, Try}

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.SinkParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.SinkType._
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * SinkFactory, responsible for creation of Batch and Streaming Sinks based on the definition
 * provided in Env Config.
 *
 * @param sinkParamIter [[Seq]] of sink definitions as [[SinkParam]]
 * @param jobName name of the current Griffin Job
 */
case class SinkFactory(sinkParamIter: Seq[SinkParam], jobName: String)
    extends Loggable
    with Serializable {

  /**
   * Creates all the sinks defined in the Env Config.
   *
   * @param timeStamp epoch timestamp
   * @param block persist in blocking or non-blocking way
   * @return a [[Seq]] of [[Sink]] that were created successfully
   */
  def getSinks(timeStamp: Long, block: Boolean): Seq[Sink] = {
    sinkParamIter.flatMap(param => getSink(timeStamp, param, block))
  }

  /**
   * Creates a [[Sink]] from the definition provided in the Env Config.
   * Supported [[Sink]] are defined in [[SinkType]].
   *
   * @param timeStamp epoch timestamp
   * @param sinkParam sink definition
   * @param block persist in blocking or non-blocking way
   * @return [[Some]](sink) if successfully created sink else [[None]]
   */
  private def getSink(timeStamp: Long, sinkParam: SinkParam, block: Boolean): Option[Sink] = {
    val config = sinkParam.getConfig
    val sinkType = sinkParam.getType
    val sinkTry = sinkType match {
      case Console => Try(ConsoleSink(config, jobName, timeStamp))
      case Hdfs => Try(HdfsSink(config, jobName, timeStamp))
      case ElasticSearch => Try(ElasticSearchSink(config, jobName, timeStamp, block))
      case Custom => Try(getCustomSink(config, timeStamp, block))
      case _ => throw new Exception(s"sink type $sinkType is not supported!")
    }
    sinkTry match {
      case Success(sink) if sink.validate() => Some(sink)
      case Failure(ex) =>
        error("Failed to get sink", ex)
        None
    }
  }

  /**
   * Creates a custom [[Sink]] using reflection for a provided class name.
   * Refer to measure configuration guide for more information regarding Custom sinks.
   *
   * @throws ClassCastException when the provided class name does not extend [[Sink]]
   * @param config values defined in Env Config for the custom sink
   * @param timeStamp epoch timestamp
   * @param block persist in blocking or non-blocking way
   * @return [[Sink]] if created successfully
   *
   */
  private def getCustomSink(config: Map[String, Any], timeStamp: Long, block: Boolean): Sink = {
    val className = config.getString("class", "")
    val cls = Class.forName(className)
    if (classOf[Sink].isAssignableFrom(cls)) {
      val method = cls.getDeclaredMethod(
        "apply",
        classOf[Map[String, Any]],
        classOf[String],
        classOf[Long],
        classOf[Boolean])
      method
        .invoke(
          null,
          config,
          jobName.asInstanceOf[Object],
          timeStamp.asInstanceOf[Object],
          block.asInstanceOf[Object])
        .asInstanceOf[Sink]
    } else {
      throw new ClassCastException(s"$className should extend Sink")
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.sink

import java.util.Date
import java.util.concurrent.TimeUnit

import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success}

import com.hsbc.gbm.bd.clm.measure.Loggable

/**
 * sink task runner, to sink metrics in block or non-block mode
 */
object SinkTaskRunner extends Loggable {

  import scala.concurrent.ExecutionContext.Implicits.global

  val MAX_RETRY = 100

  def addNonBlockTask(func: () => (Long, Future[_]), retry: Int): Unit = {
    val r = validRetryNum(retry)
    nonBlockExecute(func, r)
  }

  def addBlockTask(func: () => (Long, Future[_]), retry: Int, wait: Long): Unit = {
    val r = validRetryNum(retry)
    val duration = if (wait >= 0) Duration(wait, TimeUnit.MILLISECONDS) else Duration.Inf
    blockExecute(func, r, duration)
  }

  private def nonBlockExecute(func: () => (Long, Future[_]), retry: Int): Unit = {
    val nextRetry = nextRetryCount(retry)
    val st = new Date().getTime
    val (t, res) = func()
    res.onComplete {
      case Success(value) =>
        val et = new Date().getTime
        info(s"task $t success with ($value) [ using time ${et - st} ms ]")

      case Failure(e) =>
        val et = new Date().getTime
        warn(s"task $t fails [ using time ${et - st} ms ] : ${e.getMessage}")
        if (nextRetry >= 0) {
          info(s"task $t retry [ rest retry count: $nextRetry ]")
          nonBlockExecute(func, nextRetry)
        } else {
          error(s"task fails: task $t retry ends but fails", e)
        }
    }
  }

  @scala.annotation.tailrec
  private def blockExecute(
      func: () => (Long, Future[_]),
      retry: Int,
      waitDuration: Duration): Unit = {
    val nextRetry = nextRetryCount(retry)
    val st = new Date().getTime
    val (t, res) = func()
    try {
      val value = Await.result(res, waitDuration)
      val et = new Date().getTime
      info(s"task $t success with ($value) [ using time ${et - st} ms ]")
    } catch {
      case e: Throwable =>
        val et = new Date().getTime
        warn(s"task $t fails [ using time ${et - st} ms ] : ${e.getMessage}")
        if (nextRetry >= 0) {
          info(s"task $t retry [ rest retry count: $nextRetry ]")
          blockExecute(func, nextRetry, waitDuration)
        } else {
          error(s"task fails: task $t retry ends but fails", e)
        }
    }
  }

  private def validRetryNum(retry: Int): Int = {
    if (retry > MAX_RETRY) MAX_RETRY else retry
  }
  private def nextRetryCount(retry: Int): Int = {
    if (retry >= 0) retry - 1 else -1
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.DataConnectorParam
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.read.ReadStep

case class BatchDataSourceStepBuilder() extends DataSourceParamStepBuilder {

  def buildReadSteps(context: DQContext, dcParam: DataConnectorParam): Option[ReadStep] = {
    None
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

/**
 * for griffin dsl rules, the constant columns might be used during calculation,
 */
object ConstantColumns {
  val tmst = "__tmst"
  val metric = "__metric"
  val record = "__record"
  val empty = "__empty"

  val beginTs = "__begin_ts"
  val endTs = "__end_ts"

  val distinct = "__distinct"

  val rowNumber = "__rn"

  val columns: List[String] =
    List[String](tmst, metric, record, empty, beginTs, endTs, distinct, rowNumber)
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.transform.DataFrameOpsTransformStep

case class DataFrameOpsDQStepBuilder() extends RuleParamStepBuilder {

  def buildSteps(context: DQContext, ruleParam: RuleParam): Seq[DQStep] = {
    val name = getStepName(ruleParam.getOutDfName())
    val inputDfName = getStepName(ruleParam.getInDfName())
    val transformStep = DataFrameOpsTransformStep(
      name,
      inputDfName,
      ruleParam.getRule,
      ruleParam.getDetails,
      None,
      ruleParam.getCache)
    transformStep +: buildDirectWriteSteps(ruleParam)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.step.read.{ReadStep, UnionReadStep}
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DataConnectorParam, DataSourceParam}
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep

/**
 * build dq step by data source param
 */
trait DataSourceParamStepBuilder extends DQStepBuilder {

  type ParamType = DataSourceParam

  def buildDQStep(context: DQContext, param: ParamType): Option[DQStep] = {
    val name = getStepName(param.getName)

    param.getConnector match {
      case Some(dc) =>
        val steps = buildReadSteps(context, dc)
        if (steps.isDefined) Some(UnionReadStep(name, Seq(steps.get)))
        else None
      case _ => None
    }
  }

  protected def buildReadSteps(context: DQContext, dcParam: DataConnectorParam): Option[ReadStep]

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import org.apache.commons.lang.StringUtils

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DataSourceParam, Param, RuleParam}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DslType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step._

/**
 * build dq step by param
 */
trait DQStepBuilder extends Loggable with Serializable {

  type ParamType <: Param

  def buildDQStep(context: DQContext, param: ParamType): Option[DQStep]

  protected def getStepName(name: String): String = {
    if (StringUtils.isNotBlank(name)) name
    else DQStepNameGenerator.genName
  }

}

object DQStepBuilder {

  def buildStepOptByDataSourceParam(
      context: DQContext,
      dsParam: DataSourceParam): Option[DQStep] = {
    getDataSourceParamStepBuilder(context.procType)
      .flatMap(_.buildDQStep(context, dsParam))
  }

  private def getDataSourceParamStepBuilder(
      procType: ProcessType): Option[DataSourceParamStepBuilder] = {
    procType match {
      case BatchProcessType => Some(BatchDataSourceStepBuilder())
      case _ => None
    }
  }

  def buildStepOptByRuleParam(context: DQContext, ruleParam: RuleParam): Option[DQStep] = {
    val dslType = ruleParam.getDslType
    val dsNames = context.dataSourceNames
    val funcNames = context.functionNames
    val dqStepOpt = getRuleParamStepBuilder(dslType, dsNames, funcNames)
      .flatMap(_.buildDQStep(context, ruleParam))
    dqStepOpt.toSeq
      .flatMap(_.getNames)
      .foreach(name => context.compileTableRegister.registerTable(name))
    dqStepOpt
  }

  private def getRuleParamStepBuilder(
      dslType: DslType,
      dsNames: Seq[String],
      funcNames: Seq[String]): Option[RuleParamStepBuilder] = {
    dslType match {
      case SparkSql => Some(SparkSqlDQStepBuilder())
      case DataFrameOpsType => Some(DataFrameOpsDQStepBuilder())
      case GriffinDsl => Some(GriffinDslDQStepBuilder(dsNames, funcNames))
      case _ => None
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import java.util.concurrent.atomic.AtomicLong

object DQStepNameGenerator {
  private val counter: AtomicLong = new AtomicLong(0L)
  private val head: String = "step"

  def genName: String = {
    s"$head$increment"
  }

  private def increment: Long = {
    counter.incrementAndGet()
  }
}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/dsl: Is a directory
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/dsl/expr: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait AliasableExpr extends Expr {

  def alias: Option[String]

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait ClauseExpression extends Expr {}

case class SelectClause(exprs: Seq[Expr], extraConditionOpt: Option[ExtraConditionExpr])
    extends ClauseExpression {

  addChildren(exprs)

  def desc: String = {
    extraConditionOpt match {
      case Some(cdtn) => s"${cdtn.desc} ${exprs.map(_.desc).mkString(", ")}"
      case _ => s"${exprs.map(_.desc).mkString(", ")}"
    }
  }
  def coalesceDesc: String = desc

  override def map(func: Expr => Expr): SelectClause = {
    SelectClause(
      exprs.map(func(_)),
      extraConditionOpt.map(func(_).asInstanceOf[ExtraConditionExpr]))
  }

}

case class FromClause(dataSource: String) extends ClauseExpression {

  def desc: String = s"FROM `$dataSource`"
  def coalesceDesc: String = desc

}

case class WhereClause(expr: Expr) extends ClauseExpression {

  addChild(expr)

  def desc: String = s"WHERE ${expr.desc}"
  def coalesceDesc: String = s"WHERE ${expr.coalesceDesc}"

  override def map(func: Expr => Expr): WhereClause = {
    WhereClause(func(expr))
  }

}

case class GroupbyClause(exprs: Seq[Expr], havingClauseOpt: Option[Expr])
    extends ClauseExpression {

  addChildren(exprs ++ havingClauseOpt.toSeq)

  def desc: String = {
    val gbs = exprs.map(_.desc).mkString(", ")
    havingClauseOpt match {
      case Some(having) => s"GROUP BY $gbs HAVING ${having.desc}"
      case _ => s"GROUP BY $gbs"
    }
  }
  def coalesceDesc: String = {
    val gbs = exprs.map(_.desc).mkString(", ")
    havingClauseOpt match {
      case Some(having) => s"GROUP BY $gbs HAVING ${having.coalesceDesc}"
      case _ => s"GROUP BY $gbs"
    }
  }

  def merge(other: GroupbyClause): GroupbyClause = {
    val newHavingClauseOpt = (havingClauseOpt, other.havingClauseOpt) match {
      case (Some(hc), Some(ohc)) =>
        val logical1 = LogicalFactorExpr(hc, withBracket = false, None)
        val logical2 = LogicalFactorExpr(ohc, withBracket = false, None)
        Some(BinaryLogicalExpr(logical1, ("AND", logical2) :: Nil))
      case (a @ Some(_), _) => a
      case (_, b @ Some(_)) => b
      case (_, _) => None
    }
    GroupbyClause(exprs ++ other.exprs, newHavingClauseOpt)
  }

  override def map(func: Expr => Expr): GroupbyClause = {
    GroupbyClause(exprs.map(func(_)), havingClauseOpt.map(func(_)))
  }

}

case class OrderItem(expr: Expr, orderOpt: Option[String]) extends Expr {
  addChild(expr)
  def desc: String = {
    orderOpt match {
      case Some(os) => s"${expr.desc} ${os.toUpperCase}"
      case _ => s"${expr.desc}"
    }
  }
  def coalesceDesc: String = desc

  override def map(func: Expr => Expr): OrderItem = {
    OrderItem(func(expr), orderOpt)
  }
}

case class OrderbyClause(items: Seq[OrderItem]) extends ClauseExpression {

  addChildren(items.map(_.expr))

  def desc: String = {
    val obs = items.map(_.desc).mkString(", ")
    s"ORDER BY $obs"
  }
  def coalesceDesc: String = {
    val obs = items.map(_.desc).mkString(", ")
    s"ORDER BY $obs"
  }

  override def map(func: Expr => Expr): OrderbyClause = {
    OrderbyClause(items.map(func(_).asInstanceOf[OrderItem]))
  }
}

case class SortbyClause(items: Seq[OrderItem]) extends ClauseExpression {

  addChildren(items.map(_.expr))

  def desc: String = {
    val obs = items.map(_.desc).mkString(", ")
    s"SORT BY $obs"
  }
  def coalesceDesc: String = {
    val obs = items.map(_.desc).mkString(", ")
    s"SORT BY $obs"
  }

  override def map(func: Expr => Expr): SortbyClause = {
    SortbyClause(items.map(func(_).asInstanceOf[OrderItem]))
  }
}

case class LimitClause(expr: Expr) extends ClauseExpression {

  addChild(expr)

  def desc: String = s"LIMIT ${expr.desc}"
  def coalesceDesc: String = s"LIMIT ${expr.coalesceDesc}"

  override def map(func: Expr => Expr): LimitClause = {
    LimitClause(func(expr))
  }
}

case class CombinedClause(
    selectClause: SelectClause,
    fromClauseOpt: Option[FromClause],
    tails: Seq[ClauseExpression])
    extends ClauseExpression {

  addChildren({
    val headClauses: Seq[ClauseExpression] = selectClause +: fromClauseOpt.toSeq
    headClauses ++ tails
  })

  def desc: String = {
    val selectDesc = s"SELECT ${selectClause.desc}"
    val fromDesc = fromClauseOpt.map(_.desc).mkString(" ")
    val headDesc = s"$selectDesc $fromDesc"
    tails.foldLeft(headDesc) { (head, tail) =>
      s"$head ${tail.desc}"
    }
  }
  def coalesceDesc: String = {
    val selectDesc = s"SELECT ${selectClause.coalesceDesc}"
    val fromDesc = fromClauseOpt.map(_.coalesceDesc).mkString(" ")
    val headDesc = s"$selectDesc $fromDesc"
    tails.foldLeft(headDesc) { (head, tail) =>
      s"$head ${tail.coalesceDesc}"
    }
  }

  override def map(func: Expr => Expr): CombinedClause = {
    CombinedClause(
      func(selectClause).asInstanceOf[SelectClause],
      fromClauseOpt.map(func(_).asInstanceOf[FromClause]),
      tails.map(func(_).asInstanceOf[ClauseExpression]))
  }
}

case class ProfilingClause(
    selectClause: SelectClause,
    fromClauseOpt: Option[FromClause],
    groupbyClauseOpt: Option[GroupbyClause],
    preGroupbyClauses: Seq[ClauseExpression],
    postGroupbyClauses: Seq[ClauseExpression])
    extends ClauseExpression {
  addChildren({
    val headClauses: Seq[ClauseExpression] = selectClause +: fromClauseOpt.toSeq
    groupbyClauseOpt match {
      case Some(gc) => (headClauses ++ preGroupbyClauses) ++ (gc +: postGroupbyClauses)
      case _ => (headClauses ++ preGroupbyClauses) ++ postGroupbyClauses
    }
  })

  def desc: String = {
    val selectDesc = selectClause.desc
    val fromDesc = fromClauseOpt.map(_.desc).mkString(" ")
    val groupbyDesc = groupbyClauseOpt.map(_.desc).mkString(" ")
    val preDesc = preGroupbyClauses.map(_.desc).mkString(" ")
    val postDesc = postGroupbyClauses.map(_.desc).mkString(" ")
    s"$selectDesc $fromDesc $preDesc $groupbyDesc $postDesc"
  }
  def coalesceDesc: String = {
    val selectDesc = selectClause.coalesceDesc
    val fromDesc = fromClauseOpt.map(_.coalesceDesc).mkString(" ")
    val groupbyDesc = groupbyClauseOpt.map(_.coalesceDesc).mkString(" ")
    val preDesc = preGroupbyClauses.map(_.coalesceDesc).mkString(" ")
    val postDesc = postGroupbyClauses.map(_.coalesceDesc).mkString(" ")
    s"$selectDesc $fromDesc $preDesc $groupbyDesc $postDesc"
  }

  override def map(func: Expr => Expr): ProfilingClause = {
    ProfilingClause(
      func(selectClause).asInstanceOf[SelectClause],
      fromClauseOpt.map(func(_).asInstanceOf[FromClause]),
      groupbyClauseOpt.map(func(_).asInstanceOf[GroupbyClause]),
      preGroupbyClauses.map(func(_).asInstanceOf[ClauseExpression]),
      postGroupbyClauses.map(func(_).asInstanceOf[ClauseExpression]))
  }
}

case class UniquenessClause(exprs: Seq[Expr]) extends ClauseExpression {
  addChildren(exprs)

  def desc: String = exprs.map(_.desc).mkString(", ")
  def coalesceDesc: String = exprs.map(_.coalesceDesc).mkString(", ")
  override def map(func: Expr => Expr): UniquenessClause = UniquenessClause(exprs.map(func(_)))
}

case class DistinctnessClause(exprs: Seq[Expr]) extends ClauseExpression {
  addChildren(exprs)

  def desc: String = exprs.map(_.desc).mkString(", ")
  def coalesceDesc: String = exprs.map(_.coalesceDesc).mkString(", ")
  override def map(func: Expr => Expr): DistinctnessClause =
    DistinctnessClause(exprs.map(func(_)))
}

case class TimelinessClause(exprs: Seq[Expr]) extends ClauseExpression {
  addChildren(exprs)

  def desc: String = exprs.map(_.desc).mkString(", ")
  def coalesceDesc: String = exprs.map(_.coalesceDesc).mkString(", ")
  override def map(func: Expr => Expr): TimelinessClause = TimelinessClause(exprs.map(func(_)))
}

case class CompletenessClause(exprs: Seq[Expr]) extends ClauseExpression {
  addChildren(exprs)

  def desc: String = exprs.map(_.desc).mkString(", ")
  def coalesceDesc: String = exprs.map(_.coalesceDesc).mkString(", ")
  override def map(func: Expr => Expr): CompletenessClause =
    CompletenessClause(exprs.map(func(_)))
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

/**
 * expr parsed by griffin dsl
 */
trait Expr extends TreeNode with ExprTag with Serializable {

  def desc: String

  def coalesceDesc: String

  def extractSelf: Expr = this

  // execution
  def map(func: Expr => Expr): Expr = func(this)

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait ExprTag { this: Expr =>
  var tag: String = ""
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

case class ExtraConditionExpr(cdtn: String) extends Expr {

  def desc: String = cdtn.toUpperCase

  def coalesceDesc: String = desc

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

case class FunctionExpr(
    functionName: String,
    args: Seq[Expr],
    extraConditionOpt: Option[ExtraConditionExpr],
    aliasOpt: Option[String])
    extends Expr
    with AliasableExpr {

  addChildren(args)

  def desc: String = {
    extraConditionOpt match {
      case Some(cdtn) => s"$functionName(${cdtn.desc} ${args.map(_.desc).mkString(", ")})"
      case _ => s"$functionName(${args.map(_.desc).mkString(", ")})"
    }
  }
  def coalesceDesc: String = desc
  def alias: Option[String] = {
    if (aliasOpt.isEmpty) {
      Some(functionName)
    } else aliasOpt
  }

  override def map(func: Expr => Expr): FunctionExpr = {
    FunctionExpr(
      functionName,
      args.map(func(_)),
      extraConditionOpt.map(func(_).asInstanceOf[ExtraConditionExpr]),
      aliasOpt)
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

import com.hsbc.gbm.bd.clm.measure.utils.TimeUtil

trait LiteralExpr extends Expr {
  def coalesceDesc: String = desc
}

case class LiteralNullExpr(str: String) extends LiteralExpr {
  def desc: String = "NULL"
}

case class LiteralNanExpr(str: String) extends LiteralExpr {
  def desc: String = "NaN"
}

case class LiteralStringExpr(str: String) extends LiteralExpr {
  def desc: String = str
}

case class LiteralNumberExpr(str: String) extends LiteralExpr {
  def desc: String = {
    try {
      if (str.contains(".")) {
        str.toDouble.toString
      } else {
        str.toLong.toString
      }
    } catch {
      case _: Throwable => throw new Exception(s"$str is invalid number")
    }
  }
}

case class LiteralTimeExpr(str: String) extends LiteralExpr {
  def desc: String = {
    TimeUtil.milliseconds(str) match {
      case Some(t) => t.toString
      case _ => throw new Exception(s"$str is invalid time")
    }
  }
}

case class LiteralBooleanExpr(str: String) extends LiteralExpr {
  final val TrueRegex = """(?i)true""".r
  final val FalseRegex = """(?i)false""".r
  def desc: String = {
    str match {
      case TrueRegex() => true.toString
      case FalseRegex() => false.toString
      case _ => throw new Exception(s"$str is invalid boolean")
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait LogicalExpr extends Expr {}

case class InExpr(head: Expr, is: Boolean, range: Seq[Expr]) extends LogicalExpr {

  addChildren(head +: range)

  def desc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.desc}$notStr IN (${range.map(_.desc).mkString(", ")})"
  }
  def coalesceDesc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.coalesceDesc}$notStr IN (${range.map(_.coalesceDesc).mkString(", ")})"
  }

  override def map(func: Expr => Expr): InExpr = {
    InExpr(func(head), is, range.map(func(_)))
  }
}

case class BetweenExpr(head: Expr, is: Boolean, range: Seq[Expr]) extends LogicalExpr {

  range match {
    case first :: second :: _ => addChildren(head :: first :: second :: Nil)
    case _ => throw new Exception("between expression exception: range less than 2")
  }

  def desc: String = {
    val notStr = if (is) "" else " NOT"
    val rangeStr = range match {
      case first :: second :: _ => s"${first.desc} AND ${second.desc}"
      case _ => throw new Exception("between expression exception: range less than 2")
    }
    s"${head.desc}$notStr BETWEEN $rangeStr"
  }
  def coalesceDesc: String = {
    val notStr = if (is) "" else " NOT"
    val rangeStr = range match {
      case first :: second :: _ => s"${first.coalesceDesc} AND ${second.coalesceDesc}"
      case _ => throw new Exception("between expression exception: range less than 2")
    }
    s"${head.coalesceDesc}$notStr BETWEEN $rangeStr"
  }

  override def map(func: Expr => Expr): BetweenExpr = {
    BetweenExpr(func(head), is, range.map(func(_)))
  }
}

case class LikeExpr(head: Expr, is: Boolean, value: Expr) extends LogicalExpr {

  addChildren(head :: value :: Nil)

  def desc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.desc}$notStr LIKE ${value.desc}"
  }
  def coalesceDesc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.coalesceDesc}$notStr LIKE ${value.coalesceDesc}"
  }

  override def map(func: Expr => Expr): LikeExpr = {
    LikeExpr(func(head), is, func(value))
  }
}

case class RLikeExpr(head: Expr, is: Boolean, value: Expr) extends LogicalExpr {

  addChildren(head :: value :: Nil)

  def desc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.desc}$notStr RLIKE ${value.desc}"
  }
  def coalesceDesc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.coalesceDesc}$notStr RLIKE ${value.coalesceDesc}"
  }

  override def map(func: Expr => Expr): RLikeExpr = {
    RLikeExpr(func(head), is, func(value))
  }
}

case class IsNullExpr(head: Expr, is: Boolean) extends LogicalExpr {

  addChild(head)

  def desc: String = {
    val notStr = if (is) "" else " NOT"
    s"${head.desc} IS$notStr NULL"
  }
  def coalesceDesc: String = desc

  override def map(func: Expr => Expr): IsNullExpr = {
    IsNullExpr(func(head), is)
  }
}

case class IsNanExpr(head: Expr, is: Boolean) extends LogicalExpr {

  addChild(head)

  def desc: String = {
    val notStr = if (is) "" else "NOT "
    s"${notStr}isnan(${head.desc})"
  }
  def coalesceDesc: String = desc

  override def map(func: Expr => Expr): IsNanExpr = {
    IsNanExpr(func(head), is)
  }
}

// -----------

case class LogicalFactorExpr(factor: Expr, withBracket: Boolean, aliasOpt: Option[String])
    extends LogicalExpr
    with AliasableExpr {

  addChild(factor)

  def desc: String = if (withBracket) s"(${factor.desc})" else factor.desc
  def coalesceDesc: String = factor.coalesceDesc
  def alias: Option[String] = aliasOpt
  override def extractSelf: Expr = {
    if (aliasOpt.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): LogicalFactorExpr = {
    LogicalFactorExpr(func(factor), withBracket, aliasOpt)
  }
}

case class UnaryLogicalExpr(oprs: Seq[String], factor: LogicalExpr) extends LogicalExpr {

  addChild(factor)

  def desc: String = {
    oprs.foldRight(factor.desc) { (opr, fac) =>
      s"(${trans(opr)} $fac)"
    }
  }
  def coalesceDesc: String = {
    oprs.foldRight(factor.coalesceDesc) { (opr, fac) =>
      s"(${trans(opr)} $fac)"
    }
  }
  private def trans(s: String): String = {
    s match {
      case "!" => "NOT"
      case _ => s.toUpperCase
    }
  }
  override def extractSelf: Expr = {
    if (oprs.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): UnaryLogicalExpr = {
    UnaryLogicalExpr(oprs, func(factor).asInstanceOf[LogicalExpr])
  }
}

case class BinaryLogicalExpr(factor: LogicalExpr, tails: Seq[(String, LogicalExpr)])
    extends LogicalExpr {

  addChildren(factor +: tails.map(_._2))

  def desc: String = {
    val res = tails.foldLeft(factor.desc) { (fac, tail) =>
      val (opr, expr) = tail
      s"$fac ${trans(opr)} ${expr.desc}"
    }
    if (tails.size <= 0) res else s"$res"
  }
  def coalesceDesc: String = {
    val res = tails.foldLeft(factor.coalesceDesc) { (fac, tail) =>
      val (opr, expr) = tail
      s"$fac ${trans(opr)} ${expr.coalesceDesc}"
    }
    if (tails.size <= 0) res else s"$res"
  }
  private def trans(s: String): String = {
    s match {
      case "&&" => "AND"
      case "||" => "OR"
      case _ => s.trim.toUpperCase
    }
  }
  override def extractSelf: Expr = {
    if (tails.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): BinaryLogicalExpr = {
    BinaryLogicalExpr(func(factor).asInstanceOf[LogicalExpr], tails.map { pair =>
      (pair._1, func(pair._2).asInstanceOf[LogicalExpr])
    })
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait MathExpr extends Expr {}

case class MathFactorExpr(factor: Expr, withBracket: Boolean, aliasOpt: Option[String])
    extends MathExpr
    with AliasableExpr {

  addChild(factor)

  def desc: String = if (withBracket) s"(${factor.desc})" else factor.desc
  def coalesceDesc: String = factor.coalesceDesc
  def alias: Option[String] = aliasOpt
  override def extractSelf: Expr = {
    if (aliasOpt.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): MathFactorExpr = {
    MathFactorExpr(func(factor), withBracket, aliasOpt)
  }
}

case class UnaryMathExpr(oprs: Seq[String], factor: MathExpr) extends MathExpr {

  addChild(factor)

  def desc: String = {
    oprs.foldRight(factor.desc) { (opr, fac) =>
      s"($opr$fac)"
    }
  }
  def coalesceDesc: String = {
    oprs.foldRight(factor.coalesceDesc) { (opr, fac) =>
      s"($opr$fac)"
    }
  }
  override def extractSelf: Expr = {
    if (oprs.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): UnaryMathExpr = {
    UnaryMathExpr(oprs, func(factor).asInstanceOf[MathExpr])
  }
}

case class BinaryMathExpr(factor: MathExpr, tails: Seq[(String, MathExpr)]) extends MathExpr {

  addChildren(factor +: tails.map(_._2))

  def desc: String = {
    val res = tails.foldLeft(factor.desc) { (fac, tail) =>
      val (opr, expr) = tail
      s"$fac $opr ${expr.desc}"
    }
    if (tails.size <= 0) res else s"$res"
  }
  def coalesceDesc: String = {
    val res = tails.foldLeft(factor.coalesceDesc) { (fac, tail) =>
      val (opr, expr) = tail
      s"$fac $opr ${expr.coalesceDesc}"
    }
    if (tails.size <= 0) res else s"$res"
  }
  override def extractSelf: Expr = {
    if (tails.nonEmpty) this
    else factor.extractSelf
  }

  override def map(func: Expr => Expr): BinaryMathExpr = {
    BinaryMathExpr(func(factor).asInstanceOf[MathExpr], tails.map { pair =>
      (pair._1, func(pair._2).asInstanceOf[MathExpr])
    })
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

trait HeadExpr extends Expr with AliasableExpr {
  def alias: Option[String] = None
}

case class DataSourceHeadExpr(name: String) extends HeadExpr {
  def desc: String = s"`$name`"
  def coalesceDesc: String = desc
}

case class FieldNameHeadExpr(field: String) extends HeadExpr {
  def desc: String = s"`$field`"
  def coalesceDesc: String = desc
  override def alias: Option[String] = Some(field)
}

case class AllSelectHeadExpr() extends HeadExpr {
  def desc: String = "*"
  def coalesceDesc: String = desc
}

case class OtherHeadExpr(expr: Expr) extends HeadExpr {

  addChild(expr)

  def desc: String = expr.desc
  def coalesceDesc: String = expr.coalesceDesc
  override def alias: Option[String] = Some(expr.desc)

  override def map(func: Expr => Expr): OtherHeadExpr = {
    OtherHeadExpr(func(expr))
  }
}

// -------------

trait SelectExpr extends Expr with AliasableExpr {}

case class AllFieldsSelectExpr() extends SelectExpr {
  def desc: String = ".*"
  def coalesceDesc: String = desc
  def alias: Option[String] = None
}

case class FieldSelectExpr(field: String) extends SelectExpr {
  def desc: String = s".`$field`"
  def coalesceDesc: String = desc
  override def alias: Option[String] = Some(field)
}

case class IndexSelectExpr(index: Expr) extends SelectExpr {

  addChild(index)

  def desc: String = s"[${index.desc}]"
  def coalesceDesc: String = desc
  def alias: Option[String] = Some(index.desc)

  override def map(func: Expr => Expr): IndexSelectExpr = {
    IndexSelectExpr(func(index))
  }
}

case class FunctionSelectExpr(functionName: String, args: Seq[Expr]) extends SelectExpr {

  addChildren(args)

  def desc: String = ""
  def coalesceDesc: String = desc
  def alias: Option[String] = Some(functionName)

  override def map(func: Expr => Expr): FunctionSelectExpr = {
    FunctionSelectExpr(functionName, args.map(func(_)))
  }
}

// -------------

case class SelectionExpr(head: HeadExpr, selectors: Seq[SelectExpr], aliasOpt: Option[String])
    extends SelectExpr {

  addChildren(head +: selectors)

  def desc: String = {
    selectors.foldLeft(head.desc) { (hd, sel) =>
      sel match {
        case FunctionSelectExpr(funcName, args) =>
          val nargs = hd +: args.map(_.desc)
          s"$funcName(${nargs.mkString(", ")})"
        case _ => s"$hd${sel.desc}"
      }
    }
  }
  def coalesceDesc: String = {
    selectors.lastOption match {
      case None => desc
      case Some(_: FunctionSelectExpr) => desc
      case _ => s"coalesce($desc, '')"
    }
  }
  def alias: Option[String] = {
    if (aliasOpt.isEmpty) {
      val aliasSeq = (head +: selectors).flatMap(_.alias)
      if (aliasSeq.nonEmpty) Some(aliasSeq.mkString("_")) else None
    } else aliasOpt
  }

  override def map(func: Expr => Expr): SelectionExpr = {
    SelectionExpr(
      func(head).asInstanceOf[HeadExpr],
      selectors.map(func(_).asInstanceOf[SelectExpr]),
      aliasOpt)
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr

import scala.reflect.ClassTag

trait TreeNode extends Serializable {

  var children: Seq[TreeNode] = Seq[TreeNode]()

  def addChild(expr: TreeNode): Unit = { children :+= expr }
  def addChildren(exprs: Seq[TreeNode]): Unit = { children ++= exprs }

  def preOrderTraverseDepthFirst[T, A <: TreeNode](z: T)(seqOp: (A, T) => T, combOp: (T, T) => T)(
      implicit tag: ClassTag[A]): T = {

    val clazz = tag.runtimeClass
    if (clazz.isAssignableFrom(this.getClass)) {
      val tv = seqOp(this.asInstanceOf[A], z)
      children.foldLeft(combOp(z, tv)) { (ov, tn) =>
        combOp(ov, tn.preOrderTraverseDepthFirst(z)(seqOp, combOp))
      }
    } else {
      z
    }

  }
  def postOrderTraverseDepthFirst[T, A <: TreeNode](
      z: T)(seqOp: (A, T) => T, combOp: (T, T) => T)(implicit tag: ClassTag[A]): T = {

    val clazz = tag.runtimeClass
    if (clazz.isAssignableFrom(this.getClass)) {
      val cv = children.foldLeft(z) { (ov, tn) =>
        combOp(ov, tn.postOrderTraverseDepthFirst(z)(seqOp, combOp))
      }
      combOp(z, seqOp(this.asInstanceOf[A], cv))
    } else {
      z
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/dsl/parser: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.parser

import scala.util.parsing.combinator.JavaTokenParsers

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

/**
 * basic parser for sql like syntax
 */
trait BasicParser extends JavaTokenParsers with Serializable {

  val dataSourceNames: Seq[String]
  val functionNames: Seq[String]

  private def trim(str: String): String = {
    val regex = """`(.*)`""".r
    str match {
      case regex(s) => s
      case _ => str
    }
  }

  // scalastyle:off
  /**
   * BNF for basic parser
   *
   * -- literal --
   * <literal> ::= <literal-string> | <literal-number> | <literal-time> | <literal-boolean> | <literal-null> | <literal-nan>
   * <literal-string> ::= <any-string>
   * <literal-number> ::= <integer> | <double>
   * <literal-time> ::= <integer> ("d"|"h"|"m"|"s"|"ms")
   * <literal-boolean> ::= true | false
   * <literal-null> ::= null
   * <literal-nan> ::= nan
   *
   * -- selection --
   * <selection> ::= <selection-head> [ <field-sel> | <index-sel> | <function-sel> ]* [<as-alias>]?
   * <selection-head> ::= ("data source name registered") | <function> | <field-name> | <all-selection>
   * <field-sel> ::= "." <field-name> | "[" <quote-field-name> "]"
   * <index-sel> ::= "[" <arg> "]"
   * <function-sel> ::= "." <function-name> "(" [<arg>]? [, <arg>]* ")"
   * <arg> ::= <math-expr>
   *
   * -- as alias --
   * <as-alias> ::= <as> <field-name>
   *
   * -- math expr --
   * <math-factor> ::= <literal> | <function> | <selection> | "(" <math-expr> ")" [<as-alias>]?
   * <unary-math-expr> ::= [<unary-opr>]* <math-factor>
   * <binary-math-expr> ::= <unary-math-expr> [<binary-opr> <unary-math-expr>]+
   * <math-expr> ::= <binary-math-expr>
   *
   * -- logical expr --
   * <in-expr> ::= <math-expr> [<not>]? <in> <range-expr>
   * <between-expr> ::= <math-expr> [<not>]? <between> (<math-expr> <and> <math-expr> | <range-expr>)
   * <range-expr> ::= "(" [<math-expr>]? [, <math-expr>]+ ")"
   * <like-expr> ::= <math-expr> [<not>]? <like> <math-expr>
   * <rlike-expr> ::= <math-expr> [<not>]? <rlike> <math-expr>
   * <is-null-expr> ::= <math-expr> <is> [<not>]? <null>
   * <is-nan-expr> ::= <math-expr> <is> [<not>]? <nan>
   *
   * <logical-factor> ::= <math-expr> | <in-expr> | <between-expr> | <like-expr> | <is-null-expr> | <is-nan-expr> | "(" <logical-expr> ")" [<as-alias>]?
   * <unary-logical-expr> ::= [<unary-logical-opr>]* <logical-factor>
   * <binary-logical-expr> ::= <unary-logical-expr> [<binary-logical-opr> <unary-logical-expr>]+
   * <logical-expr> ::= <binary-logical-expr>
   *
   * -- expression --
   * <expr> = <math-expr> | <logical-expr>
   *
   * -- function expr --
   * <function> ::= <function-name> "(" [<arg>] [, <arg>]+ ")" [<as-alias>]?
   * <function-name> ::= ("function name registered")
   * <arg> ::= <expr>
   *
   * -- clauses --
   * <select-clause> = <expr> [, <expr>]*
   * <where-clause> = <where> <expr>
   * <from-clause> = <from> ("data source name registered")
   * <having-clause> = <having> <expr>
   * <groupby-clause> = <group> <by> <expr> [ <having-clause> ]?
   * <orderby-item> = <expr> [ <DESC> ]?
   * <orderby-clause> = <order> <by> <orderby-item> [ , <orderby-item> ]*
   * <limit-clause> = <limit> <expr>
   *
   * -- combined clauses --
   * <combined-clauses> = <select-clause> [ <from-clause> ]+ [ <where-clause> ]+ [ <groupby-clause> ]+ [ <orderby-clause> ]+ [ <limit-clause> ]+
   */
  protected def genDataSourceNamesParser(names: Seq[String]): Parser[String] = {
    names.reverse
      .map { fn =>
        s"""(?i)`$fn`|$fn""".r: Parser[String]
      }
      .reduce(_ | _)
  }
  protected def genFunctionNamesParser(names: Seq[String]): Parser[String] = {
    names.reverse
      .map { fn =>
        s"""(?i)$fn""".r: Parser[String]
      }
      .reduce(_ | _)
  }

  object Literal {
    val NULL: Parser[String] = """(?i)null""".r
    val NAN: Parser[String] = """(?i)nan""".r
  }
  import Literal._

  object Operator {
    val MATH_UNARY: Parser[String] = "+" | "-"
    val MATH_BINARIES: Seq[Parser[String]] = Seq("*" | "/" | "%", "+" | "-")

    val NOT: Parser[String] = """(?i)not\s""".r | "!"
    val AND: Parser[String] = """(?i)and\s""".r | "&&"
    val OR: Parser[String] = """(?i)or\s""".r | "||"
    val IN: Parser[String] = """(?i)in\s""".r
    val BETWEEN: Parser[String] = """(?i)between\s""".r
    val AND_ONLY: Parser[String] = """(?i)and\s""".r
    val IS: Parser[String] = """(?i)is\s""".r
    val LIKE: Parser[String] = """(?i)like\s""".r
    val RLIKE: Parser[String] = """(?i)rlike\s""".r
    val COMPARE: Parser[String] = "=" | "!=" | "<>" | "<=" | ">=" | "<" | ">"
    val LOGICAL_UNARY: Parser[String] = NOT
    val LOGICAL_BINARIES: Seq[Parser[String]] = Seq(COMPARE, AND, OR)

    val LSQBR: Parser[String] = "["
    val RSQBR: Parser[String] = "]"
    val LBR: Parser[String] = "("
    val RBR: Parser[String] = ")"

    val DOT: Parser[String] = "."
    val ALLSL: Parser[String] = "*"
    val SQUOTE: Parser[String] = "'"
    val DQUOTE: Parser[String] = "\""
    val UQUOTE: Parser[String] = "`"
    val COMMA: Parser[String] = ","

    val SELECT: Parser[String] = """(?i)select\s""".r
    val DISTINCT: Parser[String] = """(?i)distinct""".r
//    val ALL: Parser[String] = """(?i)all""".r
    val FROM: Parser[String] = """(?i)from\s""".r
    val AS: Parser[String] = """(?i)as\s""".r
    val WHERE: Parser[String] = """(?i)where\s""".r
    val GROUP: Parser[String] = """(?i)group\s""".r
    val ORDER: Parser[String] = """(?i)order\s""".r
    val SORT: Parser[String] = """(?i)sort\s""".r
    val BY: Parser[String] = """(?i)by\s""".r
    val DESC: Parser[String] = """(?i)desc""".r
    val ASC: Parser[String] = """(?i)asc""".r
    val HAVING: Parser[String] = """(?i)having\s""".r
    val LIMIT: Parser[String] = """(?i)limit\s""".r
  }
  import Operator._

  object Strings {
    def AnyString: Parser[String] = """"(?:"|[^"])*"""".r | """'(?:'|[^'])*'""".r
    def SimpleTableFieldName: Parser[String] = """[a-zA-Z_]\w*""".r
    def UnQuoteTableFieldName: Parser[String] = """`(?:[\\][`]|[^`])*`""".r
//    def FieldName: Parser[String] = UnQuoteTableFieldName | SimpleTableFieldName
    def DataSourceName: Parser[String] = genDataSourceNamesParser(dataSourceNames)
    def FunctionName: Parser[String] = genFunctionNamesParser(functionNames)

    def IntegerNumber: Parser[String] = """[+\-]?\d+""".r
    def DoubleNumber: Parser[String] = """[+\-]?(\.\d+|\d+\.\d*)""".r
    def IndexNumber: Parser[String] = IntegerNumber

    def TimeString: Parser[String] = """([+\-]?\d+)(d|h|m|s|ms)""".r
    def BooleanString: Parser[String] = """(?i)true|false""".r
  }
  import Strings._

  /**
   * -- literal --
   * <literal> ::= <literal-string> | <literal-number> | <literal-time> | <literal-boolean> | <literal-null> | <literal-nan>
   * <literal-string> ::= <any-string>
   * <literal-number> ::= <integer> | <double>
   * <literal-time> ::= <integer> ("d"|"h"|"m"|"s"|"ms")
   * <literal-boolean> ::= true | false
   * <literal-null> ::= null
   * <literal-nan> ::= nan
   */
  def literal: Parser[LiteralExpr] =
    literalNull | literalNan | literalBoolean | literalString | literalTime | literalNumber
  def literalNull: Parser[LiteralNullExpr] = NULL ^^ { LiteralNullExpr }
  def literalNan: Parser[LiteralNanExpr] = NAN ^^ { LiteralNanExpr }
  def literalString: Parser[LiteralStringExpr] = AnyString ^^ { LiteralStringExpr }
  def literalNumber: Parser[LiteralNumberExpr] = (DoubleNumber | IntegerNumber) ^^ {
    LiteralNumberExpr
  }
  def literalTime: Parser[LiteralTimeExpr] = TimeString ^^ { LiteralTimeExpr }
  def literalBoolean: Parser[LiteralBooleanExpr] = BooleanString ^^ { LiteralBooleanExpr }

  /**
   * -- selection --
   * <selection> ::= <selection-head> [ <field-sel> | <index-sel> | <function-sel> ]* [<as-alias>]?
   * <selection-head> ::= ("data source name registered") | <function> | <field-name> | <all-selection>
   * <field-sel> ::= "." <field-name> | "[" <quote-field-name> "]"
   * <index-sel> ::= "[" <arg> "]"
   * <function-sel> ::= "." <function-name> "(" [<arg>]? [, <arg>]* ")"
   * <arg> ::= <math-expr>
   */
  def selection: Parser[SelectionExpr] = selectionHead ~ rep(selector) ~ opt(asAlias) ^^ {
    case head ~ sels ~ aliasOpt => SelectionExpr(head, sels, aliasOpt)
  }
  def selectionHead: Parser[HeadExpr] =
    DataSourceName ^^ { ds =>
      DataSourceHeadExpr(trim(ds))
    } | function ^^ {
      OtherHeadExpr(_)
    } | SimpleTableFieldName ^^ {
      FieldNameHeadExpr
    } | UnQuoteTableFieldName ^^ { s =>
      FieldNameHeadExpr(trim(s))
    } | ALLSL ^^ { _ =>
      AllSelectHeadExpr()
    }
  def selector: Parser[SelectExpr] = functionSelect | allFieldsSelect | fieldSelect | indexSelect
  def allFieldsSelect: Parser[AllFieldsSelectExpr] = DOT ~> ALLSL ^^ { _ =>
    AllFieldsSelectExpr()
  }
  def fieldSelect: Parser[FieldSelectExpr] =
    DOT ~> (SimpleTableFieldName ^^ {
      FieldSelectExpr
    } | UnQuoteTableFieldName ^^ { s =>
      FieldSelectExpr(trim(s))
    })
  def indexSelect: Parser[IndexSelectExpr] = LSQBR ~> argument <~ RSQBR ^^ { IndexSelectExpr }
  def functionSelect: Parser[FunctionSelectExpr] =
    DOT ~ FunctionName ~ LBR ~ repsep(argument, COMMA) ~ RBR ^^ {
      case _ ~ name ~ _ ~ args ~ _ => FunctionSelectExpr(name, args)
    }

  /**
   * -- as alias --
   * <as-alias> ::= <as> <field-name>
   */
  def asAlias: Parser[String] = AS ~> (SimpleTableFieldName | UnQuoteTableFieldName ^^ { trim })

  /**
   * -- math expr --
   * <math-factor> ::= <literal> | <function> | <selection> | "(" <math-expr> ")" [<as-alias>]?
   * <unary-math-expr> ::= [<unary-opr>]* <math-factor>
   * <binary-math-expr> ::= <unary-math-expr> [<binary-opr> <unary-math-expr>]+
   * <math-expr> ::= <binary-math-expr>
   */
  def mathFactor: Parser[MathExpr] =
    (literal | function | selection) ^^ {
      MathFactorExpr(_, withBracket = false, None)
    } | LBR ~ mathExpression ~ RBR ~ opt(asAlias) ^^ {
      case _ ~ expr ~ _ ~ aliasOpt => MathFactorExpr(expr, withBracket = true, aliasOpt)
    }
  def unaryMathExpression: Parser[MathExpr] = rep(MATH_UNARY) ~ mathFactor ^^ {
    case Nil ~ a => a
    case list ~ a => UnaryMathExpr(list, a)
  }
  def binaryMathExpressions: Seq[Parser[MathExpr]] =
    MATH_BINARIES.foldLeft(List[Parser[MathExpr]](unaryMathExpression)) {
      (parsers, binaryParser) =>
        val pre = parsers.headOption.orNull
        val cur = pre ~ rep(binaryParser ~ pre) ^^ {
          case a ~ Nil => a
          case a ~ list => BinaryMathExpr(a, list.map(c => (c._1, c._2)))
        }
        cur :: parsers
    }
  def mathExpression: Parser[MathExpr] = binaryMathExpressions.headOption.orNull

  /**
   * -- logical expr --
   * <in-expr> ::= <math-expr> [<not>]? <in> <range-expr>
   * <between-expr> ::= <math-expr> [<not>]? <between> (<math-expr> <and> <math-expr> | <range-expr>)
   * <range-expr> ::= "(" [<math-expr>]? [, <math-expr>]+ ")"
   * <like-expr> ::= <math-expr> [<not>]? <like> <math-expr>
   * <rlike-expr> ::= <math-expr> [<not>]? <rlike> <math-expr>
   * <is-null-expr> ::= <math-expr> <is> [<not>]? <null>
   * <is-nan-expr> ::= <math-expr> <is> [<not>]? <nan>
   *
   * <logical-factor> ::= <math-expr> | <in-expr> | <between-expr> | <like-expr> | <is-null-expr> | <is-nan-expr> | "(" <logical-expr> ")" [<as-alias>]?
   * <unary-logical-expr> ::= [<unary-logical-opr>]* <logical-factor>
   * <binary-logical-expr> ::= <unary-logical-expr> [<binary-logical-opr> <unary-logical-expr>]+
   * <logical-expr> ::= <binary-logical-expr>
   */
  def inExpr: Parser[LogicalExpr] =
    mathExpression ~ opt(NOT) ~ IN ~ LBR ~ repsep(mathExpression, COMMA) ~ RBR ^^ {
      case head ~ notOpt ~ _ ~ _ ~ list ~ _ => InExpr(head, notOpt.isEmpty, list)
    }
  def betweenExpr: Parser[LogicalExpr] =
    mathExpression ~ opt(NOT) ~ BETWEEN ~ LBR ~ repsep(mathExpression, COMMA) ~ RBR ^^ {
      case head ~ notOpt ~ _ ~ _ ~ list ~ _ => BetweenExpr(head, notOpt.isEmpty, list)
    } | mathExpression ~ opt(NOT) ~ BETWEEN ~ mathExpression ~ AND_ONLY ~ mathExpression ^^ {
      case head ~ notOpt ~ _ ~ first ~ _ ~ second =>
        BetweenExpr(head, notOpt.isEmpty, Seq(first, second))
    }
  def likeExpr: Parser[LogicalExpr] = mathExpression ~ opt(NOT) ~ LIKE ~ mathExpression ^^ {
    case head ~ notOpt ~ _ ~ value => LikeExpr(head, notOpt.isEmpty, value)
  }
  def rlikeExpr: Parser[LogicalExpr] = mathExpression ~ opt(NOT) ~ RLIKE ~ mathExpression ^^ {
    case head ~ notOpt ~ _ ~ value => RLikeExpr(head, notOpt.isEmpty, value)
  }
  def isNullExpr: Parser[LogicalExpr] = mathExpression ~ IS ~ opt(NOT) ~ NULL ^^ {
    case head ~ _ ~ notOpt ~ _ => IsNullExpr(head, notOpt.isEmpty)
  }
  def isNanExpr: Parser[LogicalExpr] = mathExpression ~ IS ~ opt(NOT) ~ NAN ^^ {
    case head ~ _ ~ notOpt ~ _ => IsNanExpr(head, notOpt.isEmpty)
  }

  def logicalFactor: Parser[LogicalExpr] =
    (inExpr | betweenExpr | likeExpr | rlikeExpr | isNullExpr | isNanExpr | mathExpression) ^^ {
      LogicalFactorExpr(_, withBracket = false, None)
    } | LBR ~ logicalExpression ~ RBR ~ opt(asAlias) ^^ {
      case _ ~ expr ~ _ ~ aliasOpt => LogicalFactorExpr(expr, withBracket = true, aliasOpt)
    }
  def unaryLogicalExpression: Parser[LogicalExpr] = rep(LOGICAL_UNARY) ~ logicalFactor ^^ {
    case Nil ~ a => a
    case list ~ a => UnaryLogicalExpr(list, a)
  }
  def binaryLogicalExpressions: Seq[Parser[LogicalExpr]] =
    LOGICAL_BINARIES.foldLeft(List[Parser[LogicalExpr]](unaryLogicalExpression)) {
      (parsers, binaryParser) =>
        val pre = parsers.headOption.orNull
        val cur = pre ~ rep(binaryParser ~ pre) ^^ {
          case a ~ Nil => a
          case a ~ list => BinaryLogicalExpr(a, list.map(c => (c._1, c._2)))
        }
        cur :: parsers
    }
  def logicalExpression: Parser[LogicalExpr] = binaryLogicalExpressions.headOption.orNull

  /**
   * -- expression --
   * <expr> = <math-expr> | <logical-expr>
   */
  def expression: Parser[Expr] = logicalExpression | mathExpression

  /**
   * -- function expr --
   * <function> ::= <function-name> "(" [<arg>] [, <arg>]+ ")" [<as-alias>]?
   * <function-name> ::= ("function name registered")
   * <arg> ::= <expr>
   */
  def function: Parser[FunctionExpr] =
    FunctionName ~ LBR ~ opt(DISTINCT) ~ repsep(argument, COMMA) ~ RBR ~ opt(asAlias) ^^ {
      case name ~ _ ~ extraCdtnOpt ~ args ~ _ ~ aliasOpt =>
        FunctionExpr(name, args, extraCdtnOpt.map(ExtraConditionExpr), aliasOpt)
    }
  def argument: Parser[Expr] = expression

  /**
   * -- clauses --
   * <select-clause> = <expr> [, <expr>]*
   * <where-clause> = <where> <expr>
   * <from-clause> = <from> ("data source name registered")
   * <having-clause> = <having> <expr>
   * <groupby-clause> = <group> <by> <expr> [ <having-clause> ]?
   * <orderby-item> = <expr> [ <DESC> ]?
   * <orderby-clause> = <order> <by> <orderby-item> [ , <orderby-item> ]*
   * <limit-clause> = <limit> <expr>
   */
  def selectClause: Parser[SelectClause] =
    opt(SELECT) ~> opt(DISTINCT) ~ rep1sep(expression, COMMA) ^^ {
      case extraCdtnOpt ~ exprs => SelectClause(exprs, extraCdtnOpt.map(ExtraConditionExpr))
    }
  def fromClause: Parser[FromClause] = FROM ~> DataSourceName ^^ { ds =>
    FromClause(trim(ds))
  }
  def whereClause: Parser[WhereClause] = WHERE ~> expression ^^ { WhereClause }
  def havingClause: Parser[Expr] = HAVING ~> expression
  def groupbyClause: Parser[GroupbyClause] =
    GROUP ~ BY ~ rep1sep(expression, COMMA) ~ opt(havingClause) ^^ {
      case _ ~ _ ~ cols ~ havingOpt => GroupbyClause(cols, havingOpt)
    }
  def orderItem: Parser[OrderItem] = expression ~ opt(DESC | ASC) ^^ {
    case expr ~ orderOpt => OrderItem(expr, orderOpt)
  }
  def orderbyClause: Parser[OrderbyClause] = ORDER ~ BY ~ rep1sep(orderItem, COMMA) ^^ {
    case _ ~ _ ~ cols => OrderbyClause(cols)
  }
  def sortbyClause: Parser[SortbyClause] = SORT ~ BY ~ rep1sep(orderItem, COMMA) ^^ {
    case _ ~ _ ~ cols => SortbyClause(cols)
  }
  def limitClause: Parser[LimitClause] = LIMIT ~> expression ^^ { LimitClause }

  /**
   * -- combined clauses --
   * <combined-clauses> = <select-clause> [ <from-clause> ]+ [ <where-clause> ]+ [ <groupby-clause> ]+ [ <orderby-clause> ]+ [ <limit-clause> ]+
   */
  def combinedClause: Parser[CombinedClause] =
    selectClause ~ opt(fromClause) ~ opt(whereClause) ~
      opt(groupbyClause) ~ opt(orderbyClause) ~ opt(limitClause) ^^ {
      case sel ~ fromOpt ~ whereOpt ~ groupbyOpt ~ orderbyOpt ~ limitOpt =>
        val tails = Seq(whereOpt, groupbyOpt, orderbyOpt, limitOpt).flatten
        CombinedClause(sel, fromOpt, tails)
    }
  // scalastyle:on
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.parser

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.{ProfilingClause, UniquenessClause}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DqType._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

/**
 * parser for griffin dsl rule
 */
case class GriffinDslParser(dataSourceNames: Seq[String], functionNames: Seq[String])
    extends BasicParser {

  import Operator._

  /**
   * -- profiling clauses --
   * <profiling-clauses> = <select-clause> [ <from-clause> ]+ [ <where-clause> ]+
   *  [ <groupby-clause> ]+ [ <orderby-clause> ]+ [ <limit-clause> ]+
   */
  def profilingClause: Parser[ProfilingClause] =
    selectClause ~ opt(fromClause) ~ opt(whereClause) ~
      opt(groupbyClause) ~ opt(orderbyClause) ~ opt(limitClause) ^^ {
      case sel ~ fromOpt ~ whereOpt ~ groupbyOpt ~ orderbyOpt ~ limitOpt =>
        val preClauses = Seq(whereOpt).flatten
        val postClauses = Seq(orderbyOpt, limitOpt).flatten
        ProfilingClause(sel, fromOpt, groupbyOpt, preClauses, postClauses)
    }

  /**
   * -- uniqueness clauses --
   * <uniqueness-clauses> = <expr> [, <expr>]+
   */
  def uniquenessClause: Parser[UniquenessClause] =
    rep1sep(expression, Operator.COMMA) ^^ (exprs => UniquenessClause(exprs))

  /**
   * -- distinctness clauses --
   * <sqbr-expr> = "[" <expr> "]"
   * <dist-expr> = <sqbr-expr> | <expr>
   * <distinctness-clauses> = <distExpr> [, <distExpr>]+
   */
  def sqbrExpr: Parser[Expr] = LSQBR ~> expression <~ RSQBR ^^ { expr =>
    expr.tag = "[]"; expr
  }
  def distExpr: Parser[Expr] = expression | sqbrExpr
  def distinctnessClause: Parser[DistinctnessClause] =
    rep1sep(distExpr, Operator.COMMA) ^^ (exprs => DistinctnessClause(exprs))

  /**
   * -- timeliness clauses --
   * <timeliness-clauses> = <expr> [, <expr>]+
   */
  def timelinessClause: Parser[TimelinessClause] =
    rep1sep(expression, Operator.COMMA) ^^ (exprs => TimelinessClause(exprs))

  /**
   * -- completeness clauses --
   * <completeness-clauses> = <expr> [, <expr>]+
   */
  def completenessClause: Parser[CompletenessClause] =
    rep1sep(expression, Operator.COMMA) ^^ (exprs => CompletenessClause(exprs))

  def parseRule(rule: String, dqType: DqType): ParseResult[Expr] = {
    val rootExpr = dqType match {
      case Accuracy => logicalExpression
      case Profiling => profilingClause
      case Uniqueness => uniquenessClause
      case Distinct => distinctnessClause
      case Timeliness => timelinessClause
      case Completeness => completenessClause
      case _ => expression
    }
    parseAll(rootExpr, rule)
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/dsl/transform: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.DefaultFlattenType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.AccuracyAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.{DataFrameOps, DataFrameOpsTransformStep, SparkSqlTransformStep}
import com.hsbc.gbm.bd.clm.measure.step.transform.DataFrameOps.AccuracyOprKeys
import com.hsbc.gbm.bd.clm.measure.step.write.{DataSourceUpdateWriteStep, MetricWriteStep, RecordWriteStep}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * generate accuracy dq steps
 */
case class AccuracyExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
    extends Expr2DQSteps {

  private object AccuracyKeys {
    val _source = "source"
    val _target = "target"
    val _miss = "miss"
    val _total = "total"
    val _matched = "matched"
    val _matchedFraction = "matchedFraction"
  }
  import AccuracyKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val accuracyExpr = expr.asInstanceOf[LogicalExpr]

    val sourceName = details.getString(_source, context.getDataSourceName(0))
    val targetName = details.getString(_target, context.getDataSourceName(1))
    val analyzer = AccuracyAnalyzer(accuracyExpr, sourceName, targetName)

    val procType = context.procType
    val timestamp = context.contextId.timestamp

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else {
      // 1. miss record
      val missRecordsTableName = "__missRecords"
      val selClause = s"`$sourceName`.*"
      val missRecordsSql =
        if (!context.runTimeTableRegister.existsTable(targetName)) {
          warn(s"[$timestamp] data source $targetName not exists")
          s"SELECT $selClause FROM `$sourceName`"
        } else {
          val onClause = expr.coalesceDesc
          val sourceIsNull = analyzer.sourceSelectionExprs
            .map { sel =>
              s"${sel.desc} IS NULL"
            }
            .mkString(" AND ")
          val targetIsNull = analyzer.targetSelectionExprs
            .map { sel =>
              s"${sel.desc} IS NULL"
            }
            .mkString(" AND ")
          val whereClause = s"(NOT ($sourceIsNull)) AND ($targetIsNull)"
          s"SELECT $selClause FROM `$sourceName` " +
            s"LEFT JOIN `$targetName` ON $onClause WHERE $whereClause"
        }

      val missRecordsWriteSteps = procType match {
        case BatchProcessType =>
          RecordWriteStep(ruleParam.getOutDfName(), missRecordsTableName)
        case StreamingProcessType =>
          val dsName =
            ruleParam
              .getOutputOpt(DscUpdateOutputType)
              .flatMap(_.getNameOpt)
              .getOrElse(sourceName)
          DataSourceUpdateWriteStep(dsName, missRecordsTableName)
      }

      val missRecordsTransStep =
        SparkSqlTransformStep(
          missRecordsTableName,
          missRecordsSql,
          emptyMap,
          Some(missRecordsWriteSteps),
          cache = true)

      // 2. miss count
      val missCountTableName = "__missCount"
      val missColName = details.getStringOrKey(_miss)
      val missCountSql = procType match {
        case BatchProcessType =>
          s"SELECT COUNT(*) AS `$missColName` FROM `$missRecordsTableName`"
        case StreamingProcessType =>
          s"SELECT `${ConstantColumns.tmst}`,COUNT(*) AS `$missColName` " +
            s"FROM `$missRecordsTableName` GROUP BY `${ConstantColumns.tmst}`"
      }
      val missCountTransStep =
        SparkSqlTransformStep(missCountTableName, missCountSql, emptyMap)
      missCountTransStep.parentSteps += missRecordsTransStep

      // 3. total count
      val totalCountTableName = "__totalCount"
      val totalColName = details.getStringOrKey(_total)
      val totalCountSql = procType match {
        case BatchProcessType =>
          s"SELECT COUNT(*) AS `$totalColName` FROM `$sourceName`"
        case StreamingProcessType =>
          s"SELECT `${ConstantColumns.tmst}`, COUNT(*) AS `$totalColName` " +
            s"FROM `$sourceName` GROUP BY `${ConstantColumns.tmst}`"
      }
      val totalCountTransStep =
        SparkSqlTransformStep(totalCountTableName, totalCountSql, emptyMap)

      // 4. accuracy metric
      val accuracyTableName = ruleParam.getOutDfName()
      val matchedColName = details.getStringOrKey(_matched)
      val matchedFractionColName = details.getStringOrKey(_matchedFraction)
      val accuracyMetricSql = procType match {
        case BatchProcessType =>
          s"""
             SELECT A.total AS `$totalColName`,
                    A.miss AS `$missColName`,
                    (A.total - A.miss) AS `$matchedColName`,
                    coalesce( (A.total - A.miss) / A.total, 1.0) AS `$matchedFractionColName`
             FROM (
               SELECT `$totalCountTableName`.`$totalColName` AS total,
                      coalesce(`$missCountTableName`.`$missColName`, 0) AS miss
               FROM `$totalCountTableName` LEFT JOIN `$missCountTableName`
             ) AS A
         """
        case StreamingProcessType =>
          // scalastyle:off
          s"""
             |SELECT `$totalCountTableName`.`${ConstantColumns.tmst}` AS `${ConstantColumns.tmst}`,
             |`$totalCountTableName`.`$totalColName` AS `$totalColName`,
             |coalesce(`$missCountTableName`.`$missColName`, 0) AS `$missColName`,
             |(`$totalCountTableName`.`$totalColName` - coalesce(`$missCountTableName`.`$missColName`, 0)) AS `$matchedColName`
             |FROM `$totalCountTableName` LEFT JOIN `$missCountTableName`
             |ON `$totalCountTableName`.`${ConstantColumns.tmst}` = `$missCountTableName`.`${ConstantColumns.tmst}`
         """.stripMargin
        // scalastyle:on
      }

      val accuracyMetricWriteStep = procType match {
        case BatchProcessType =>
          val metricOpt = ruleParam.getOutputOpt(MetricOutputType)
          val mwName =
            metricOpt.flatMap(_.getNameOpt).getOrElse(ruleParam.getOutDfName())
          val flattenType = metricOpt
            .map(_.getFlatten)
            .getOrElse(DefaultFlattenType)
          Some(MetricWriteStep(mwName, accuracyTableName, flattenType))
        case StreamingProcessType => None
      }

      val accuracyTransStep =
        SparkSqlTransformStep(
          accuracyTableName,
          accuracyMetricSql,
          emptyMap,
          accuracyMetricWriteStep)
      accuracyTransStep.parentSteps += missCountTransStep
      accuracyTransStep.parentSteps += totalCountTransStep

      procType match {
        case BatchProcessType => accuracyTransStep :: Nil
        // streaming extra steps
        case StreamingProcessType =>
          // 5. accuracy metric merge
          val accuracyMetricTableName = "__accuracy"
          val accuracyMetricRule = DataFrameOps._accuracy
          val accuracyMetricDetails: Map[String, Any] = Map(
            (AccuracyOprKeys._miss, missColName),
            (AccuracyOprKeys._total, totalColName),
            (AccuracyOprKeys._matched, matchedColName))
          val accuracyMetricWriteStep = {
            val metricOpt = ruleParam.getOutputOpt(MetricOutputType)
            val mwName = metricOpt
              .flatMap(_.getNameOpt)
              .getOrElse(ruleParam.getOutDfName())
            val flattenType = metricOpt
              .map(_.getFlatten)
              .getOrElse(DefaultFlattenType)
            MetricWriteStep(mwName, accuracyMetricTableName, flattenType)
          }
          val accuracyMetricTransStep = DataFrameOpsTransformStep(
            accuracyMetricTableName,
            accuracyTableName,
            accuracyMetricRule,
            accuracyMetricDetails,
            Some(accuracyMetricWriteStep))
          accuracyMetricTransStep.parentSteps += accuracyTransStep

          // 6. collect accuracy records
          val accuracyRecordTableName = "__accuracyRecords"
          val accuracyRecordSql = {
            s"""
               |SELECT `${ConstantColumns.tmst}`, `${ConstantColumns.empty}`
               |FROM `$accuracyMetricTableName` WHERE `${ConstantColumns.record}`
             """.stripMargin
          }

          val accuracyRecordWriteStep = {
            val rwName =
              ruleParam
                .getOutputOpt(RecordOutputType)
                .flatMap(_.getNameOpt)
                .getOrElse(missRecordsTableName)

            RecordWriteStep(rwName, missRecordsTableName, Some(accuracyRecordTableName))
          }
          val accuracyRecordTransStep = SparkSqlTransformStep(
            accuracyRecordTableName,
            accuracyRecordSql,
            emptyMap,
            Some(accuracyRecordWriteStep))
          accuracyRecordTransStep.parentSteps += accuracyMetricTransStep

          accuracyRecordTransStep :: Nil
      }
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/dsl/transform/analyzer: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class AccuracyAnalyzer(expr: LogicalExpr, sourceName: String, targetName: String)
    extends BasicAnalyzer {

  val dataSourceNames: Set[String] =
    expr.preOrderTraverseDepthFirst(Set[String]())(seqDataSourceNames, combDataSourceNames)

  val sourceSelectionExprs: Seq[SelectionExpr] = {
    val seq = seqSelectionExprs(sourceName)
    expr.preOrderTraverseDepthFirst(Seq[SelectionExpr]())(seq, combSelectionExprs)
  }
  val targetSelectionExprs: Seq[SelectionExpr] = {
    val seq = seqSelectionExprs(targetName)
    expr.preOrderTraverseDepthFirst(Seq[SelectionExpr]())(seq, combSelectionExprs)
  }

  val selectionExprs: Seq[AliasableExpr] = sourceSelectionExprs ++ {
    expr.preOrderTraverseDepthFirst(Seq[AliasableExpr]())(seqWithAliasExprs, combWithAliasExprs)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.{DataSourceHeadExpr, SelectionExpr}
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

/**
 * analyzer of expr, to help generate dq steps by expr
 */
trait BasicAnalyzer extends Serializable {

  val expr: Expr

  val seqDataSourceNames: (Expr, Set[String]) => Set[String] = (expr: Expr, v: Set[String]) => {
    expr match {
      case DataSourceHeadExpr(name) => v + name
      case _ => v
    }
  }
  val combDataSourceNames: (Set[String], Set[String]) => Set[String] =
    (a: Set[String], b: Set[String]) => a ++ b

  val seqSelectionExprs: String => (Expr, Seq[SelectionExpr]) => Seq[SelectionExpr] =
    (dsName: String) =>
      (expr: Expr, v: Seq[SelectionExpr]) => {
        expr match {
          case se @ SelectionExpr(head: DataSourceHeadExpr, _, _) if head.name == dsName =>
            v :+ se
          case _ => v
        }
    }
  val combSelectionExprs: (Seq[SelectionExpr], Seq[SelectionExpr]) => Seq[SelectionExpr] =
    (a: Seq[SelectionExpr], b: Seq[SelectionExpr]) => a ++ b

  val seqWithAliasExprs: (Expr, Seq[AliasableExpr]) => Seq[AliasableExpr] =
    (expr: Expr, v: Seq[AliasableExpr]) => {
      expr match {
        case _: SelectExpr => v
        case a: AliasableExpr if a.alias.nonEmpty => v :+ a
        case _ => v
      }
    }
  val combWithAliasExprs: (Seq[AliasableExpr], Seq[AliasableExpr]) => Seq[AliasableExpr] =
    (a: Seq[AliasableExpr], b: Seq[AliasableExpr]) => a ++ b

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.CompletenessClause
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class CompletenessAnalyzer(expr: CompletenessClause, sourceName: String)
    extends BasicAnalyzer {

  val seqAlias: (Expr, Seq[String]) => Seq[String] = (expr: Expr, v: Seq[String]) => {
    expr match {
      case apr: AliasableExpr => v ++ apr.alias
      case _ => v
    }
  }
  val combAlias: (Seq[String], Seq[String]) => Seq[String] = (a: Seq[String], b: Seq[String]) =>
    a ++ b

  private val exprs = expr.exprs
  private def genAlias(idx: Int): String = s"alias_$idx"
  val selectionPairs: Seq[(Expr, String)] = exprs.zipWithIndex.map { pair =>
    val (pr, idx) = pair
    val res = pr.preOrderTraverseDepthFirst(Seq[String]())(seqAlias, combAlias)
    (pr, res.headOption.getOrElse(genAlias(idx)))
  }

  if (selectionPairs.isEmpty) {
    throw new Exception("completeness analyzer error: empty selection")
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class DistinctnessAnalyzer(expr: DistinctnessClause, sourceName: String)
    extends BasicAnalyzer {

  val seqAlias: (Expr, Seq[String]) => Seq[String] = (expr: Expr, v: Seq[String]) => {
    expr match {
      case apr: AliasableExpr => v ++ apr.alias
      case _ => v
    }
  }
  val combAlias: (Seq[String], Seq[String]) => Seq[String] = (a: Seq[String], b: Seq[String]) =>
    a ++ b

  private val exprs = expr.exprs
  private def genAlias(idx: Int): String = s"alias_$idx"
  val selectionPairs: Seq[(Expr, String, Boolean)] = exprs.zipWithIndex.map { pair =>
    val (pr, idx) = pair
    val res = pr.preOrderTraverseDepthFirst(Seq[String]())(seqAlias, combAlias)
    (pr, res.headOption.getOrElse(genAlias(idx)), pr.tag.isEmpty)
  }

  if (selectionPairs.isEmpty) {
    throw new Exception("uniqueness analyzer error: empty selection")
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.ProfilingClause
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class ProfilingAnalyzer(expr: ProfilingClause, sourceName: String) extends BasicAnalyzer {

  val dataSourceNames: Set[String] =
    expr.preOrderTraverseDepthFirst(Set[String]())(seqDataSourceNames, combDataSourceNames)

  val selectionExprs: Seq[Expr] = {
    expr.selectClause.exprs.map(_.extractSelf).flatMap { expr =>
      expr match {
        case e: SelectionExpr => Some(e)
        case e: FunctionExpr => Some(e)
        case _ => None
      }
    }
  }

  val groupbyExprOpt: Option[GroupbyClause] = expr.groupbyClauseOpt
  val preGroupbyExprs: Seq[Expr] = expr.preGroupbyClauses.map(_.extractSelf)
  val postGroupbyExprs: Seq[Expr] = expr.postGroupbyClauses.map(_.extractSelf)

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class TimelinessAnalyzer(expr: TimelinessClause, sourceName: String) extends BasicAnalyzer {

//  val tsExpr = expr.desc

//  val seqAlias = (expr: Expr, v: Seq[String]) => {
//    expr match {
//      case apr: AliasableExpr => v ++ apr.alias
//      case _ => v
//    }
//  }
//  val combAlias = (a: Seq[String], b: Seq[String]) => a ++ b
//
//  private val exprs = expr.exprs.toList
//  val selectionPairs = exprs.map { pr =>
//    val res = pr.preOrderTraverseDepthFirst(Seq[String]())(seqAlias, combAlias)
//    println(res)
//    println(pr)
//    (pr, res.headOption)
//  }
//
//  val (tsExprPair, endTsPairOpt) = selectionPairs match {
//    case Nil => throw new Exception(s"timeliness analyzer error: ts column not set")
//    case tsPair :: Nil => (tsPair, None)
//    case tsPair :: endTsPair :: _ => (tsPair, Some(endTsPair))
//  }
//
//  def getSelAlias(pair: (Expr, Option[String]), defAlias: String): (String, String) = {
//    val (pr, aliasOpt) = pair
//    val alias = aliasOpt.getOrElse(defAlias)
//    (pr.desc, alias)
//  }

  private val exprs = expr.exprs.map(_.desc).toList

  val (btsExpr, etsExprOpt) = exprs match {
    case Nil => throw new Exception("timeliness analyzer error: ts column not set")
    case btsExpr :: Nil => (btsExpr, None)
    case btsExpr :: etsExpr :: _ => (btsExpr, Some(etsExpr))
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer

import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.UniquenessClause
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._

case class UniquenessAnalyzer(expr: UniquenessClause, sourceName: String, targetName: String)
    extends BasicAnalyzer {

  val seqAlias: (Expr, Seq[String]) => Seq[String] = (expr: Expr, v: Seq[String]) => {
    expr match {
      case apr: AliasableExpr => v ++ apr.alias
      case _ => v
    }
  }
  val combAlias: (Seq[String], Seq[String]) => Seq[String] = (a: Seq[String], b: Seq[String]) =>
    a ++ b

  private val exprs = expr.exprs
  private def genAlias(idx: Int): String = s"alias_$idx"
  val selectionPairs: Seq[(Expr, String)] = exprs.zipWithIndex.map { pair =>
    val (pr, idx) = pair
    val res = pr.preOrderTraverseDepthFirst(Seq[String]())(seqAlias, combAlias)
    (pr, res.headOption.getOrElse(genAlias(idx)))
  }

  if (selectionPairs.isEmpty) {
    throw new Exception("uniqueness analyzer error: empty selection")
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import org.apache.commons.lang.StringUtils
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{RuleErrorConfParam, RuleParam}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.DefaultFlattenType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.CompletenessAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep
import com.hsbc.gbm.bd.clm.measure.step.write.{MetricWriteStep, RecordWriteStep}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * generate completeness dq steps
 */
case class CompletenessExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
  extends Expr2DQSteps {

  private object CompletenessKeys {
    val _source = "source"
    val _total = "total"
    val _complete = "complete"
    val _incomplete = "incomplete"
  }

  import CompletenessKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val completenessExpr = expr.asInstanceOf[CompletenessClause]

    val sourceName = details.getString(_source, context.getDataSourceName(0))

    val procType = context.procType
    val timestamp = context.contextId.timestamp

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else {
      val analyzer = CompletenessAnalyzer(completenessExpr, sourceName)

      val selItemsClause = analyzer.selectionPairs
        .map { pair =>
          val (expr, alias) = pair
          s"${expr.desc} AS `$alias`"
        }
        .mkString(", ")
      val aliases = analyzer.selectionPairs.map(_._2)

      val selClause = procType match {
        case BatchProcessType => selItemsClause
        case StreamingProcessType => s"`${ConstantColumns.tmst}`, $selItemsClause"
      }

      // 1. source alias
      val sourceAliasTableName = "__sourceAlias"
      val sourceAliasSql = {
        s"SELECT * FROM `$sourceName`"
      }
      val sourceAliasTransStep =
        SparkSqlTransformStep(sourceAliasTableName, sourceAliasSql, emptyMap, None, cache = true)

      // 2. incomplete record
      val incompleteRecordsTableName = "__incompleteRecords"
      val errorConfs: Seq[RuleErrorConfParam] = ruleParam.getErrorConfs
      var incompleteWhereClause: String = ""
      if (errorConfs.isEmpty) {
        // without errorConfs
        val completeWhereClause = aliases.map(a => s"`$a` IS NOT NULL").mkString(" AND ")
        incompleteWhereClause = s"NOT ($completeWhereClause)"
      } else {
        // with errorConfs
        incompleteWhereClause = this.getErrorConfCompleteWhereClause(errorConfs)
      }

      val incompleteRecordsSql =
        s"SELECT * FROM `$sourceAliasTableName` WHERE $incompleteWhereClause"

      val incompleteRecordWriteStep = RecordWriteStep(ruleParam.getOutDfName(), incompleteRecordsTableName)

      val incompleteRecordTransStep =
        SparkSqlTransformStep(
          incompleteRecordsTableName,
          incompleteRecordsSql,
          emptyMap,
          Some(incompleteRecordWriteStep),
          cache = true)
      incompleteRecordTransStep.parentSteps += sourceAliasTransStep

      // 3. incomplete count
      val incompleteCountTableName = "__incompleteCount"
      val incompleteColName = details.getStringOrKey(_incomplete)
      val incompleteCountSql = procType match {
        case BatchProcessType =>
          s"SELECT COUNT(*) AS `$incompleteColName` FROM `$incompleteRecordsTableName`"
        case StreamingProcessType =>
          s"SELECT `${ConstantColumns.tmst}`, COUNT(*) AS `$incompleteColName` " +
            s"FROM `$incompleteRecordsTableName` GROUP BY `${ConstantColumns.tmst}`"
      }
      val incompleteCountTransStep =
        SparkSqlTransformStep(incompleteCountTableName, incompleteCountSql, emptyMap)
      incompleteCountTransStep.parentSteps += incompleteRecordTransStep

      // 4. total count
      val totalCountTableName = "__totalCount"
      val totalColName = details.getStringOrKey(_total)
      val totalCountSql = procType match {
        case BatchProcessType =>
          s"SELECT COUNT(*) AS `$totalColName` FROM `$sourceAliasTableName`"
        case StreamingProcessType =>
          s"SELECT `${ConstantColumns.tmst}`, COUNT(*) AS `$totalColName` " +
            s"FROM `$sourceAliasTableName` GROUP BY `${ConstantColumns.tmst}`"
      }
      val totalCountTransStep =
        SparkSqlTransformStep(totalCountTableName, totalCountSql, emptyMap)
      totalCountTransStep.parentSteps += sourceAliasTransStep

      // 5. complete metric
      val completeTableName = ruleParam.getOutDfName()
      val completeColName = details.getStringOrKey(_complete)
      // scalastyle:off
      val completeMetricSql = procType match {
        case BatchProcessType =>
          s"""
             |SELECT `$totalCountTableName`.`$totalColName` AS `$totalColName`,
             |coalesce(`$incompleteCountTableName`.`$incompleteColName`, 0) AS `$incompleteColName`,
             |(`$totalCountTableName`.`$totalColName` - coalesce(`$incompleteCountTableName`.`$incompleteColName`, 0)) AS `$completeColName`
             |FROM `$totalCountTableName` LEFT JOIN `$incompleteCountTableName`
         """.stripMargin
        case StreamingProcessType =>
          s"""
             |SELECT `$totalCountTableName`.`${ConstantColumns.tmst}` AS `${ConstantColumns.tmst}`,
             |`$totalCountTableName`.`$totalColName` AS `$totalColName`,
             |coalesce(`$incompleteCountTableName`.`$incompleteColName`, 0) AS `$incompleteColName`,
             |(`$totalCountTableName`.`$totalColName` - coalesce(`$incompleteCountTableName`.`$incompleteColName`, 0)) AS `$completeColName`
             |FROM `$totalCountTableName` LEFT JOIN `$incompleteCountTableName`
             |ON `$totalCountTableName`.`${ConstantColumns.tmst}` = `$incompleteCountTableName`.`${ConstantColumns.tmst}`
         """.stripMargin
      }
      // scalastyle:on
      val completeWriteStep = {
        val metricOpt = ruleParam.getOutputOpt(MetricOutputType)
        val mwName = metricOpt.flatMap(_.getNameOpt).getOrElse(completeTableName)
        val flattenType = metricOpt.map(_.getFlatten).getOrElse(DefaultFlattenType)
        MetricWriteStep(mwName, completeTableName, flattenType)
      }
      val completeTransStep =
        SparkSqlTransformStep(
          completeTableName,
          completeMetricSql,
          emptyMap,
          Some(completeWriteStep))
      completeTransStep.parentSteps += incompleteCountTransStep
      completeTransStep.parentSteps += totalCountTransStep

      val transSteps = completeTransStep :: Nil
      transSteps
    }
  }

  /**
   * get 'error' where clause
   *
   * @param errorConfs error configuraion list
   * @return 'error' where clause
   */
  def getErrorConfCompleteWhereClause(errorConfs: Seq[RuleErrorConfParam]): String = {
    errorConfs.map(errorConf => this.getEachErrorWhereClause(errorConf)).mkString(" OR ")
  }

  /**
   * get error sql for each column
   *
   * @param errorConf error configuration
   * @return 'error' sql for each column
   */
  def getEachErrorWhereClause(errorConf: RuleErrorConfParam): String = {
    val errorType: Option[String] = errorConf.getErrorType
    val columnName: String = errorConf.getColumnName.get
    if ("regex".equalsIgnoreCase(errorType.get)) {
      // only have one regular expression
      val regexValue: String = errorConf.getValues.head
      val afterReplace: String = regexValue.replaceAll("""\\""", """\\\\""")
      return s"(`$columnName` REGEXP '$afterReplace')"
    } else if ("enumeration".equalsIgnoreCase(errorType.get)) {
      val values: Seq[String] = errorConf.getValues
      var inResult = ""
      var nullResult = ""
      if (values.contains("hive_none")) {
        // hive_none means NULL
        nullResult = s"`$columnName` IS NULL"
      }

      val valueWithQuote: String = values
        .filter(value => !"hive_none".equals(value))
        .map(value => s"'$value'")
        .mkString(", ")

      if (!StringUtils.isEmpty(valueWithQuote)) {
        inResult = s"`$columnName` IN ($valueWithQuote)"
      }

      var result = ""
      if (!StringUtils.isEmpty(inResult) && !StringUtils.isEmpty(nullResult)) {
        result = s"($inResult OR $nullResult)"
      } else if (!StringUtils.isEmpty(inResult)) {
        result = s"($inResult)"
      } else {
        result = s"($nullResult)"
      }

      return result
    }
    throw new IllegalArgumentException(
      "type in error.confs only supports regex and enumeration way")
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.{DistinctnessClause, _}
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.DistinctnessAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep
import com.hsbc.gbm.bd.clm.measure.step.write.{DataSourceUpdateWriteStep, MetricWriteStep, RecordWriteStep}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * generate distinctness dq steps
 */
case class DistinctnessExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
  extends Expr2DQSteps {

  private object DistinctnessKeys {
    val _source = "source"
    val _target = "target"
    val _distinct = "distinct"
    val _total = "total"
    val _dup = "dup"
    val _accu_dup = "accu_dup"
    val _num = "num"

    val _duplicationArray = "duplication.array"
    val _withAccumulate = "with.accumulate"

    val _recordEnable = "record.enable"
  }

  import DistinctnessKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val distinctnessExpr = expr.asInstanceOf[DistinctnessClause]

    val sourceName = details.getString(_source, context.getDataSourceName(0))
    val targetName = details.getString(_target, context.getDataSourceName(1))
    val analyzer = DistinctnessAnalyzer(distinctnessExpr, sourceName)

    val procType = context.procType
    val timestamp = context.contextId.timestamp
    val dsTimeRanges = context.dataSourceTimeRanges

    val beginTmst = dsTimeRanges.get(sourceName).map(_.begin) match {
      case Some(t) => t
      case _ => throw new Exception(s"empty begin tmst from $sourceName")
    }
    val endTmst = dsTimeRanges.get(sourceName).map(_.end) match {
      case Some(t) => t
      case _ => throw new Exception(s"empty end tmst from $sourceName")
    }

    val writeTimestampOpt = Some(endTmst)

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else {
      val withOlderTable = {
        details.getBoolean(_withAccumulate, defValue = true) &&
          context.runTimeTableRegister.existsTable(targetName)
      }

      val selClause = analyzer.selectionPairs
        .map { pair =>
          val (expr, alias, _) = pair
          s"${expr.desc} AS `$alias`"
        }
        .mkString(", ")
      val distAliases = analyzer.selectionPairs.filter(_._3).map(_._2)
      val distAliasesClause = distAliases.map(a => s"`$a`").mkString(", ")
      val allAliases = analyzer.selectionPairs.map(_._2)
      val allAliasesClause = allAliases.map(a => s"`$a`").mkString(", ")
      val groupAliases = analyzer.selectionPairs.filter(!_._3).map(_._2)
      val groupAliasesClause = groupAliases.map(a => s"`$a`").mkString(", ")
      val dupColName = details.getStringOrKey(_dup)

      // 1. source alias
      val sourceAliasTableName = "__sourceAlias"
      val sourceAliasSql = {
        s"""
           |SELECT *,
           |(count(*) over(partition by $distAliasesClause) - 1) as $dupColName
           |FROM `$sourceName`
           |""".stripMargin
      }
      val sourceAliasTransStep =
        SparkSqlTransformStep(sourceAliasTableName, sourceAliasSql, emptyMap, None, cache = true)

      // 2. total metric
      val totalTableName = "__totalMetric"
      val totalColName = details.getStringOrKey(_total)
      val totalSql = {
        s"SELECT COUNT(*) AS `$totalColName` FROM `$sourceAliasTableName`"
      }
      val totalMetricWriteStep = {
        MetricWriteStep(s"${ruleParam.getOutDfName()}%%$totalColName", totalTableName, MapFlattenType, writeTimestampOpt)
      }
      val totalTransStep =
        SparkSqlTransformStep(totalTableName, totalSql, emptyMap, Some(totalMetricWriteStep))
      totalTransStep.parentSteps += sourceAliasTransStep

      // 3. group by self
      val selfGroupTableName = "__selfGroup"
      val accuDupColName = details.getStringOrKey(_accu_dup)
      val selfGroupSql = {
        s"""
           |SELECT $distAliasesClause, (COUNT(*) - 1) AS `$dupColName`,
           |TRUE AS `${ConstantColumns.distinct}`
           |FROM `$sourceAliasTableName` GROUP BY $distAliasesClause
          """.stripMargin
      }
      val selfGroupTransStep =
        SparkSqlTransformStep(selfGroupTableName, selfGroupSql, emptyMap, None, cache = true)
      selfGroupTransStep.parentSteps += sourceAliasTransStep

      val transSteps1 = totalTransStep :: selfGroupTransStep :: Nil

      val (transSteps2, dupCountTableName) = procType match {
        case StreamingProcessType if withOlderTable =>
          // 4.0 update old data
          val targetDsUpdateWriteStep = DataSourceUpdateWriteStep(targetName, targetName)

          // 4. older alias
          val olderAliasTableName = "__older"
          val olderAliasSql = {
            s"SELECT $selClause FROM `$targetName` WHERE `${ConstantColumns.tmst}` <= $beginTmst"
          }
          val olderAliasTransStep =
            SparkSqlTransformStep(olderAliasTableName, olderAliasSql, emptyMap)

          // 5. join with older data
          val joinedTableName = "__joined"
          val selfSelClause = (distAliases :+ dupColName)
            .map { alias =>
              s"`$selfGroupTableName`.`$alias`"
            }
            .mkString(", ")
          val onClause = distAliases
            .map { alias =>
              s"coalesce(`$selfGroupTableName`.`$alias`, '') = coalesce(`$olderAliasTableName`.`$alias`, '')"
            }
            .mkString(" AND ")
          val olderIsNull = distAliases
            .map { alias =>
              s"`$olderAliasTableName`.`$alias` IS NULL"
            }
            .mkString(" AND ")
          val joinedSql = {
            s"""
               |SELECT $selfSelClause, ($olderIsNull) AS `${ConstantColumns.distinct}`
               |FROM `$olderAliasTableName` RIGHT JOIN `$selfGroupTableName`
               |ON $onClause
            """.stripMargin
          }
          val joinedTransStep = SparkSqlTransformStep(joinedTableName, joinedSql, emptyMap)
          joinedTransStep.parentSteps += selfGroupTransStep
          joinedTransStep.parentSteps += olderAliasTransStep

          // 6. group by joined data
          val groupTableName = "__group"
          val moreDupColName = "_more_dup"
          val groupSql = {
            s"""
               |SELECT $distAliasesClause, `$dupColName`, `${ConstantColumns.distinct}`,
               |COUNT(*) AS `$moreDupColName`
               |FROM `$joinedTableName`
               |GROUP BY $distAliasesClause, `$dupColName`, `${ConstantColumns.distinct}`
             """.stripMargin
          }
          val groupTransStep = SparkSqlTransformStep(groupTableName, groupSql, emptyMap)
          groupTransStep.parentSteps += joinedTransStep

          // 7. final duplicate count
          val finalDupCountTableName = "__finalDupCount"

          /**
           * dupColName:      the duplicate count of duplicated items only occurs in new data,
           * which means the distinct one in new data is also duplicate
           * accuDupColName:  the count of duplicated items accumulated in new data and old data,
           * which means the accumulated distinct count in all data
           * e.g.:  new data [A, A, B, B, C, D], old data [A, A, B, C]
           * selfGroupTable will be (A, 1, F), (B, 1, F), (C, 0, T), (D, 0, T)
           * joinedTable will be (A, 1, F), (A, 1, F), (B, 1, F), (C, 0, F), (D, 0, T)
           * groupTable will be (A, 1, F, 2), (B, 1, F, 1), (C, 0, F, 1), (D, 0, T, 1)
           * finalDupCountTable will be (A, F, 2, 3), (B, F, 2, 2), (C, F, 1, 1), (D, T, 0, 0)
           * The distinct result of new data only should be: (A, 2), (B, 2), (C, 1), (D, 0),
           * which means in new data [A, A, B, B, C, D], [A, A, B, B, C] are all duplicated,
           * only [D] is distinct
           */
          val finalDupCountSql = {
            s"""
               |SELECT $distAliasesClause, `${ConstantColumns.distinct}`,
               |CASE WHEN `${ConstantColumns.distinct}` THEN `$dupColName`
               |ELSE (`$dupColName` + 1) END AS `$dupColName`,
               |CASE WHEN `${ConstantColumns.distinct}` THEN `$dupColName`
               |ELSE (`$dupColName` + `$moreDupColName`) END AS `$accuDupColName`
               |FROM `$groupTableName`
             """.stripMargin
          }
          val finalDupCountTransStep =
            SparkSqlTransformStep(
              finalDupCountTableName,
              finalDupCountSql,
              emptyMap,
              None,
              cache = true)
          finalDupCountTransStep.parentSteps += groupTransStep

          (finalDupCountTransStep :: targetDsUpdateWriteStep :: Nil, finalDupCountTableName)
        case _ =>
          (selfGroupTransStep :: Nil, selfGroupTableName)
      }

      // 8. distinct metric
      val distTableName = "__distMetric"
      val distColName = details.getStringOrKey(_distinct)
      val distSql = {
        s"""
           |SELECT COUNT(*) AS `$distColName`
           |FROM `$dupCountTableName` WHERE `${ConstantColumns.distinct}`
         """.stripMargin
      }
      val distMetricWriteStep = {
        MetricWriteStep(s"${ruleParam.getOutDfName()}%%$distColName", distTableName, MapFlattenType, writeTimestampOpt)
      }
      val distTransStep =
        SparkSqlTransformStep(distTableName, distSql, emptyMap, Some(distMetricWriteStep))

      val transSteps3 = distTransStep :: Nil

      val duplicationArrayName = details.getString(_duplicationArray, "")
      val transSteps4 = if (duplicationArrayName.nonEmpty) {
        val recordEnable = details.getBoolean(_recordEnable, defValue = true)
        if (groupAliases.nonEmpty) {
          // with some group by requirement
          // 9. origin data join with distinct information
          val informedTableName = "__informed"
          val onClause = distAliases
            .map { alias =>
              s"coalesce(`$sourceAliasTableName`.`$alias`, '') = coalesce(`$dupCountTableName`.`$alias`, '')"
            }
            .mkString(" AND ")
          val informedSql = {
            s"""
               |SELECT `$sourceAliasTableName`.*,
               |`$dupCountTableName`.`$dupColName` AS `$dupColName`,
               |`$dupCountTableName`.`${ConstantColumns.distinct}` AS `${ConstantColumns.distinct}`
               |FROM `$sourceAliasTableName` LEFT JOIN `$dupCountTableName`
               |ON $onClause
               """.stripMargin
          }
          val informedTransStep = SparkSqlTransformStep(informedTableName, informedSql, emptyMap)

          // 10. add row number
          val rnTableName = "__rowNumber"
          val rnDistClause = distAliasesClause
          val rnSortClause = s"SORT BY `${ConstantColumns.distinct}`"
          val rnSql = {
            s"""
               |SELECT *,
               |ROW_NUMBER() OVER (DISTRIBUTE BY $rnDistClause $rnSortClause) `${ConstantColumns.rowNumber}`
               |FROM `$informedTableName`
               """.stripMargin
          }
          val rnTransStep = SparkSqlTransformStep(rnTableName, rnSql, emptyMap)
          rnTransStep.parentSteps += informedTransStep

          // 11. recognize duplicate items
          val dupItemsTableName = "__dupItems"
          val dupItemsSql = {
            s"""
               |SELECT $allAliasesClause, `$dupColName` FROM `$rnTableName`
               |WHERE NOT `${ConstantColumns.distinct}` OR `${ConstantColumns.rowNumber}` > 1
               """.stripMargin
          }
          val dupItemsWriteStep = {
            val rwName = ruleParam
              .getOutputOpt(RecordOutputType)
              .flatMap(_.getNameOpt)
              .getOrElse(dupItemsTableName)
            RecordWriteStep(rwName, dupItemsTableName, None, writeTimestampOpt)
          }
          val dupItemsTransStep = {
            if (recordEnable) {
              SparkSqlTransformStep(
                dupItemsTableName,
                dupItemsSql,
                emptyMap,
                Some(dupItemsWriteStep))
            } else {
              SparkSqlTransformStep(dupItemsTableName, dupItemsSql, emptyMap)
            }
          }
          dupItemsTransStep.parentSteps += rnTransStep

          // 12. group by dup Record metric
          val groupDupMetricTableName = "__groupDupMetric"
          val numColName = details.getStringOrKey(_num)
          val groupSelClause = groupAliasesClause
          val groupDupMetricSql = {
            s"""
               |SELECT $groupSelClause, `$dupColName`, COUNT(*) AS `$numColName`
               |FROM `$dupItemsTableName` GROUP BY $groupSelClause, `$dupColName`
             """.stripMargin
          }
          val groupDupMetricWriteStep = {
            MetricWriteStep(
              s"${ruleParam.getOutDfName()}%%$duplicationArrayName",
              groupDupMetricTableName,
              ArrayFlattenType,
              writeTimestampOpt)
          }
          val groupDupMetricTransStep =
            SparkSqlTransformStep(
              groupDupMetricTableName,
              groupDupMetricSql,
              emptyMap,
              Some(groupDupMetricWriteStep))
          groupDupMetricTransStep.parentSteps += dupItemsTransStep

          groupDupMetricTransStep :: Nil
        } else {
          // no group by requirement
          // 9. duplicate record
          val dupRecordTableName = "__dupRecords"
          val dupRecordSelClause = procType match {
            case StreamingProcessType if withOlderTable =>
              s"$distAliasesClause, `$dupColName`, `$accuDupColName`"

            case _ => s"$distAliasesClause"
          }
          val dupRecordSql = {
            s"""
               |SELECT distinct *
               |FROM `$sourceAliasTableName`
               |where $dupColName >= 1
               |""".stripMargin
          }
          val dupRecordWriteStep = RecordWriteStep(ruleParam.getOutDfName(), dupRecordTableName, None, writeTimestampOpt)
          val dupRecordTransStep = {
            if (recordEnable) {
              SparkSqlTransformStep(
                dupRecordTableName,
                dupRecordSql,
                emptyMap,
                Some(dupRecordWriteStep),
                cache = true)
            } else {
              SparkSqlTransformStep(
                dupRecordTableName,
                dupRecordSql,
                emptyMap,
                None,
                cache = true)
            }
          }

          // 10. duplicate metric
          val dupMetricTableName = "__dupMetric"
          val numColName = details.getStringOrKey(_num)
          val dupMetricSql = {
            s"""
               |SELECT $dupColName, COUNT(*) AS `$numColName`
               |FROM `$dupRecordTableName` GROUP BY `$dupColName`
              """.stripMargin
          }
          val dupMetricWriteStep = {
            MetricWriteStep(
              s"${ruleParam.getOutDfName()}%%$duplicationArrayName",
              dupMetricTableName,
              ArrayFlattenType,
              writeTimestampOpt)
          }
          val dupMetricTransStep =
            SparkSqlTransformStep(
              dupMetricTableName,
              dupMetricSql,
              emptyMap,
              Some(dupMetricWriteStep))
          dupMetricTransStep.parentSteps += dupRecordTransStep

          dupMetricTransStep :: Nil
        }
      } else Nil

      // full steps
      transSteps1 ++ transSteps2 ++ transSteps3 ++ transSteps4
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DqType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr.Expr

trait Expr2DQSteps extends Loggable with Serializable {

  protected val emtptDQSteps: Seq[DQStep] = Seq[DQStep]()
  protected val emptyMap: Map[String, Any] = Map[String, Any]()

  def getDQSteps: Seq[DQStep]
}

/**
 * get dq steps generator for griffin dsl rule
 */
object Expr2DQSteps {
  private val emtptExpr2DQSteps: Expr2DQSteps = new Expr2DQSteps {
    def getDQSteps: Seq[DQStep] = emtptDQSteps
  }

  def apply(context: DQContext, expr: Expr, ruleParam: RuleParam): Expr2DQSteps = {
    ruleParam.getDqType match {
      case Accuracy => AccuracyExpr2DQSteps(context, expr, ruleParam)
      case Profiling => ProfilingExpr2DQSteps(context, expr, ruleParam)
      case Uniqueness => UniquenessExpr2DQSteps(context, expr, ruleParam)
      case Distinct => DistinctnessExpr2DQSteps(context, expr, ruleParam)
      case Timeliness => TimelinessExpr2DQSteps(context, expr, ruleParam)
      case Completeness => CompletenessExpr2DQSteps(context, expr, ruleParam)
      case _ => emtptExpr2DQSteps
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import org.apache.commons.lang.StringUtils
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.DefaultFlattenType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.ProfilingAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep
import com.hsbc.gbm.bd.clm.measure.step.write.MetricWriteStep
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * generate profiling dq steps
 */
case class ProfilingExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
    extends Expr2DQSteps {

  private object ProfilingKeys {
    val _source = "source"
  }
  import ProfilingKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val profilingExpr = expr.asInstanceOf[ProfilingClause]

    val sourceName = profilingExpr.fromClauseOpt match {
      case Some(fc) => fc.dataSource
      case _ => details.getString(_source, context.getDataSourceName(0))
    }
    val fromClause = profilingExpr.fromClauseOpt.getOrElse(FromClause(sourceName)).desc

    val procType = context.procType
    val timestamp = context.contextId.timestamp

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else {
      val analyzer = ProfilingAnalyzer(profilingExpr, sourceName)
      val selExprDescs = analyzer.selectionExprs.map { sel =>
        val alias = sel match {
          case s: AliasableExpr =>
            s.alias.filter(StringUtils.isNotEmpty).map(a => s" AS `$a`").getOrElse("")

          case _ => ""
        }
        s"${sel.desc}$alias"
      }
      val selCondition = profilingExpr.selectClause.extraConditionOpt.map(_.desc).mkString
      val selClause = procType match {
        case BatchProcessType => selExprDescs.mkString(", ")
        case StreamingProcessType => (s"`${ConstantColumns.tmst}`" +: selExprDescs).mkString(", ")
      }
      val groupByClauseOpt = analyzer.groupbyExprOpt
      val groupbyClause = procType match {
        case BatchProcessType => groupByClauseOpt.map(_.desc).getOrElse("")
        case StreamingProcessType =>
          val tmstGroupbyClause =
            GroupbyClause(LiteralStringExpr(s"`${ConstantColumns.tmst}`") :: Nil, None)
          val mergedGroubbyClause = tmstGroupbyClause.merge(groupByClauseOpt match {
            case Some(gbc) => gbc
            case _ => GroupbyClause(Nil, None)
          })
          mergedGroubbyClause.desc
      }
      val preGroupbyClause = analyzer.preGroupbyExprs.map(_.desc).mkString(" ")
      val postGroupbyClause = analyzer.postGroupbyExprs.map(_.desc).mkString(" ")

      // 1. select statement
      val profilingSql = {
        s"SELECT $selCondition $selClause " +
          s"$fromClause $preGroupbyClause $groupbyClause $postGroupbyClause"
      }
      val profilingName = ruleParam.getOutDfName()
      val profilingMetricWriteStep = {
        val metricOpt = ruleParam.getOutputOpt(MetricOutputType)
        val mwName = metricOpt.flatMap(_.getNameOpt).getOrElse(ruleParam.getOutDfName())
        val flattenType = metricOpt.map(_.getFlatten).getOrElse(DefaultFlattenType)
        MetricWriteStep(mwName, profilingName, flattenType)
      }
      val profilingTransStep =
        SparkSqlTransformStep(
          profilingName,
          profilingSql,
          details,
          Some(profilingMetricWriteStep))
      profilingTransStep :: Nil
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.{ArrayFlattenType, DefaultFlattenType}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.TimelinessAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep
import com.hsbc.gbm.bd.clm.measure.step.write.{MetricWriteStep, RecordWriteStep}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._
import com.hsbc.gbm.bd.clm.measure.utils.TimeUtil

/**
 * generate timeliness dq steps
 */
case class TimelinessExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
  extends Expr2DQSteps {

  private object TimelinessKeys {
    val _source = "source"
    val _latency = "latency"
    val _total = "total"
    val _avg = "avg"
    val _threshold = "threshold"
    val _step = "step"
    val _count = "count"
    val _stepSize = "step.size"
    val _percentileColPrefix = "percentile"
    val _percentileValues = "percentile.values"
  }

  import TimelinessKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val timelinessExpr = expr.asInstanceOf[TimelinessClause]

    val sourceName = details.getString(_source, context.getDataSourceName(0))

    val procType = context.procType
    val timestamp = context.contextId.timestamp

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else {
      val analyzer = TimelinessAnalyzer(timelinessExpr, sourceName)
      val btsSel = analyzer.btsExpr
      val etsSelOpt = analyzer.etsExprOpt

      // 1. in time
      val inTimeTableName = "__inTime"
      val inTimeSql = etsSelOpt match {
        case Some(etsSel) =>
          s"""
             |SELECT *, ($btsSel) AS `${ConstantColumns.beginTs}`,
             |($etsSel) AS `${ConstantColumns.endTs}`
             |FROM $sourceName WHERE ($btsSel) IS NOT NULL AND ($etsSel) IS NOT NULL
           """.stripMargin
        case _ =>
          s"""
             |SELECT *, ($btsSel) AS `${ConstantColumns.beginTs}`
             |FROM $sourceName WHERE ($btsSel) IS NOT NULL
           """.stripMargin
      }
      val inTimeTransStep = SparkSqlTransformStep(inTimeTableName, inTimeSql, emptyMap)

      // 2. latency
      val latencyTableName = "__lat"
      val latencyColName = details.getStringOrKey(_latency)
      val etsColName = etsSelOpt match {
        case Some(_) => ConstantColumns.endTs
        case _ => ConstantColumns.tmst
      }
      val latencySql = {
        s"SELECT *, (`$etsColName` - `${ConstantColumns.beginTs}`) AS `$latencyColName` " +
          s"FROM `$inTimeTableName`"
      }
      val latencyTransStep =
        SparkSqlTransformStep(latencyTableName, latencySql, emptyMap, None, cache = true)
      latencyTransStep.parentSteps += inTimeTransStep

      // 3. timeliness metric
      val metricTableName = ruleParam.getOutDfName()
      val totalColName = details.getStringOrKey(_total)
      val avgColName = details.getStringOrKey(_avg)
      val metricSql = procType match {

        case BatchProcessType =>
          s"""
             |SELECT COUNT(*) AS `$totalColName`,
             |CAST(AVG(`$latencyColName`) AS BIGINT) AS `$avgColName`
             |FROM `$latencyTableName`
           """.stripMargin

        case StreamingProcessType =>
          s"""
             |SELECT `${ConstantColumns.tmst}`,
             |COUNT(*) AS `$totalColName`,
             |CAST(AVG(`$latencyColName`) AS BIGINT) AS `$avgColName`
             |FROM `$latencyTableName`
             |GROUP BY `${ConstantColumns.tmst}`
           """.stripMargin
      }
      val metricWriteStep = {
        val metricOpt = ruleParam.getOutputOpt(MetricOutputType)
        val mwName = metricOpt.flatMap(_.getNameOpt).getOrElse(ruleParam.getOutDfName())
        val flattenType = metricOpt.map(_.getFlatten).getOrElse(DefaultFlattenType)
        MetricWriteStep(mwName, metricTableName, flattenType)
      }
      val metricTransStep =
        SparkSqlTransformStep(metricTableName, metricSql, emptyMap, Some(metricWriteStep))
      metricTransStep.parentSteps += latencyTransStep

      // current steps
      val transSteps1 = metricTransStep :: Nil

      // 4. timeliness record
      val transSteps2 = TimeUtil.milliseconds(details.getString(_threshold, "")) match {
        case Some(tsh) =>
          val recordTableName = "__lateRecords"
          val recordSql = {
            s"SELECT * FROM `$latencyTableName` WHERE `$latencyColName` > $tsh"
          }
          val recordWriteStep = RecordWriteStep(ruleParam.getOutDfName(), recordTableName, None)

          val recordTransStep =
            SparkSqlTransformStep(recordTableName, recordSql, emptyMap, Some(recordWriteStep))
          recordTransStep.parentSteps += latencyTransStep

          recordTransStep :: Nil
        case _ => Nil
      }

      // 5. ranges
      val transSteps3 = TimeUtil.milliseconds(details.getString(_stepSize, "")) match {
        case Some(stepSize) =>
          // 5.1 range
          val rangeTableName = "__range"
          val stepColName = details.getStringOrKey(_step)
          val rangeSql = {
            s"""
               |SELECT *, CAST((`$latencyColName` / $stepSize) AS BIGINT) AS `$stepColName`
               |FROM `$latencyTableName`
             """.stripMargin
          }
          val rangeTransStep = SparkSqlTransformStep(rangeTableName, rangeSql, emptyMap)
          rangeTransStep.parentSteps += latencyTransStep

          // 5.2 range metric
          val rangeMetricTableName = "__rangeMetric"
          val countColName = details.getStringOrKey(_count)
          val rangeMetricSql = procType match {
            case BatchProcessType =>
              s"""
                 |SELECT `$stepColName`, COUNT(*) AS `$countColName`
                 |FROM `$rangeTableName` GROUP BY `$stepColName`
                """.stripMargin
            case StreamingProcessType =>
              s"""
                 |SELECT `${ConstantColumns.tmst}`, `$stepColName`, COUNT(*) AS `$countColName`
                 |FROM `$rangeTableName` GROUP BY `${ConstantColumns.tmst}`, `$stepColName`
                """.stripMargin
          }
          val rangeMetricWriteStep = {
            MetricWriteStep(stepColName, rangeMetricTableName, ArrayFlattenType)
          }
          val rangeMetricTransStep =
            SparkSqlTransformStep(
              rangeMetricTableName,
              rangeMetricSql,
              emptyMap,
              Some(rangeMetricWriteStep))
          rangeMetricTransStep.parentSteps += rangeTransStep

          rangeMetricTransStep :: Nil
        case _ => Nil
      }

      // 6. percentiles
      val percentiles = getPercentiles(details)
      val transSteps4 = if (percentiles.nonEmpty) {
        val percentileTableName = "__percentile"
        val percentileColName = details.getStringOrKey(_percentileColPrefix)
        val percentileCols = percentiles
          .map { pct =>
            val pctName = (pct * 100).toInt.toString
            s"floor(percentile_approx($latencyColName, $pct)) " +
              s"AS `${percentileColName}_$pctName`"
          }
          .mkString(", ")
        val percentileSql = {
          s"""
             |SELECT $percentileCols
             |FROM `$latencyTableName`
            """.stripMargin
        }
        val percentileWriteStep = {
          MetricWriteStep(percentileTableName, percentileTableName, DefaultFlattenType)
        }
        val percentileTransStep =
          SparkSqlTransformStep(
            percentileTableName,
            percentileSql,
            emptyMap,
            Some(percentileWriteStep))
        percentileTransStep.parentSteps += latencyTransStep

        percentileTransStep :: Nil
      } else Nil

      // full steps
      transSteps1 ++ transSteps2 ++ transSteps3 ++ transSteps4
    }
  }

  private def getPercentiles(details: Map[String, Any]): Seq[Double] = {
    details.getDoubleArr(_percentileValues).filter(d => d >= 0 && d <= 1)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform

import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.{ArrayFlattenType, EntriesFlattenType}
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.configuration.enums.ProcessType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.expr._
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.analyzer.UniquenessAnalyzer
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep
import com.hsbc.gbm.bd.clm.measure.step.write.{MetricWriteStep, RecordWriteStep}
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * generate uniqueness dq steps
 */
case class UniquenessExpr2DQSteps(context: DQContext, expr: Expr, ruleParam: RuleParam)
  extends Expr2DQSteps {

  private object UniquenessKeys {
    val _source = "source"
    val _target = "target"
    val _unique = "unique"
    val _total = "total"
    val _dup = "dup"
    val _num = "num"

    val _duplicationArray = "duplication.array"
  }

  import UniquenessKeys._

  def getDQSteps: Seq[DQStep] = {
    val details = ruleParam.getDetails
    val uniquenessExpr = expr.asInstanceOf[UniquenessClause]

    val sourceName = details.getString(_source, context.getDataSourceName(0))
    val targetName = details.getString(_target, context.getDataSourceName(1))
    val analyzer = UniquenessAnalyzer(uniquenessExpr, sourceName, targetName)

    val procType = context.procType
    val timestamp = context.contextId.timestamp

    if (!context.runTimeTableRegister.existsTable(sourceName)) {
      warn(s"[$timestamp] data source $sourceName not exists")
      Nil
    } else if (!context.runTimeTableRegister.existsTable(targetName)) {
      warn(s"[$timestamp] data source $targetName not exists")
      Nil
    } else {
      val selItemsClause = analyzer.selectionPairs
        .map { pair =>
          val (expr, alias) = pair
          s"${expr.desc} AS `$alias`"
        }
        .mkString(", ")
      val aliases = analyzer.selectionPairs.map(_._2)

      val selClause = procType match {
        case BatchProcessType => selItemsClause
        case StreamingProcessType => s"`${ConstantColumns.tmst}`, $selItemsClause"
      }
      val selAliases = procType match {
        case BatchProcessType => aliases
        case StreamingProcessType => ConstantColumns.tmst +: aliases
      }

      // 1. source distinct mapping
      val sourceTableName = "__source"
      val sourceSql = s"SELECT DISTINCT $selClause FROM $sourceName"
      val sourceTransStep = SparkSqlTransformStep(sourceTableName, sourceSql, emptyMap)

      // 2. target mapping
      val targetTableName = "__target"
      val targetSql = s"SELECT $selClause FROM $targetName"
      val targetTransStep = SparkSqlTransformStep(targetTableName, targetSql, emptyMap)

      // 3. joined
      val joinedTableName = "__joined"
      val joinedSelClause = selAliases
        .map { alias =>
          s"`$sourceTableName`.`$alias` AS `$alias`"
        }
        .mkString(", ")
      val onClause = aliases
        .map { alias =>
          s"coalesce(`$sourceTableName`.`$alias`, '') = coalesce(`$targetTableName`.`$alias`, '')"
        }
        .mkString(" AND ")
      val joinedSql = {
        s"SELECT $joinedSelClause FROM `$targetTableName` RIGHT JOIN `$sourceTableName` ON $onClause"
      }
      val joinedTransStep = SparkSqlTransformStep(joinedTableName, joinedSql, emptyMap)
      joinedTransStep.parentSteps += sourceTransStep
      joinedTransStep.parentSteps += targetTransStep

      // 4. group
      val groupTableName = "__group"
      val groupSelClause = selAliases
        .map { alias =>
          s"`$alias`"
        }
        .mkString(", ")
      val dupColName = details.getStringOrKey(_dup)
      val groupSql = {
        s"SELECT $groupSelClause, (COUNT(*) - 1) AS `$dupColName` " +
          s"FROM `$joinedTableName` GROUP BY $groupSelClause"
      }
      val groupTransStep =
        SparkSqlTransformStep(groupTableName, groupSql, emptyMap, None, cache = true)
      groupTransStep.parentSteps += joinedTransStep

      // 5. total metric
      val totalTableName = "__totalMetric"
      val totalColName = details.getStringOrKey(_total)
      val totalSql = procType match {
        case BatchProcessType => s"SELECT COUNT(*) AS `$totalColName` FROM `$sourceName`"
        case StreamingProcessType =>
          s"""
             |SELECT `${ConstantColumns.tmst}`, COUNT(*) AS `$totalColName`
             |FROM `$sourceName` GROUP BY `${ConstantColumns.tmst}`
           """.stripMargin
      }
      val totalMetricWriteStep = MetricWriteStep(totalColName, totalTableName, EntriesFlattenType)
      val totalTransStep =
        SparkSqlTransformStep(totalTableName, totalSql, emptyMap, Some(totalMetricWriteStep))

      // 6. unique record
      val uniqueRecordTableName = "__uniqueRecord"
      val uniqueRecordSql = {
        s"SELECT * FROM `$groupTableName` WHERE `$dupColName` = 0"
      }
      val uniqueRecordTransStep =
        SparkSqlTransformStep(uniqueRecordTableName, uniqueRecordSql, emptyMap)
      uniqueRecordTransStep.parentSteps += groupTransStep

      // 7. unique metric
      val uniqueTableName = "__uniqueMetric"
      val uniqueColName = details.getStringOrKey(_unique)
      val uniqueSql = procType match {
        case BatchProcessType =>
          s"SELECT COUNT(*) AS `$uniqueColName` FROM `$uniqueRecordTableName`"
        case StreamingProcessType =>
          s"""
             |SELECT `${ConstantColumns.tmst}`, COUNT(*) AS `$uniqueColName`
             |FROM `$uniqueRecordTableName` GROUP BY `${ConstantColumns.tmst}`
           """.stripMargin
      }
      val uniqueMetricWriteStep =
        MetricWriteStep(uniqueColName, uniqueTableName, EntriesFlattenType)
      val uniqueTransStep =
        SparkSqlTransformStep(uniqueTableName, uniqueSql, emptyMap, Some(uniqueMetricWriteStep))
      uniqueTransStep.parentSteps += uniqueRecordTransStep

      val transSteps1 = totalTransStep :: uniqueTransStep :: Nil

      val duplicationArrayName = details.getString(_duplicationArray, "")
      val transSteps2 = if (duplicationArrayName.nonEmpty) {
        // 8. duplicate record
        val dupRecordTableName = "__dupRecords"
        val dupRecordSql = {
          s"SELECT * FROM `$groupTableName` WHERE `$dupColName` > 0"
        }

        val dupRecordWriteStep = RecordWriteStep(ruleParam.getOutDfName(), dupRecordTableName)
        val dupRecordTransStep =
          SparkSqlTransformStep(
            dupRecordTableName,
            dupRecordSql,
            emptyMap,
            Some(dupRecordWriteStep),
            cache = true)

        // 9. duplicate metric
        val dupMetricTableName = "__dupMetric"
        val numColName = details.getStringOrKey(_num)
        val dupMetricSelClause = procType match {
          case BatchProcessType => s"`$dupColName`, COUNT(*) AS `$numColName`"

          case StreamingProcessType =>
            s"`${ConstantColumns.tmst}`, `$dupColName`, COUNT(*) AS `$numColName`"
        }
        val dupMetricGroupbyClause = procType match {
          case BatchProcessType => s"`$dupColName`"
          case StreamingProcessType => s"`${ConstantColumns.tmst}`, `$dupColName`"
        }
        val dupMetricSql = {
          s"""
             |SELECT $dupMetricSelClause FROM `$dupRecordTableName`
             |GROUP BY $dupMetricGroupbyClause
          """.stripMargin
        }
        val dupMetricWriteStep = {
          MetricWriteStep(duplicationArrayName, dupMetricTableName, ArrayFlattenType)
        }
        val dupMetricTransStep =
          SparkSqlTransformStep(
            dupMetricTableName,
            dupMetricSql,
            emptyMap,
            Some(dupMetricWriteStep))
        dupMetricTransStep.parentSteps += dupRecordTransStep

        dupMetricTransStep :: Nil
      } else Nil

      // full steps
      transSteps1 ++ transSteps2
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.parser.GriffinDslParser
import com.hsbc.gbm.bd.clm.measure.step.builder.dsl.transform.Expr2DQSteps

case class GriffinDslDQStepBuilder(dataSourceNames: Seq[String], functionNames: Seq[String])
    extends RuleParamStepBuilder {

  val filteredFunctionNames: Seq[String] = functionNames.filter { fn =>
    fn.matches("""^[a-zA-Z_]\w*$""")
  }
  val parser: GriffinDslParser = GriffinDslParser(dataSourceNames, filteredFunctionNames)

  def buildSteps(context: DQContext, ruleParam: RuleParam): Seq[DQStep] = {
    val name = getStepName(ruleParam.getOutDfName())
    val rule = ruleParam.getRule
    val dqType = ruleParam.getDqType
    try {
      val result = parser.parseRule(rule, dqType)
      if (result.successful) {
        val expr = result.get
        val expr2DQSteps = Expr2DQSteps(context, expr, ruleParam.replaceOutDfName(name))
        expr2DQSteps.getDQSteps
      } else {
        warn(s"parse rule [ $rule ] fails: \n$result")
        Nil
      }
    } catch {
      case e: Throwable =>
        error(s"generate rule plan $name fails: ${e.getMessage}", e)
        Nil
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/preproc: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.preproc

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.DslType._

/**
 * generate each entity pre-proc params by template defined in pre-proc param
 */
object PreProcParamMaker {

  case class StringAnyMap(values: Map[String, Any])

  def makePreProcRules(
      rules: Seq[RuleParam],
      suffix: String,
      dfName: String): (Seq[RuleParam], String) = {
    val len = rules.size
    val (newRules, _) = rules.zipWithIndex.foldLeft((Nil: Seq[RuleParam], dfName)) {
      (ret, pair) =>
        val (rls, prevOutDfName) = ret
        val (rule, i) = pair
        val inName = rule.getInDfName(prevOutDfName)
        val outName = if (i == len - 1) dfName else rule.getOutDfName(genNameWithIndex(dfName, i))
        val ruleWithNames = rule.replaceInOutDfName(inName, outName)
        (rls :+ makeNewPreProcRule(ruleWithNames, suffix), outName)
    }
    (newRules, withSuffix(dfName, suffix))
  }

  private def makeNewPreProcRule(rule: RuleParam, suffix: String): RuleParam = {
    val newInDfName = withSuffix(rule.getInDfName(), suffix)
    val newOutDfName = withSuffix(rule.getOutDfName(), suffix)
    val rpRule = rule.replaceInOutDfName(newInDfName, newOutDfName)
    rule.getDslType match {
      case DataFrameOpsType => rpRule
      case _ =>
        val newRule = replaceDfNameSuffix(rule.getRule, rule.getInDfName(), suffix)
        rpRule.replaceRule(newRule)
    }
  }

  private def genNameWithIndex(name: String, i: Int): String = s"$name$i"

  private def replaceDfNameSuffix(str: String, dfName: String, suffix: String): String = {
    val regexStr = s"(?i)$dfName"
    val replaceDfName = withSuffix(dfName, suffix)
    str.replaceAll(regexStr, replaceDfName)
  }

  def withSuffix(str: String, suffix: String): String = s"${str}_$suffix"

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.step.{DQStep, SeqDQStep}
import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.configuration.enums.OutputType._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.SeqDQStep
import com.hsbc.gbm.bd.clm.measure.step.write.{DataSourceUpdateWriteStep, MetricWriteStep, RecordWriteStep}

/**
 * build dq step by rule param
 */
trait RuleParamStepBuilder extends DQStepBuilder {

  type ParamType = RuleParam

  def buildDQStep(context: DQContext, param: ParamType): Option[DQStep] = {
    val steps = buildSteps(context, param)
    if (steps.size > 1) Some(SeqDQStep(steps))
    else if (steps.size == 1) steps.headOption
    else None
  }

  def buildSteps(context: DQContext, ruleParam: RuleParam): Seq[DQStep]

  protected def buildDirectWriteSteps(ruleParam: RuleParam): Seq[DQStep] = {
    val name = getStepName(ruleParam.getOutDfName())
    // metric writer
    val metricSteps = ruleParam
      .getOutputOpt(MetricOutputType)
      .map { metric =>
        MetricWriteStep(metric.getNameOpt.getOrElse(name), name, metric.getFlatten)
      }
      .toSeq
    // record writer
    val recordSteps = ruleParam
      .getOutputOpt(RecordOutputType)
      .map { record =>
        RecordWriteStep(record.getNameOpt.getOrElse(name), name)
      }
      .toSeq
    // update writer
    val dsCacheUpdateSteps = ruleParam
      .getOutputOpt(DscUpdateOutputType)
      .map { dsCacheUpdate =>
        DataSourceUpdateWriteStep(dsCacheUpdate.getNameOpt.getOrElse(""), name)
      }
      .toSeq

    metricSteps ++ recordSteps ++ dsCacheUpdateSteps
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.RuleParam
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.transform.SparkSqlTransformStep

case class SparkSqlDQStepBuilder() extends RuleParamStepBuilder {

  def buildSteps(context: DQContext, ruleParam: RuleParam): Seq[DQStep] = {
    val name = getStepName(ruleParam.getOutDfName())
    val transformStep = SparkSqlTransformStep(
      name,
      ruleParam.getRule,
      ruleParam.getDetails,
      None,
      ruleParam.getCache)
    transformStep +: buildDirectWriteSteps(ruleParam)
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/builder/udf: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.builder.udf

import org.apache.spark.sql.SparkSession

object GriffinUDFAgent {
  def register(sparkSession: SparkSession): Unit = {
    GriffinUDFs.register(sparkSession)
    GriffinUDAggFs.register(sparkSession)
  }
}

/**
 * user defined functions extension
 */
object GriffinUDFs {

  def register(sparkSession: SparkSession): Unit = {
    sparkSession.udf.register("index_of", indexOf _)
    sparkSession.udf.register("matches", matches _)
    sparkSession.udf.register("reg_replace", regReplace _)
  }

  private def indexOf(arr: Seq[String], v: String) = {
    arr.indexOf(v)
  }

  private def matches(s: String, regex: String) = {
    s.matches(regex)
  }

  private def regReplace(s: String, regex: String, replacement: String) = {
    s.replaceAll(regex, replacement)
  }

}

/**
 * aggregation functions extension
 */
object GriffinUDAggFs {

  def register(sparkSession: SparkSession): Unit = {}

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step

import scala.util.Try

import com.hsbc.gbm.bd.clm.measure.Loggable
import com.hsbc.gbm.bd.clm.measure.context.DQContext

trait DQStep extends Loggable {

  val name: String

  /**
   * @return execution success
   */
  def execute(context: DQContext): Try[Boolean]

  def getNames: Seq[String] = name :: Nil

}

object DQStepStatus extends Enumeration {
  val PENDING: DQStepStatus.Value = Value
  val RUNNING: DQStepStatus.Value = Value
  val COMPLETE: DQStepStatus.Value = Value
  val FAILED: DQStepStatus.Value = Value
}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/read: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.read

import org.apache.spark.sql._

import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep

trait ReadStep extends DQStep {

  val config: Map[String, Any]

  val cache: Boolean

  def execute(context: DQContext): Try[Boolean] = Try {
    info(s"read data source [$name]")
    read(context) match {
      case Some(df) =>
//        if (needCache) context.dataFrameCache.cacheDataFrame(name, df)
        context.runTimeTableRegister.registerTable(name, df)
        true
      case _ =>
        warn(s"read data source [$name] fails")
        false
    }
  }

  def read(context: DQContext): Option[DataFrame]

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.read

import org.apache.spark.sql._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.utils.DataFrameUtil._

case class UnionReadStep(name: String, readSteps: Seq[ReadStep]) extends ReadStep {

  val config: Map[String, Any] = Map()
  val cache: Boolean = false

  def read(context: DQContext): Option[DataFrame] = {
    val dfOpts = readSteps.map { readStep =>
      readStep.read(context)
    }
    if (dfOpts.nonEmpty) {
      dfOpts.reduce((a, b) => unionDfOpts(a, b))
    } else None
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step

import com.hsbc.gbm.bd.clm.measure.context.DQContext

import scala.util.{Failure, Success, Try}
import com.hsbc.gbm.bd.clm.measure.context.DQContext

/**
 * sequence of dq steps
 */
case class SeqDQStep(dqSteps: Seq[DQStep]) extends DQStep {

  val name: String = ""
  val rule: String = ""
  val details: Map[String, Any] = Map()

  /**
   * @return execution success
   */
  def execute(context: DQContext): Try[Boolean] = {
    dqSteps
      .map(_.execute(context))
      .foldLeft(Try(true))((ret, stepResult) => {
        (ret, stepResult) match {
          case (Success(_), nextResult) => nextResult
          case (Failure(_), _) => ret
        }
      })
  }

  override def getNames: Seq[String] = {
    dqSteps.foldLeft(Nil: Seq[String]) { (ret, dqStep) =>
      ret ++ dqStep.getNames
    }
  }

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/transform: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.transform

import java.util.Date

import org.apache.spark.sql.{Encoders, Row, _}
import org.apache.spark.sql.types._
import com.hsbc.gbm.bd.clm.measure.context.ContextId
import com.hsbc.gbm.bd.clm.measure.context.metric.{AccuracyMetric, CacheResults}
import com.hsbc.gbm.bd.clm.measure.context.metric.CacheResults.CacheResult
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * pre-defined data frame operations
 */
object DataFrameOps {

  final val _fromJson = "from_json"
  final val _accuracy = "accuracy"
  final val _clear = "clear"

  object AccuracyOprKeys {
    val _dfName = "df.name"
    val _miss = "miss"
    val _total = "total"
    val _matched = "matched"
    val _matchedFraction = "matchedFraction"
  }

  def fromJson(
      sparkSession: SparkSession,
      inputDfName: String,
      details: Map[String, Any]): DataFrame = {
    val _colName = "col.name"
    val colNameOpt = details.get(_colName).map(_.toString)

    implicit val encoder: Encoder[String] = Encoders.STRING

    val df: DataFrame = sparkSession.table(s"`$inputDfName`")
    val rdd = colNameOpt match {
      case Some(colName: String) => df.map(r => r.getAs[String](colName))
      case _ => df.map(_.getAs[String](0))
    }
    sparkSession.read.json(rdd) // slow process
  }

  def accuracy(
      sparkSession: SparkSession,
      inputDfName: String,
      contextId: ContextId,
      details: Map[String, Any]): DataFrame = {
    import AccuracyOprKeys._

    val miss = details.getStringOrKey(_miss)
    val total = details.getStringOrKey(_total)
    val matched = details.getStringOrKey(_matched)
    val matchedFraction = details.getStringOrKey(_matchedFraction)

    val updateTime = new Date().getTime

    def getLong(r: Row, k: String): Option[Long] = {
      try {
        Some(r.getAs[Long](k))
      } catch {
        case _: Throwable => None
      }
    }

    val df = sparkSession.table(s"`$inputDfName`")

    val results = df.rdd.flatMap { row =>
      try {
        val tmst = getLong(row, ConstantColumns.tmst).getOrElse(contextId.timestamp)
        val missCount = getLong(row, miss).getOrElse(0L)
        val totalCount = getLong(row, total).getOrElse(0L)
        val ar = AccuracyMetric(missCount, totalCount)
        if (ar.isLegal) Some((tmst, ar)) else None
      } catch {
        case _: Throwable => None
      }
    }.collect

    // cache and update results
    val updatedResults = CacheResults.update(results.map { pair =>
      val (t, r) = pair
      CacheResult(t, updateTime, r)
    })

    // generate metrics
    val schema = StructType(
      Array(
        StructField(ConstantColumns.tmst, LongType),
        StructField(miss, LongType),
        StructField(total, LongType),
        StructField(matched, LongType),
        StructField(matchedFraction, DoubleType),
        StructField(ConstantColumns.record, BooleanType),
        StructField(ConstantColumns.empty, BooleanType)))
    val rows = updatedResults.map { r =>
      val ar = r.result.asInstanceOf[AccuracyMetric]
      Row(
        r.timeStamp,
        ar.miss,
        ar.total,
        ar.getMatch,
        ar.matchFraction,
        !ar.initial,
        ar.eventual())
    }.toArray
    val rowRdd = sparkSession.sparkContext.parallelize(rows)
    val retDf = sparkSession.createDataFrame(rowRdd, schema)

    retDf
  }

  def clear(
      sparkSession: SparkSession,
      inputDfName: String,
      details: Map[String, Any]): DataFrame = {
    val df = sparkSession.table(s"`$inputDfName`")
    val emptyRdd = sparkSession.sparkContext.emptyRDD[Row]
    sparkSession.createDataFrame(emptyRdd, df.schema)
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.transform


import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.write.WriteStep

/**
 * data frame ops transform step
 */
case class DataFrameOpsTransformStep[T <: WriteStep](
    name: String,
    inputDfName: String,
    rule: String,
    details: Map[String, Any],
    writeStepOpt: Option[T] = None,
    cache: Boolean = false)
    extends TransformStep {

  def doExecute(context: DQContext): Try[Boolean] =
    Try {
      val sparkSession = context.sparkSession
      val df = rule match {
        case DataFrameOps._fromJson => DataFrameOps.fromJson(sparkSession, inputDfName, details)
        case DataFrameOps._accuracy =>
          DataFrameOps.accuracy(sparkSession, inputDfName, context.contextId, details)
        case DataFrameOps._clear => DataFrameOps.clear(sparkSession, inputDfName, details)
        case _ => throw new Exception(s"df opr [ $rule ] not supported")
      }
      if (cache) context.dataFrameCache.cacheDataFrame(name, df)
      context.runTimeTableRegister.registerTable(name, df)
      writeStepOpt match {
        case Some(writeStep) => writeStep.execute(context)
        case None => Try(true)
      }
    }.flatten

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.transform


import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.write.WriteStep

/**
 * spark sql transform step
 */
case class SparkSqlTransformStep[T <: WriteStep](
                                                  name: String,
                                                  rule: String,
                                                  details: Map[String, Any],
                                                  writeStepOpt: Option[T] = None,
                                                  cache: Boolean = false)
  extends TransformStep {

  def doExecute(context: DQContext): Try[Boolean] =
    Try {
      val sparkSession = context.sparkSession
      val df = sparkSession.sql(rule)
      if (cache) context.dataFrameCache.cacheDataFrame(name, df)
      context.runTimeTableRegister.registerTable(name, df)
      writeStepOpt match {
        case Some(writeStep) => writeStep.execute(context)
        case None => Try(true)
      }
    }.flatten

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.transform

import com.hsbc.gbm.bd.clm.measure.step.{DQStep, DQStepStatus}

import scala.collection.mutable
import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import scala.concurrent.duration.Duration
import scala.util.{Failure, Success, Try}
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.DQStep
import com.hsbc.gbm.bd.clm.measure.step.DQStepStatus._
import com.hsbc.gbm.bd.clm.measure.utils.ThreadUtils

trait TransformStep extends DQStep {

  val rule: String

  val details: Map[String, Any]

  val cache: Boolean

  var status: DQStepStatus.Value = PENDING

  val parentSteps = new mutable.HashSet[TransformStep]

  def doExecute(context: DQContext): Try[Boolean]

  override def execute(context: DQContext): Try[Boolean] = {

    val threadName = Thread.currentThread().getName
    info(threadName + " begin transform step : \n" + debugString())

    // Submit parents Steps
    val parentStepFutures = parentSteps.filter(checkAndUpdateStatus).map { parentStep =>
      Future {
        val result = parentStep.execute(context)
        parentStep.synchronized {
          result match {
            case Success(_) => parentStep.status = COMPLETE
            case Failure(_) => parentStep.status = FAILED
          }
        }
        result
      }(TransformStep.transformStepContext)
    }

    val parentsResultSet = ThreadUtils.awaitResult(
      Future.sequence(parentStepFutures)(implicitly, TransformStep.transformStepContext),
      Duration.Inf)

    val parentsResult = parentsResultSet.foldLeft(Try(true)) { (ret, step) =>
      (ret, step) match {
        case (Success(_), nextResult) => nextResult
        case (Failure(_), _) => ret
      }
    }

    parentSteps.foreach(step => {
      while (step.status == RUNNING) {
        Thread.sleep(1000L)
      }
    })

    parentsResult match {
      case Success(_) =>
        info(threadName + " end transform step : \n" + debugString())
        doExecute(context)
      case Failure(_) =>
        error("Parent transform step failed!")
        parentsResult
    }
  }

  def checkAndUpdateStatus(step: TransformStep): Boolean = {
    step.synchronized {
      if (step.status == PENDING) {
        step.status = RUNNING
        true
      } else {
        false
      }
    }
  }

  def debugString(level: Int = 0): String = {
    val stringBuffer = new StringBuilder
    if (level > 0) {
      for (_ <- 0 until level) {
        stringBuffer.append("|   ")
      }
      stringBuffer.append("|---")
    }
    stringBuffer.append(name + "\n")
    parentSteps.foreach(parentStep => stringBuffer.append(parentStep.debugString(level + 1)))
    stringBuffer.toString()
  }
}

object TransformStep {
  private[transform] val transformStepContext =
    ExecutionContext.fromExecutorService(ThreadUtils.newDaemonCachedThreadPool("transform-step"))
}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/step/write: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import org.apache.commons.lang.StringUtils
import org.apache.spark.sql.DataFrame

import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.context.DQContext

/**
 * update data source streaming cache
 */
case class DataSourceUpdateWriteStep(dsName: String, inputName: String) extends WriteStep {

  val name: String = ""
  val writeTimestampOpt: Option[Long] = None

  def execute(context: DQContext): Try[Boolean] = Try {
    getDataSourceCacheUpdateDf(context) match {
      case Some(_) =>
        context.dataSources
          .find(ds => StringUtils.equals(ds.name, dsName))
      case _ =>
        warn(s"update $dsName from $inputName fails")
    }
    true
  }

  private def getDataFrame(context: DQContext, name: String): Option[DataFrame] = {
    try {
      val df = context.sparkSession.table(s"`$name`")
      Some(df)
    } catch {
      case e: Throwable =>
        error(s"get data frame $name fails", e)
        None
    }
  }

  private def getDataSourceCacheUpdateDf(context: DQContext): Option[DataFrame] =
    getDataFrame(context, inputName)

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import com.hsbc.gbm.bd.clm.measure.context.DQContext

import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.context.DQContext

/**
 * flush final metric map in context and write
 */
case class MetricFlushStep() extends WriteStep {

  val name: String = ""
  val inputName: String = ""
  val writeTimestampOpt: Option[Long] = None

  def execute(context: DQContext): Try[Boolean] = Try {
    context.metricWrapper.flush.foldLeft(true) { (ret, pair) =>
      val (t, metric) = pair
      val pr = try {
        context.getSinks(t).foreach { sink =>
          try {
            sink.sinkMetrics(metric.filterKeys(_ != "tmst").flatMap(ele => {
              if (ele._1 == "value") {
                Map(ele._1 -> ele._2.asInstanceOf[Map[String, Any]].foldLeft(Map[String, Any]())(
                  (x, xs) => {
                    val (key, subKey) = if (xs._1.contains("%%")) {
                      val pattern = "(.*)[%][%](.*)".r
                      val pattern(key, subKey) = xs._1
                      (key, subKey)
                    } else {
                      (xs._1, xs._2)
                    }

                    x + (key -> (xs._2 match {
                      case m: Map[String, _] => m.asInstanceOf[Map[String, Any]] ++ x.getOrElse(key, Map[String, Any]()).asInstanceOf[Map[String, Any]]
                      case a: Seq[Map[String, Any]] => Map(subKey -> a) ++ x.getOrElse(key, Map[String, Any]()).asInstanceOf[Map[String, Any]]
                      case _ => xs._2
                    }))
                  }
                ))
              } else Map(ele._1 -> ele._2)
            }))(context)
          } catch {
            case e: Throwable => error(s"sink metrics error: ${e.getMessage}", e)
          }
        }
        true
      } catch {
        case e: Throwable =>
          error(s"flush metrics error: ${e.getMessage}", e)
          false
      }
      ret && pr
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.FlattenType
import com.hsbc.gbm.bd.clm.measure.configuration.enums.{SimpleMode, TimestampMode}
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns

import scala.util.Try
import com.hsbc.gbm.bd.clm.measure.configuration.enums.SimpleMode
import com.hsbc.gbm.bd.clm.measure.configuration.enums.FlattenType.{ArrayFlattenType, EntriesFlattenType, FlattenType, MapFlattenType}
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.utils.JsonUtil
import com.hsbc.gbm.bd.clm.measure.utils.ParamUtil._

/**
 * write metrics into context metric wrapper
 */
case class MetricWriteStep(
    name: String,
    inputName: String,
    flattenType: FlattenType,
    writeTimestampOpt: Option[Long] = None)
    extends WriteStep {

  val emptyMetricMap: Map[Long, Map[String, Any]] = Map[Long, Map[String, Any]]()
  val emptyMap: Map[String, Any] = Map[String, Any]()

  def execute(context: DQContext): Try[Boolean] = Try {
    val timestamp = writeTimestampOpt.getOrElse(context.contextId.timestamp)

    // get metric list from data frame
    val metricMaps: Seq[Map[String, Any]] = getMetricMaps(context)

    // get timestamp and normalize metric
    val writeMode = writeTimestampOpt.map(_ => SimpleMode).getOrElse(context.writeMode)
    val timestampMetricMap: Map[Long, Map[String, Any]] = writeMode match {

      case SimpleMode =>
        val metrics: Map[String, Any] = flattenMetric(metricMaps, name, flattenType)
        emptyMetricMap + (timestamp -> metrics)

      case TimestampMode =>
        val tmstMetrics = metricMaps.map { metric =>
          val tmst = metric.getLong(ConstantColumns.tmst, timestamp)
          val pureMetric = metric.removeKeys(ConstantColumns.columns)
          (tmst, pureMetric)
        }
        tmstMetrics.groupBy(_._1).map { pair =>
          val (k, v) = pair
          val maps = v.map(_._2)
          val mtc = flattenMetric(maps, name, flattenType)
          (k, mtc)
        }
    }

    // write to metric wrapper
    timestampMetricMap.foreach { pair =>
      val (timestamp, v) = pair
      context.metricWrapper.insertMetric(timestamp, v)
    }

    true
  }

  private def getMetricMaps(context: DQContext): Seq[Map[String, Any]] = {
    try {
      val pdf = context.sparkSession.table(s"`$inputName`")
      val rows = pdf.collect()
      val columns = pdf.columns
      if (rows.size > 0) {
        rows.map(_.getValuesMap(columns))
      } else Nil
    } catch {
      case e: Throwable =>
        error(s"get metric $name fails", e)
        Nil
    }
  }

  private def flattenMetric(
      metrics: Seq[Map[String, Any]],
      name: String,
      flattenType: FlattenType): Map[String, Any] = {
    flattenType match {
      case EntriesFlattenType => metrics.headOption.getOrElse(emptyMap)
      case ArrayFlattenType => Map[String, Any](name -> metrics)
      case MapFlattenType =>
        val v = metrics.headOption.getOrElse(emptyMap)
        Map[String, Any](name -> v)
      case _ =>
        if (metrics.size > 1) Map[String, Any](name -> metrics)
        else metrics.headOption.getOrElse(emptyMap)
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import com.hsbc.gbm.bd.clm.measure.configuration.enums.{SimpleMode, TimestampMode}
import com.hsbc.gbm.bd.clm.measure.context.DQContext

import scala.util.Try
import org.apache.spark.rdd.RDD
import org.apache.spark.sql._
import com.hsbc.gbm.bd.clm.measure.configuration.enums._
import com.hsbc.gbm.bd.clm.measure.context.DQContext
import com.hsbc.gbm.bd.clm.measure.step.builder.ConstantColumns
import com.hsbc.gbm.bd.clm.measure.utils.JsonUtil

/**
 * write records needs to be sink
 */
case class RecordWriteStep(
                            name: String,
                            inputName: String,
                            filterTableNameOpt: Option[String] = None,
                            writeTimestampOpt: Option[Long] = None)
  extends WriteStep {

  def execute(context: DQContext): Try[Boolean] = Try {
    val timestamp = writeTimestampOpt.getOrElse(context.contextId.timestamp)

    val writeMode = writeTimestampOpt.map(_ => SimpleMode).getOrElse(context.writeMode)
    writeMode match {
      case SimpleMode =>
        // batch records
        val recordsOpt = getBatchRecords(context)
        // write records
        recordsOpt match {
          case Some(records) =>
            context.getSinks(timestamp).foreach { sink =>
              try {
                sink.sinkBatchRecords(records.drop("__tmst"), Option(this.name))
              } catch {
                case e: Throwable => error(s"sink records error: ${e.getMessage}", e)
              }
            }
          case _ =>
        }
      case TimestampMode =>
        // streaming records
        val (recordsOpt, emptyTimestamps) = getStreamingRecords(context)
        // write records
        recordsOpt.foreach { records =>
          records.foreach { pair =>
            val (t, strRecords) = pair
            context.getSinks(t).foreach { sink =>
              try {
                sink.sinkRecords(strRecords, name)
              } catch {
                case e: Throwable => error(s"sink records error: ${e.getMessage}", e)
              }
            }
          }
        }
        emptyTimestamps.foreach { t =>
          context.getSinks(t).foreach { sink =>
            try {
              sink.sinkRecords(Nil, name)
            } catch {
              case e: Throwable => error(s"sink records error: ${e.getMessage}", e)
            }
          }
        }
    }
    true
  }

  private def getTmst(row: Row, defTmst: Long): Long = {
    try {
      row.getAs[Long](ConstantColumns.tmst)
    } catch {
      case _: Throwable => defTmst
    }
  }

  private def getDataFrame(context: DQContext, name: String): Option[DataFrame] = {
    try {
      val df = context.sparkSession.table(s"`$name`")
      Some(df)
    } catch {
      case e: Throwable =>
        error(s"get data frame $name fails", e)
        None
    }
  }

  private def getFilterTableDataFrame(context: DQContext): Option[DataFrame] =
    filterTableNameOpt.flatMap(getDataFrame(context, _))

  private def getBatchRecords(context: DQContext): Option[DataFrame] = {
    getDataFrame(context, inputName)
  }

  private def getStreamingRecords(
                                   context: DQContext): (Option[RDD[(Long, Iterable[String])]], Set[Long]) = {
    implicit val encoder: Encoder[(Long, String)] =
      Encoders.tuple(Encoders.scalaLong, Encoders.STRING)
    val defTimestamp = context.contextId.timestamp
    getDataFrame(context, inputName) match {
      case Some(df) =>
        val (filterFuncOpt, emptyTimestamps) = getFilterTableDataFrame(context) match {
          case Some(filterDf) =>
            // timestamps with empty flag
            val tmsts: Array[(Long, Boolean)] = filterDf.collect.flatMap { row =>
              try {
                val tmst = getTmst(row, defTimestamp)
                val empty = row.getAs[Boolean](ConstantColumns.empty)
                Some((tmst, empty))
              } catch {
                case _: Throwable => None
              }
            }
            val emptyTmsts = tmsts.filter(_._2).map(_._1).toSet
            val recordTmsts = tmsts.filter(!_._2).map(_._1).toSet
            val filterFuncOpt: Option[Long => Boolean] = if (recordTmsts.nonEmpty) {
              Some((t: Long) => recordTmsts.contains(t))
            } else None

            (filterFuncOpt, emptyTmsts)
          case _ => (Some((_: Long) => true), Set[Long]())
        }

        // filter timestamps need to record
        filterFuncOpt match {
          case Some(filterFunc) =>
            val records = df.flatMap { row =>
              val tmst = getTmst(row, defTimestamp)
              if (filterFunc(tmst)) {
                try {
                  val map = SparkRowFormatter.formatRow(row)
                  val str = JsonUtil.toJson(map)
                  Some((tmst, str))
                } catch {
                  case _: Throwable => None
                }
              } else None
            }
            (Some(records.rdd.groupByKey), emptyTimestamps)
          case _ => (None, emptyTimestamps)
        }
      case _ => (None, Set[Long]())
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import scala.collection.mutable.ArrayBuffer

import org.apache.spark.sql.Row
import org.apache.spark.sql.types.{ArrayType, DataType, StructField, StructType}

/**
 * spark row formatter
 */
object SparkRowFormatter {

  def formatRow(row: Row): Map[String, Any] = {
    formatRowWithSchema(row, row.schema)
  }

  private def formatRowWithSchema(row: Row, schema: StructType): Map[String, Any] = {
    formatStruct(schema.fields, row)
  }

  private def formatStruct(schema: Seq[StructField], r: Row) = {
    val paired = schema.zip(r.toSeq)
    paired.foldLeft(Map[String, Any]())((s, p) => s ++ formatItem(p))
  }

  private def formatItem(p: (StructField, Any)): Map[String, Any] = {
    p match {
      case (sf, a) =>
        sf.dataType match {
          case ArrayType(et, _) =>
            Map(
              sf.name ->
                (if (a == null) a else formatArray(et, a.asInstanceOf[ArrayBuffer[Any]])))
          case StructType(s) =>
            Map(sf.name -> (if (a == null) a else formatStruct(s, a.asInstanceOf[Row])))
          case _ => Map(sf.name -> a)
        }
    }
  }

  private def formatArray(et: DataType, arr: ArrayBuffer[Any]): Seq[Any] = {
    et match {
      case StructType(s) => arr.map(e => formatStruct(s, e.asInstanceOf[Row]))
      case ArrayType(t, _) =>
        arr.map(e => formatArray(t, e.asInstanceOf[ArrayBuffer[Any]]))
      case _ => arr
    }
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.step.write

import com.hsbc.gbm.bd.clm.measure.step.DQStep

trait WriteStep extends DQStep {

  val inputName: String

  val writeTimestampOpt: Option[Long]

  override def getNames: Seq[String] = Nil

}
cat: ./clientlifecycle-common-measure/src/main/scala/com/hsbc/gbm/bd/clm/measure/utils: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import java.util.concurrent.TimeUnit

import com.hsbc.gbm.bd.clm.measure.Loggable


object CommonUtils extends Loggable {

  /**
   * Executes a given code block and logs the time taken for its execution.
   *
   * @param f Arbitrary code block
   * @param timeUnit required for time conversion to desired unit. Default: [[TimeUnit.SECONDS]]
   * @tparam T resultant type parameter
   * @return result of type T
   */
  def timeThis[T](f: => T, timeUnit: TimeUnit = TimeUnit.SECONDS): T = {
    val startNanos = System.nanoTime()
    val result = f
    val endNanos = System.nanoTime()

    griffinLogger.info(s"Time taken: ${timeUnit
      .convert(endNanos - startNanos, TimeUnit.NANOSECONDS)} ${timeUnit.name().toLowerCase}")

    result
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions._

object DataFrameUtil {

  def unionDfOpts(dfOpt1: Option[DataFrame], dfOpt2: Option[DataFrame]): Option[DataFrame] = {
    (dfOpt1, dfOpt2) match {
      case (Some(df1), Some(df2)) => Some(unionByName(df1, df2))
      case (Some(_), _) => dfOpt1
      case (_, Some(_)) => dfOpt2
      case _ => None
    }
  }

  def unionByName(a: DataFrame, b: DataFrame): DataFrame = {
    val columns = a.columns.toSet.intersect(b.columns.toSet).map(col).toSeq
    a.select(columns: _*).union(b.select(columns: _*))
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import java.io.File
import java.net.URI

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.collection.mutable.{Map => MutableMap}
import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.FileSystem


object FSUtil extends Loggable {

  private val fsMap: MutableMap[String, FileSystem] = MutableMap()
  private val defaultFS: FileSystem = FileSystem.get(getConfiguration)

  def getFileSystem(path: String): FileSystem = {
    getUriOpt(path) match {
      case Some(uri) =>
        fsMap.get(uri.getScheme) match {
          case Some(fs) => fs
          case _ =>
            val fs = try {
              FileSystem.get(uri, getConfiguration)
            } catch {
              case e: Throwable =>
                error(s"get file system error: ${e.getMessage}", e)
                throw e
            }
            fsMap += (uri.getScheme -> fs)
            fs
        }
      case _ => defaultFS
    }
  }

  private def getConfiguration: Configuration = {
    val conf = new Configuration()
    conf.setBoolean("dfs.support.append", true)
//    conf.set("fs.defaultFS", "hdfs://localhost")    // debug in hdfs localhost env
    conf
  }

  private def getUriOpt(path: String): Option[URI] = {
    val uriOpt = try {
      Some(new URI(path))
    } catch {
      case _: Throwable => None
    }
    uriOpt.flatMap { uri =>
      if (uri.getScheme == null) {
        try {
          Some(new File(path).toURI)
        } catch {
          case _: Throwable => None
        }
      } else Some(uri)
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import com.hsbc.gbm.bd.clm.measure.Loggable
import org.apache.hadoop.fs.{FSDataInputStream, FSDataOutputStream, Path}


object HdfsUtil extends Loggable {

  private val seprator = "/"

  private def getFS(implicit path: Path) = FSUtil.getFileSystem(path.toString)

  def existPath(filePath: String): Boolean = {
    try {
      implicit val path: Path = new Path(filePath)
      getFS.exists(path)
    } catch {
      case _: Throwable => false
    }
  }

  def existFileInDir(dirPath: String, fileName: String): Boolean = {
    val filePath = getHdfsFilePath(dirPath, fileName)
    existPath(filePath)
  }

  def createFile(filePath: String): FSDataOutputStream = {
    implicit val path: Path = new Path(filePath)
    if (getFS.exists(path)) getFS.delete(path, true)
    getFS.create(path)
  }

  def appendOrCreateFile(filePath: String): FSDataOutputStream = {
    implicit val path: Path = new Path(filePath)
    if (getFS.getConf.getBoolean("dfs.support.append", false) && getFS.exists(path)) {
      getFS.append(path)
    } else createFile(filePath)
  }

  def openFile(filePath: String): FSDataInputStream = {
    implicit val path: Path = new Path(filePath)
    getFS.open(path)
  }

  def writeContent(filePath: String, message: String): Unit = {
    val out = createFile(filePath)
    out.write(message.getBytes("utf-8"))
    out.close()
  }

  def withHdfsFile(filePath: String, appendIfExists: Boolean = true)(
      f: FSDataOutputStream => Unit): Unit = {
    val out =
      if (appendIfExists) {
        appendOrCreateFile(filePath)
      } else {
        createFile(filePath)
      }

    f(out)
    out.close()
  }

  def createEmptyFile(filePath: String): Unit = {
    val out = createFile(filePath)
    out.close()
  }

  def getHdfsFilePath(parentPath: String, fileName: String): String = {
    if (parentPath.endsWith(seprator)) parentPath + fileName else parentPath + seprator + fileName
  }

  def deleteHdfsPath(dirPath: String): Unit = {
    try {
      implicit val path: Path = new Path(dirPath)
      if (getFS.exists(path)) getFS.delete(path, true)
    } catch {
      case e: Throwable => error(s"delete path [$dirPath] error: ${e.getMessage}", e)
    }
  }

  def listSubPathsByType(
      dirPath: String,
      subType: String,
      fullPath: Boolean = false): Iterable[String] = {
    if (existPath(dirPath)) {
      try {
        implicit val path: Path = new Path(dirPath)
        val fileStatusArray = getFS.listStatus(path)
        fileStatusArray
          .filter { fileStatus =>
            subType match {
              case "dir" => fileStatus.isDirectory
              case "file" => fileStatus.isFile
              case _ => true
            }
          }
          .map { fileStatus =>
            val fname = fileStatus.getPath.getName
            if (fullPath) getHdfsFilePath(dirPath, fname) else fname
          }
      } catch {
        case e: Throwable =>
          warn(s"list path [$dirPath] warn: ${e.getMessage}", e)
          Nil
      }
    } else Nil
  }

  def listSubPathsByTypes(
      dirPath: String,
      subTypes: Iterable[String],
      fullPath: Boolean = false): Iterable[String] = {
    subTypes.flatMap { subType =>
      listSubPathsByType(dirPath, subType, fullPath)
    }
  }

  def fileNameFromPath(filePath: String): String = {
    val path = new Path(filePath)
    path.getName
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import scala.util.matching.Regex

import org.apache.http.client.methods.{HttpGet, HttpPost}
import org.apache.http.entity.{ContentType, StringEntity}
import org.apache.http.impl.client.HttpClientBuilder
import scalaj.http._

object HttpUtil {

  val GET_REGEX: Regex = """^(?i)get$""".r
  val POST_REGEX: Regex = """^(?i)post$""".r
  val PUT_REGEX: Regex = """^(?i)put$""".r
  val DELETE_REGEX: Regex = """^(?i)delete$""".r

  def postData(
      url: String,
      params: Map[String, Object],
      headers: Map[String, Object],
      data: String): Boolean = {
    val response = Http(url)
      .params(convertObjMap2StrMap(params))
      .headers(convertObjMap2StrMap(headers))
      .postData(data)
      .asString

    response.isSuccess
  }

  def doHttpRequest(
      url: String,
      method: String,
      params: Map[String, Object],
      headers: Map[String, Object],
      data: String): Boolean = {
    val client = HttpClientBuilder.create.build
    method match {
      case POST_REGEX() =>
        val post = new HttpPost(url)
        convertObjMap2StrMap(headers) foreach (header => post.addHeader(header._1, header._2))
        post.setEntity(new StringEntity(data, ContentType.APPLICATION_JSON))

        // send the post request
        val response = client.execute(post)
        val code = response.getStatusLine.getStatusCode
        code >= 200 && code < 300
      case PUT_REGEX() =>
        val get = new HttpGet(url)
        convertObjMap2StrMap(headers) foreach (header => get.addHeader(header._1, header._2))
        val response = client.execute(get)
        val code = response.getStatusLine.getStatusCode
        code >= 200 && code < 300
      case _ => false
    }
  }

  def httpRequest(
      url: String,
      method: String,
      params: Map[String, Object],
      headers: Map[String, Object],
      data: String): Boolean = {
    val httpReq = Http(url)
      .params(convertObjMap2StrMap(params))
      .headers(convertObjMap2StrMap(headers))
    method match {
      case POST_REGEX() =>
        val res = httpReq.postData(data).asString
        res.isSuccess
      case PUT_REGEX() =>
        val res = httpReq.put(data).asString
        res.isSuccess
      case _ => false
    }
  }

  private def convertObjMap2StrMap(map: Map[String, Object]): Map[String, String] = {
    map.map(pair => pair._1 -> pair._2.toString)
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import java.io.InputStream

import scala.reflect._

import com.fasterxml.jackson.databind.{DeserializationFeature, ObjectMapper}
import com.fasterxml.jackson.module.scala.DefaultScalaModule

object JsonUtil {
  val mapper = new ObjectMapper()
  mapper.registerModule(DefaultScalaModule)
  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)

  def toJson(value: Map[Symbol, Any]): String = {
    toJson(value map { case (k, v) => k.name -> v })
  }

  def toJson(value: Any): String = {
    mapper.writeValueAsString(value)
  }

  def fromJson[T: ClassTag](json: String): T = {
    mapper.readValue[T](json, classTag[T].runtimeClass.asInstanceOf[Class[T]])
  }

  def fromJson[T: ClassTag](is: InputStream): T = {
    mapper.readValue[T](is, classTag[T].runtimeClass.asInstanceOf[Class[T]])
  }

  def toAnyMap(json: String): Map[String, Any] = {
    mapper.readValue(json, classOf[Map[String, Any]])
  }
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import scala.reflect.ClassTag
import scala.util.Try

object ParamUtil {

  object TransUtil {
    def toAny(value: Any): Option[Any] = Some(value)
    def toAnyRef[T: ClassTag](value: Any): Option[T] = {
      value match {
        case v: T => Some(v)
        case _ => None
      }
    }
    def toStringOpt(value: Any): Option[String] = {
      value match {
        case v: String => Some(v)
        case v => Some(v.toString)
      }
    }
    def toByte(value: Any): Option[Byte] = {
      try {
        value match {
          case v: String => Some(v.toByte)
          case v: Byte => Some(v.toByte)
          case v: Short => Some(v.toByte)
          case v: Int => Some(v.toByte)
          case v: Long => Some(v.toByte)
          case v: Float => Some(v.toByte)
          case v: Double => Some(v.toByte)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toShort(value: Any): Option[Short] = {
      try {
        value match {
          case v: String => Some(v.toShort)
          case v: Byte => Some(v.toShort)
          case v: Short => Some(v.toShort)
          case v: Int => Some(v.toShort)
          case v: Long => Some(v.toShort)
          case v: Float => Some(v.toShort)
          case v: Double => Some(v.toShort)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toInt(value: Any): Option[Int] = {
      try {
        value match {
          case v: String => Some(v.toInt)
          case v: Byte => Some(v.toInt)
          case v: Short => Some(v.toInt)
          case v: Int => Some(v.toInt)
          case v: Long => Some(v.toInt)
          case v: Float => Some(v.toInt)
          case v: Double => Some(v.toInt)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toLong(value: Any): Option[Long] = {
      try {
        value match {
          case v: String => Some(v.toLong)
          case v: Byte => Some(v.toLong)
          case v: Short => Some(v.toLong)
          case v: Int => Some(v.toLong)
          case v: Long => Some(v.toLong)
          case v: Float => Some(v.toLong)
          case v: Double => Some(v.toLong)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toFloat(value: Any): Option[Float] = {
      try {
        value match {
          case v: String => Some(v.toFloat)
          case v: Byte => Some(v.toFloat)
          case v: Short => Some(v.toFloat)
          case v: Int => Some(v.toFloat)
          case v: Long => Some(v.toFloat)
          case v: Float => Some(v.toFloat)
          case v: Double => Some(v.toFloat)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toDouble(value: Any): Option[Double] = {
      try {
        value match {
          case v: String => Some(v.toDouble)
          case v: Byte => Some(v.toDouble)
          case v: Short => Some(v.toDouble)
          case v: Int => Some(v.toDouble)
          case v: Long => Some(v.toDouble)
          case v: Float => Some(v.toDouble)
          case v: Double => Some(v.toDouble)
          case _ => None
        }
      } catch {
        case _: NumberFormatException => None
      }
    }
    def toBoolean(value: Any): Option[Boolean] = {
      try {
        value match {
          case v: String => Some(v.toBoolean)
          case v: Boolean => Some(v)
          case _ => None
        }
      } catch {
        case _: IllegalArgumentException => None
      }
    }
  }
  import TransUtil._

  implicit class ParamMap(params: Map[String, Any]) {
    def getAny(key: String, defValue: Any): Any = {
      params.get(key).flatMap(toAny).getOrElse(defValue)
    }

    def getAnyRef[T: ClassTag](key: String, defValue: T): T = {
      params.get(key).flatMap(toAnyRef[T]).getOrElse(defValue)
    }

    def getString(key: String, defValue: String): String = {
      params.get(key).flatMap(toStringOpt).getOrElse(defValue)
    }

    def getLazyString(key: String, defValue: () => String): String = {
      params.get(key).flatMap(toStringOpt).getOrElse(defValue())
    }

    def getStringOrKey(key: String): String = getString(key, key)

    def getByte(key: String, defValue: Byte): Byte = {
      params.get(key).flatMap(toByte).getOrElse(defValue)
    }

    def getShort(key: String, defValue: Short): Short = {
      params.get(key).flatMap(toShort).getOrElse(defValue)
    }

    def getInt(key: String, defValue: Int): Int = {
      params.get(key).flatMap(toInt).getOrElse(defValue)
    }

    def getLong(key: String, defValue: Long): Long = {
      params.get(key).flatMap(toLong).getOrElse(defValue)
    }

    def getFloat(key: String, defValue: Float): Float = {
      params.get(key).flatMap(toFloat).getOrElse(defValue)
    }

    def getDouble(key: String, defValue: Double): Double = {
      params.get(key).flatMap(toDouble).getOrElse(defValue)
    }

    def getBoolean(key: String, defValue: Boolean): Boolean = {
      params.get(key).flatMap(toBoolean).getOrElse(defValue)
    }

    def getParamAnyMap(
        key: String,
        defValue: Map[String, Any] = Map[String, Any]()): Map[String, Any] = {
      params.get(key) match {
        case Some(v: Map[_, _]) => v.map(pair => (pair._1.toString, pair._2))
        case _ => defValue
      }
    }

    def getParamStringMap(
        key: String,
        defValue: Map[String, String] = Map[String, String]()): Map[String, String] = {
      params.get(key) match {
        case Some(v: Map[_, _]) => v.map(pair => (pair._1.toString, pair._2.toString))
        case _ => defValue
      }
    }

    def getStringArr(key: String, defValue: Seq[String] = Nil): Seq[String] = {
      params.get(key) match {
        case Some(seq: Seq[_]) => seq.flatMap(toStringOpt)
        case _ => defValue
      }
    }

    def getDoubleArr(key: String, defValue: Seq[Double] = Nil): Seq[Double] = {
      params.get(key) match {
        case Some(seq: Seq[_]) => seq.flatMap(toDouble)
        case _ => defValue
      }
    }

    def addIfNotExist(key: String, value: Any): Map[String, Any] = {
      params.get(key) match {
        case None => params + (key -> value)
        case _ => params
      }
    }

    def removeKeys(keys: Iterable[String]): Map[String, Any] = {
      params -- keys
    }
  }

}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import java.util.concurrent._

import scala.concurrent.{Awaitable, ExecutionContext, ExecutionContextExecutor}
import scala.concurrent.duration.Duration
import scala.concurrent.forkjoin.{
  ForkJoinPool => SForkJoinPool,
  ForkJoinWorkerThread => SForkJoinWorkerThread
}
import scala.util.control.NonFatal

import com.google.common.util.concurrent.{MoreExecutors, ThreadFactoryBuilder}

object ThreadUtils {

  private val sameThreadExecutionContext =
    ExecutionContext.fromExecutorService(MoreExecutors.sameThreadExecutor())

  /**
   * An `ExecutionContextExecutor` that runs each task in the thread that invokes `execute/submit`.
   * The caller should make sure the tasks running in this `ExecutionContextExecutor` are short and
   * never block.
   */
  def sameThread: ExecutionContextExecutor = sameThreadExecutionContext

  /**
   * Create a thread factory that names threads with a prefix and also sets the threads to daemon.
   */
  def namedThreadFactory(prefix: String): ThreadFactory = {
    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(prefix + "-%d").build()
  }

  /**
   * Wrapper over newCachedThreadPool. Thread names are formatted as prefix-ID, where ID is a
   * unique, sequentially assigned integer.
   */
  def newDaemonCachedThreadPool(prefix: String): ThreadPoolExecutor = {
    val threadFactory = namedThreadFactory(prefix)
    Executors.newCachedThreadPool(threadFactory).asInstanceOf[ThreadPoolExecutor]
  }

  /**
   * Create a cached thread pool whose max number of threads is `maxThreadNumber`. Thread names
   * are formatted as prefix-ID, where ID is a unique, sequentially assigned integer.
   */
  def newDaemonCachedThreadPool(
      prefix: String,
      maxThreadNumber: Int,
      keepAliveSeconds: Int = 60): ThreadPoolExecutor = {
    val threadFactory = namedThreadFactory(prefix)
    val threadPool = new ThreadPoolExecutor(
      maxThreadNumber, // corePoolSize: the max number of threads to create before queuing the tasks
      maxThreadNumber, // maximumPoolSize: because we use LinkedBlockingDeque, this one is not used
      keepAliveSeconds,
      TimeUnit.SECONDS,
      new LinkedBlockingQueue[Runnable],
      threadFactory)
    threadPool.allowCoreThreadTimeOut(true)
    threadPool
  }

  /**
   * Wrapper over newFixedThreadPool. Thread names are formatted as prefix-ID, where ID is a
   * unique, sequentially assigned integer.
   */
  def newDaemonFixedThreadPool(nThreads: Int, prefix: String): ThreadPoolExecutor = {
    val threadFactory = namedThreadFactory(prefix)
    Executors.newFixedThreadPool(nThreads, threadFactory).asInstanceOf[ThreadPoolExecutor]
  }

  /**
   * Wrapper over newSingleThreadExecutor.
   */
  def newDaemonSingleThreadExecutor(threadName: String): ExecutorService = {
    val threadFactory =
      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(threadName).build()
    Executors.newSingleThreadExecutor(threadFactory)
  }

  /**
   * Wrapper over ScheduledThreadPoolExecutor.
   */
  def newDaemonSingleThreadScheduledExecutor(threadName: String): ScheduledExecutorService = {
    val threadFactory =
      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(threadName).build()
    val executor = new ScheduledThreadPoolExecutor(1, threadFactory)
    // By default, a cancelled task is not automatically removed from the work queue until its delay
    // elapses. We have to enable it manually.
    executor.setRemoveOnCancelPolicy(true)
    executor
  }

  /**
   * Run a piece of code in a new thread and return the result. Exception in the new thread is
   * thrown in the caller thread with an adjusted stack trace that removes references to this
   * method for clarity. The exception stack traces will be like the following
   *
   * SomeException: exception-message
   *   at CallerClass.body-method (sourcefile.scala)
   *   at ... run in separate thread using org.apache.griffin.measure.utils.ThreadUtils ... ()
   *   at CallerClass.caller-method (sourcefile.scala)
   *   ...
   */
  def runInNewThread[T](threadName: String, isDaemon: Boolean = true)(body: => T): T = {
    @volatile var exception: Option[Throwable] = None
    @volatile var result: T = null.asInstanceOf[T]

    val thread = new Thread(threadName) {
      override def run(): Unit = {
        try {
          result = body
        } catch {
          case NonFatal(e) =>
            exception = Some(e)
        }
      }
    }
    thread.setDaemon(isDaemon)
    thread.start()
    thread.join()

    exception match {
      case Some(realException) =>
        // Remove the part of the stack that shows method calls into this helper method
        // This means drop everything from the top until the stack element
        // ThreadUtils.runInNewThread(), and then drop that as well (hence the `drop(1)`).
        val baseStackTrace = Thread
          .currentThread()
          .getStackTrace
          .dropWhile(!_.getClassName.contains(this.getClass.getSimpleName))
          .drop(1)

        // Remove the part of the new thread stack that shows methods call from this helper method
        val extraStackTrace = realException.getStackTrace.takeWhile(
          !_.getClassName.contains(this.getClass.getSimpleName))

        // Combine the two stack traces, with a place holder just specifying that there
        // was a helper method used, without any further details of the helper
        val placeHolderStackElem = new StackTraceElement(
          s"... run in separate thread using ${ThreadUtils.getClass.getName.stripSuffix("$")} ..",
          " ",
          "",
          -1)
        val finalStackTrace = extraStackTrace ++ Seq(placeHolderStackElem) ++ baseStackTrace

        // Update the stack trace and rethrow the exception in the caller thread
        realException.setStackTrace(finalStackTrace)
        throw realException
      case None =>
        result
    }
  }

  /**
   * Construct a new Scala ForkJoinPool with a specified max parallelism and name prefix.
   */
  def newForkJoinPool(prefix: String, maxThreadNumber: Int): SForkJoinPool = {
    // Custom factory to set thread names
    val factory = new SForkJoinPool.ForkJoinWorkerThreadFactory {
      override def newThread(pool: SForkJoinPool): SForkJoinWorkerThread =
        new SForkJoinWorkerThread(pool) {
          setName(prefix + "-" + super.getName)
        }
    }
    new SForkJoinPool(
      maxThreadNumber,
      factory,
      null, // handler
      false // asyncMode
    )
  }

  // scalastyle:off awaitresult
  /**
   * Preferred alternative to `Await.result()`.
   *
   * This method wraps and re-throws any exceptions thrown by the underlying `Await` call, ensuring
   * that this thread's stack trace appears in logs.
   *
   * In addition, it calls `Awaitable.result` directly to avoid using `ForkJoinPool`'s
   * `BlockingContext`. Codes running in the user's thread may be in a thread of Scala ForkJoinPool.
   * As concurrent executions in ForkJoinPool may see some [[ThreadLocal]] value unexpectedly, this
   * method basically prevents ForkJoinPool from running other tasks in the current waiting thread.
   * In general, we should use this method because it's hard to debug when [[ThreadLocal]]s leak
   * to other tasks.
   */
  @throws(classOf[Exception])
  def awaitResult[T](awaitable: Awaitable[T], atMost: Duration): T = {
    try {
      // `awaitPermission` is not actually used anywhere so it's safe to pass in null here.
      val awaitPermission = null.asInstanceOf[scala.concurrent.CanAwait]
      awaitable.result(atMost)(awaitPermission)
    } catch {
      // TimeoutException is thrown in the current thread, so not need to warp the exception.
      case NonFatal(t) if !t.isInstanceOf[TimeoutException] =>
        throw new Exception("Exception thrown in awaitResult: ", t)
    }
  }
  // scalastyle:on awaitresult

  // scalastyle:off awaitready
  /**
   * Preferred alternative to `Await.ready()`.
   *
   * @see [[awaitResult]]
   */
  @throws(classOf[Exception])
  def awaitReady[T](awaitable: Awaitable[T], atMost: Duration): awaitable.type = {
    try {
      // `awaitPermission` is not actually used anywhere so it's safe to pass in null here.
      val awaitPermission = null.asInstanceOf[scala.concurrent.CanAwait]
      awaitable.ready(atMost)(awaitPermission)
    } catch {
      // TimeoutException is thrown in the current thread, so not need to warp the exception.
      case NonFatal(t) if !t.isInstanceOf[TimeoutException] =>
        throw new Exception("Exception thrown in awaitResult: ", t)
    }
  }
  // scalastyle:on awaitready
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hsbc.gbm.bd.clm.measure.utils

import com.hsbc.gbm.bd.clm.measure.Loggable

import scala.util.{Failure, Success, Try}
import scala.util.matching.Regex


object TimeUtil extends Loggable {

  private object Units {
    case class TimeUnit(name: String, shortName: String, ut: Long, regex: Regex) {
      def toMs(t: Long): Long = t * ut
      def fromMs(ms: Long): Long = ms / ut
      def fitUnit(ms: Long): Boolean = ms % ut == 0
    }

    val dayUnit: TimeUnit = TimeUnit("day", "d", 24 * 60 * 60 * 1000, """^(?i)d(?:ay)?$""".r)
    val hourUnit: TimeUnit = TimeUnit("hour", "h", 60 * 60 * 1000, """^(?i)h(?:our|r)?$""".r)
    val minUnit: TimeUnit = TimeUnit("minute", "m", 60 * 1000, """^(?i)m(?:in(?:ute)?)?$""".r)
    val secUnit: TimeUnit = TimeUnit("second", "s", 1000, """^(?i)s(?:ec(?:ond)?)?$""".r)
    val msUnit: TimeUnit =
      TimeUnit("millisecond", "ms", 1, """^(?i)m(?:illi)?s(?:ec(?:ond)?)?$""".r)

    val timeUnits: List[TimeUnit] = dayUnit :: hourUnit :: minUnit :: secUnit :: msUnit :: Nil
  }
  import Units._

//  final val TimeRegex = """^([+\-]?\d+)(ms|s|m|h|d)$""".r
  final val TimeRegex = """^([+\-]?\d+)([a-zA-Z]+)$""".r
  final val PureTimeRegex = """^([+\-]?\d+)$""".r

  def milliseconds(timeString: String): Option[Long] = {
    val value: Option[Long] = {
      Try {
        timeString match {
          case TimeRegex(time, unit) =>
            val t = time.toLong
            unit match {
              case dayUnit.regex() => dayUnit.toMs(t)
              case hourUnit.regex() => hourUnit.toMs(t)
              case minUnit.regex() => minUnit.toMs(t)
              case secUnit.regex() => secUnit.toMs(t)
              case msUnit.regex() => msUnit.toMs(t)
              case _ => throw new Exception(s"$timeString is invalid time format")
            }
          case PureTimeRegex(time) =>
            val t = time.toLong
            msUnit.toMs(t)
          case _ => throw new Exception(s"$timeString is invalid time format")
        }
      } match {
        case Success(v) => Some(v)
        case Failure(_) => None
      }
    }
    value
  }

  def timeToUnit(ms: Long, unit: String): Long = {
    unit match {
      case dayUnit.regex() => dayUnit.fromMs(ms)
      case hourUnit.regex() => hourUnit.fromMs(ms)
      case minUnit.regex() => minUnit.fromMs(ms)
      case secUnit.regex() => secUnit.fromMs(ms)
      case msUnit.regex() => msUnit.fromMs(ms)
      case _ => ms
    }
  }

  def timeFromUnit(t: Long, unit: String): Long = {
    unit match {
      case dayUnit.regex() => dayUnit.toMs(t)
      case hourUnit.regex() => hourUnit.toMs(t)
      case minUnit.regex() => minUnit.toMs(t)
      case secUnit.regex() => secUnit.toMs(t)
      case msUnit.regex() => msUnit.toMs(t)
      case _ => t
    }
  }

  def time2String(t: Long): String = {
    val matchedUnitOpt = timeUnits.foldLeft(None: Option[TimeUnit]) { (retOpt, unit) =>
      if (retOpt.isEmpty && unit.fitUnit(t)) Some(unit) else retOpt
    }
    val unit = matchedUnitOpt.getOrElse(msUnit)
    val unitTime = unit.fromMs(t)
    val unitStr = unit.shortName
    s"$unitTime$unitStr"
  }

}
cat: ./clientlifecycle-common-measure/src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./clientlifecycle-common-measure/src/site/resources: Is a directory
cat: ./clientlifecycle-common-measure/src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./clientlifecycle-common-measure/src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>cat: ./clientlifecycle-common-measure/src/test: Is a directory
cat: ./clientlifecycle-common-measure/src/test/resources: Is a directory
cat: ./clientlifecycle-common-measure/src/test/resources/data: Is a directory
tresataId_sub|booking_country|cin|source
|bk1|cin1|ccs
tid||cin2|ccs
||cin2|ccs
||cin2|ccs
tid3|bk3|cin3|ccs
tid3|bk3|cin3|ccs
tid3|bk3|cin3|ccs
tid3||cin3|ccs
tid4|bk4|cin4|isd
tid4|bk4|cin4|isd
tid4|bk4|cin4|isd
tid5|bk5|cin5|omstresataId_sub|booking_country_manual|cin|source
tid1|bk1|cin|ccs
tid2|bk2|cin|ccs
tid3|bk3|cin|ccs#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#


log4j.rootLogger=WARN, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%c] - %m%ncat: ./clientlifecycle-common-measure/src/test/resources/measure: Is a directory
{
  "rules": [
    {
      "dsl.type": "griffin-dsl",
      "dq.type": "distinct",
      "out.dataframe.name": "cda_distinct",
      "rule": "tresataId_sub, booking_country",
      "details": {
        "source": "cda",
        "distinct": "distinct_cnt"
      }
    },
    {
      "dsl.type": "griffin-dsl",
      "dq.type": "completeness",
      "out.dataframe.name": "cda_completeness",
      "rule": "tresataId_sub, booking_country",
      "details": {
        "source": "cda",
        "complete": "complete",
        "incomplete": "incomplete"
      },
      "out": [
        {
          "type": "metric",
          "name": "cda",
          "flatten": "map"
        }
      ]
    }
  ]
}{
  "rules": [
    {
      "dsl.type": "griffin-dsl",
      "dq.type": "accuracy",
      "out.dataframe.name": "dsl_accuracy",
      "rule": "mda.tresataId_sub = cda.tresataId_sub AND upper(cda.booking_country) = upper(mda.booking_country_manual) ",
      "details": {
        "source": "mda",
        "target": "cda",
        "miss": "miss",
        "total": "count",
        "matched": "matched",
        "matchedFraction": "matchedFraction"
      },
      "out": [
        {
          "type": "metric",
          "name": "mda",
          "flatten": "map"
        }
      ]
    }
  ]
}cat: ./clientlifecycle-common-measure/src/test/scala: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com/hsbc: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com/hsbc/gbm: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com/hsbc/gbm/bd: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com/hsbc/gbm/bd/clm: Is a directory
cat: ./clientlifecycle-common-measure/src/test/scala/com/hsbc/gbm/bd/clm/measure: Is a directory
package com.hsbc.gbm.bd.clm.measure

import com.hsbc.gbm.bd.clm.measure.configuration.dqdefinition.{DataConnectorParam, DataSourceParam, SinkParam}
import org.apache.spark.sql.SparkSession

object MeasureDQTest extends MeasureDQ {

  val pathMap: Map[String, String] = Map(
    "mda" -> "clientlifecycle-common-measure/src/test/resources/data/mda"
    , "cda" -> "clientlifecycle-common-measure/src/test/resources/data/cda"
  )

  override def measureDirPath: String = "clientlifecycle-common-measure/src/test/resources/measure"

  override def dsParams: Seq[DataSourceParam] = pathMap
    .map(x => (x._1.replaceAll("[-]", "_"), x._2))
    .map(x => {
      val dcParam = DataConnectorParam("file", x._1, Map(
        "format" -> "csv",
        "paths" -> List(x._2),
        "skipOnError" -> false,
        "options" -> Map("header" -> true, "delimiter" -> "|")
      ), null)
      DataSourceParam(x._1, dcParam)
    }).toList

  override def sinkParams: Seq[SinkParam] = List(
    SinkParam("consoleSink", "CONSOLE", Map("max.log.lines" -> 10))
  )

  override implicit def spark: SparkSession = SparkSession
    .builder()
    .master("local[*]")
    .config("spark.sql.crossJoin.enabled", "true")
    .enableHiveSupport()
    .getOrCreate()

  def main(args: Array[String]): Unit = {
    measure()
  }
}
#!/usr/bin/env groovy
// Declarative //

library identifier: "data-products-pipeline-library@1.6", changelog: false

def jiraId
def jiraSummary
def gitLog

def getArtifactAndVersion() {
    return pom.artifactId + "-" + pom.version
}

def getGitLogMessages() {
    return sh(script: "git log -10 --format=\"%s\"", returnStdout: true)
}

pipeline {
    agent {
        label 'cloud-slave'
    }
    tools {
        maven 'M3'
        jdk 'JDK1.8'
    }
    triggers {
        githubPush()
    }
    environment {
        scmVars = null
        service_account_creds = credentials("GB-GBM-BDNEXUS")
        defaultVersionUpdatePattern = "=+0"
        nexusBaseUrl = "https://dsnexus.uk.hibm.hsbc:8081"
    }
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '1'))
    }
    stages {
        stage('Prepare Env') {
            steps {
                echo "Preparing Environment"
                cleanWs()
                script {
                    scmVars = checkout scm
                    pom = readMavenPom file: "pom.xml"
                    gitLog = getGitLogMessages()
                    jiraId = pipelineApi.getLastCommitJiraId(gitLog)
                    println "Retrieved JIRA ID from GIT log: '${jiraId}'"
                    jiraSummary = pipelineApi.getJiraSummary(jiraId)
                    println "JIRA Summary: '${jiraSummary}'"
                }
            }
        }
        stage('Update POM Version') {
            steps {
                echo "Updating POM version..."
                script {
                    if (env.GIT_BRANCH == "master") {
                        echo "Skipping POM version update for master branch"
                        def gitLogVersionUpdatePattern = pipelineApi.getVersionUpdatePattern(gitLog)
                        def versionUpdatePattern = gitLogVersionUpdatePattern != null ? gitLogVersionUpdatePattern : defaultVersionUpdatePattern
                        newVersion = pipelineApi.getNextReleaseVersion(nexusBaseUrl, service_account_creds_usr, service_account_creds_psw, pom.groupId, pom.artifactId, versionUpdatePattern)
                    } else {
                        newVersion = jiraId.replaceAll("-", "") + "-SNAPSHOT"
                    }
                    println "Version to be used: ${newVersion}"
                }

                sh "mvn versions:set -DnewVersion=${newVersion} -Pspark2"
                sh "mvn versions:set -DnewVersion=${newVersion} -Pspark3"

                script {
                    pom = readMavenPom file: "pom.xml"
                    String buildName = "[${env.BUILD_NUMBER}] ${pom.version}"
                    currentBuild.displayName = buildName
                    currentBuild.description = jiraSummary
                }
            }
        }
        stage('Build and Test') {
            steps {
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                sh "mvn -U clean integration-test -Pspark2"
                sh "mvn -U clean integration-test -Pspark3"
            }
        }
        stage('Tag Release') {
            when {
                branch 'master'
            }
            steps {
                echo "Creating a tag for version: ${getArtifactAndVersion()}"
                sh "git tag -a ${getArtifactAndVersion()} -m \"Tagging version ${getArtifactAndVersion()} \""
                echo "Pushing to remote repository..."
                sh "git push origin ${getArtifactAndVersion()}"
            }
        }
        stage('Upload Artifacts') {
            steps {
                sh "mvn clean deploy -DskipTests -Pspark2"
                //release version don't allow overwrite, so we need to remove parent module
                sh "mvn clean deploy -DskipTests -Pspark3 -pl ./clientlifecycle-common-core,./clientlifecycle-common-datalineage_2.12,./clientlifecycle-common-measure"
                script {
                    String testReportFileName = "${pom.artifactId}-${pom.version}-test-report.pdf"
                    byte[] testReportBinaryContent = readFile(file: "target/${testReportFileName}", encoding: "Base64").decodeBase64()
                    pipelineApi.uploadTestEvidence(service_account_creds_usr, service_account_creds_psw, jiraId, "DEV-${testReportFileName}", "application/pdf", testReportBinaryContent)
                    println "Uploaded test evidence"
                }
            }
        }
        stage('Clean-Up') {
            steps {
                cleanWs()
            }
        }
    }
}<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hsbc.gbm.bd.clm</groupId>
    <artifactId>clientlifecycle-common</artifactId>
    <version>2.0.0</version>
    <packaging>pom</packaging>

    <modules>
        <module>clientlifecycle-common-core</module>
        <module>clientlifecycle-common-measure</module>
    </modules>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.8</jdk.version>
        <scoverage.minimum.coverage>1</scoverage.minimum.coverage>
        <scalatest.version>3.0.5</scalatest.version>
        <slf4j.version>1.7.25</slf4j.version>
        <log4j.version>1.2.16</log4j.version>
        <junit.version>4.12</junit.version>
        <common-lang3.version>3.10</common-lang3.version>
        <snakeyaml.version>1.25</snakeyaml.version>
        <jinjava.version>2.5.2</jinjava.version>
        <datafactory.api.version>1.0.5</datafactory.api.version>
        <classgraph.version>4.8.90</classgraph.version>
        <scalaj.version>2.3.0</scalaj.version>
        <http.version>4.4.12</http.version>
    </properties>

    <profiles>
        <profile>
            <id>spark2</id>
            <modules>
                <module>clientlifecycle-common-hint_2.11</module>
                <module>clientlifecycle-common-datalineage_2.11</module>
            </modules>
            <properties>
                <spark.version>2.3.0</spark.version>
                <scala.version>2.11.8</scala.version>
                <scala.binary.version>2.11</scala.binary.version>
                <hadoop.version>2.6.0</hadoop.version>
                <elasticsearch-spark.version>20</elasticsearch-spark.version>
                <elasticsearch.version>7.8.1</elasticsearch.version>
            </properties>
        </profile>
        <profile>
            <id>spark3</id>
            <properties>
                <spark.version>3.1.1</spark.version>
                <scala.version>2.12.10</scala.version>
                <scala.binary.version>2.12</scala.binary.version>
                <hadoop.version>2.7.3.2.6.5.0-292</hadoop.version>
                <elasticsearch-spark.version>30</elasticsearch-spark.version>
                <elasticsearch.version>7.12.0</elasticsearch.version>
            </properties>
            <modules>
                <module>clientlifecycle-common-datalineage_2.12</module>
            </modules>
        </profile>
    </profiles>

    <scm>
        <developerConnection>scm:git:git@alm-github.systems.uk.hsbc:wsdna-client-lifecycle-management/clm-common.git
        </developerConnection>
        <tag>HEAD</tag>
    </scm>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${common-lang3.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-client</artifactId>
                <version>${hadoop.version}</version>
            </dependency>

            <dependency>
                <groupId>org.scalaj</groupId>
                <artifactId>scalaj-http_${scala.binary.version}</artifactId>
                <version>${scalaj.version}</version>
            </dependency>

            <dependency>
                <groupId>io.github.classgraph</groupId>
                <artifactId>classgraph</artifactId>
                <version>${classgraph.version}</version>
            </dependency>

            <dependency>
                <groupId>com.hsbc.gbm.bd.datafactory</groupId>
                <artifactId>datafactory-api_${scala.binary.version}</artifactId>
                <version>${datafactory.api.version}</version>
            </dependency>

            <dependency>
                <groupId>org.elasticsearch</groupId>
                <artifactId>elasticsearch-spark-${elasticsearch-spark.version}_${scala.binary.version}</artifactId>
                <version>${elasticsearch.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.spark</groupId>
                        <artifactId>spark-streaming_${scala.binary.version}</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>org.apache.spark</groupId>
                        <artifactId>spark-yarn_${scala.binary.version}</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>org.apache.hadoop</groupId>
                <artifactId>hadoop-common</artifactId>
                <version>${hadoop.version}</version>
            </dependency>

            <dependency>
                <groupId>com.hubspot.jinjava</groupId>
                <artifactId>jinjava</artifactId>
                <version>${jinjava.version}</version>
            </dependency>

            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${scala.binary.version}</artifactId>
                <version>${spark.version}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>slf4j-api</artifactId>
                        <groupId>org.slf4j</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-hive_${scala.binary.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${scala.binary.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-catalyst_${scala.binary.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-reflect</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.binary.version}</artifactId>
                <version>${scalatest.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>${http.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <distributionManagement>
        <snapshotRepository>
            <id>dsnexus-snapshots</id>
            <uniqueVersion>true</uniqueVersion>
            <url>https://dsnexus.uk.hibm.hsbc:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>dsnexus-releases</id>
            <uniqueVersion>false</uniqueVersion>
            <url>https://dsnexus.uk.hibm.hsbc:8081/nexus/content/repositories/releases</url>
        </repository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>.</directory>
                            <includes>
                                <include>**/*.ser</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <source>1.8</source>
                    <target>1.8</target>
                    <fork>true</fork>
                    <compilerArgs>
                        <arg>-XDignore.symbol.file=true</arg>
                        <arg>-Werror</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.scala-tools</groupId>
                <artifactId>maven-scala-plugin</artifactId>
                <version>2.15.2</version>
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                    <args>
                        <arg>-target:jvm-1.8</arg>
                    </args>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pdf-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>pdf</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>pdf</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <includeReports>true</includeReports>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.scoverage</groupId>
                <artifactId>scoverage-maven-plugin</artifactId>
                <version>1.4.1</version>
                <configuration>
                    <minimumCoverage>${scoverage.minimum.coverage}</minimumCoverage>
                    <failOnMinimumCoverage>true</failOnMinimumCoverage>
                    <highlighting>true</highlighting>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.danielflower.mavenplugins</groupId>
                <artifactId>multi-module-maven-release-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.1.2</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>summary</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>3.0.0-M4</version>
            </plugin>
        </plugins>
    </reporting>
</project>cat: ./README.assets: Is a directory
‰PNG

   
IHDR     F   Rv±È  	IDATxœíÝ}LTw¾ÇñÏ`w“>sãC·]Û,(½ÉjZÓ¤up@%¸iäb,z›jWþ­U	QC¶¤Á%F)èR²zíƒÁlÄ€<(ÖÙÒÍBT‘FÙ>ð;mLl7·ÂÜ?Îœ™3ÃÁ
åýJ&‘sf~ç{Žþøøõû3V4ðK|S       €©k}ÛqÿÍëzä‘G#Ã0äŠtQ       €‰‰        àˆ        àˆ        àˆ        àˆ        àˆ        àˆ        àˆ        à(Z’|>_¤ë        L0Ñ¾ýÇ¯‹t       €ò
:æò
Ð}       SoÀ7hZ…KÈ        ‡¬ØÅüc       €SVìŠ@       €I€        àˆ        àˆ        àˆ        à(:Ò      `âs†rF¤K¦¼ŸO>ù4àóùµ     0,C†¢—ª««UZZªÏ?ÿ\wîÜ‰tYÀ”óøãë…^ÐÛo¿­eË–Ió™      –ËÎŸ?¯µk×êêÕ«„Ç@„Ü¹sGW¯^Õš5kTWW§ñøÿ t      `H>ŸO†Ë¥ýû÷K’ââæ¨¨è]-YòJ„+¦žK—.k×®Ýêì¼¡}ûö)%%E÷îÉÃÑ2t      `H>ŸO†µ¶¶J’Þ%<"fÉ’WônÑ»’¤7nH2¿£c‰       C²Â©»wïJ’Ü„Ç@DYßÁï¾ûN2        B       Ž       Ž       Ž       ŽÆ&@n>,·'ÃñUÞ<&W|ÈZUî)Ðùnç³Þª¹sëä}HW{Øë     L-Gä)k{ˆ¶éPê…¬ØÓ üÔ=ªíyˆ—	èSíÖLyÂ¯9x«÷È“š©üê¾[ §Aù©™òlm “Â°¢Çlå¹UY–¢Xû±æÃro+PüÉ÷´|æ˜]      ‘ÖrDžüÒŠÅiÁ6J-Ò-ÕÛQïg—Õ¤çôÆŒ‡t™©b†GÅÕžHWI`|GX,xM;çvèâµÞà±°nåðå¶Ás;ªZu>7øž¶rh
¾¹»N;B:‡{u>×ÖÖåk_Ûí9ìÿ—¤V•{
U©í]7\Çô-ÊºnoUÃÚ–V•ÎèTgXMö{òßÃŽª^     LžüæjŠB:xÛÊ2åIµ^¶ÎÞ–#aÇÚt(5SžÔ=ªí±ÂcIº Í©™:Ôb~¬»ó¦´b±ýŸéÈµÖ,k³­wDµþîÝà¹ ¯íÜÈº{­uýÝ¼au:…ËŽ˜¿V·tà~ž…­;¸Öö¼†ª'øLƒØæ±ÐÎlë}‡Z4¨Ù~ßö—õœ1r·oßVsóÐcš››uûöíq¬è§‰ìäæÃro“6œVcÃi5žÜ¨®mÁ Ø[U ìsÉóovjoûHïÕùÜl]L9h®ÝpZã*”îg½UÊîÜ¨Jÿ¹Ê¼[ÊÎ­“Wó”ÓP¨tÍÖÎ“§•³`ˆåÛëÕe­}r£º¶CdoUÒKŸÔ]™wKÙauWžõÙ%ê:×X6Ñ,»ü…ÑýO]lOÖ›+§æÉ     L8me™Ú\c?rA›­
óßÒû+Ìc®îS[™/ÌÉÕ²!»‹Ût©FZ7Mš¿X«$5Õ7Û>5CìU¯&†\³¤üfðÇš¢`HÚrD«mçšÊ‹Tr}¸;êSíV+Ø–tý¨þtÌ9lª¹ &IJxE‹Ô |+`·Õµ9|ÜÇõ£*±=¯¦ò¼AnSyží™ÞTI±ù<_]*é¦?³BgóYIKµdþp÷„ŸêÄ‰Z¾|¹Nœ8áxî¥—^ÒÙ³g#PÙƒß ¹ù/ÚÛ>[I‹¦KêÕùê•¾/K¯ðÌåçI{?j•Ô««uZ”÷Zà|âšZ4ški£òmÁkâ–B¥ŸûÇÙÆ±+ßScøÈáÌµ­=3Eo¦I•­’Zuª´#ä¾bWnÑÎ¹õ:^Õ+5_Q¥lðÌåçÍ®»àe¥«^­0úÚ%]K{Yö_s      ]CñRó+v©¡ú-%ZfÂ}R}J
Õ§ôIN¼tý¨>ò‡¢‰¹»ÌØ
E6hGê4I‰ÚTmž“–êýêSÚ4_RÏ×ê’4ëYó=KVHº~Y×z¤áÓUÅæõÍÀZêú²ORŸj™¡îÂœR5TŸRÃ±
Z8ÜM¶œõÌfM
Õ¥rë¦ó{­ûÞïQìŠýÏ ä:_|68^ÛÙž•¤3Ÿ¶9¯k=Ÿë·Õ-
Ô[þfÝ+;æL±©Ôc=%lÐÂæQÛµk—ÒÒÒ”••"Ÿ8qBYYYZ·nrss#XáèŒÝäö
¥{*ÂÎÖÎÀüã>Ýl—*·e¨2ü³iÁó³þ`ë¼ùŸJš«¡¾†!¼]·¤özç$Å®\«ôÒBÿy{]#÷LHØ<3n¶T÷•¼ÝR—f+)ä_Æ¦kVœ­®¹Kd¿Tì¬çm?ÍSRšt¼«WZ0]ÝJwÏEa      ?ìÕõ£Zz4äT×—}Ò|3^“¯3å7%Åk{¾gøf¿žÛjÒR½á9_]*Õ\Pãg}ZöìßüÌ¿Lƒ²õ~SŸ:ýað©ÓÌC3È 5
Ñ…ìýÒì6^cš–­_ª’AÝÅÒÂä÷bÍá`Åš@÷ulê­*/Ò™/¾–×vGÁu§).AR V3P?SsY×z<úÍ§$ÅkûêáÛƒ]âKõþþû<©¢ÂÌ$³²²Ç¬ðØ:7YŒÓ&zþ¹Âik…´éû†Ñêtð'ÔnžrN+Ç?êbïºíU²6dE¼Û7Ñ¬küSÞ•Ïèâ¹d%m‰pA      c¨©³O’ÚvwZ­ƒæø…eV˜ë íÓRÂ†`£ÞüÅZ¥:Sß¬Úßš©ûwC>bz”¿þ¨šüÝÃ›¬ŸÃßç‹4Ä
ê
šU#s|Æ0›
z«÷øÃãxm?öVÄ3²É.<DžŒá±4n#,æ)çäF-:WhÛnšâçJ]]CmçtÞìJ‰ØYÏKí·ä0­"Ìt-/;­Æ†ÂÑ÷ÕùUÈ)èîì0»’g>£YêÐÍû›{ÕÕ9t]Þ®[¡k/xYéí—tµêŠ*_     ~füZ³¤W®?ýh92#¹©ü¬ÚœÖ’$õé__„wöZc,ü³ƒï˜†òwðúg0›õœvrì³Ï…Õƒ1ïg—Õ$[í=·‡Ç’m‡ä­þÈìTþí¯G([c,ÊšÝØŽ]Ð~¶ùÏ«Šÿ8ÌÜiŒFEE…rrr”““3)Ãci<g ûgý^+Íöo67]Ëÿ¬k¥l3‰{u>7Ã2[çÿÜ¥ó@aÈ¸‹™q³C6œkû¨B×¬“^ÓÎ¹õÊ>`ëdn>,·3;oUÜ¹uÁØ?›8i¨MóÂµWè”67Vö¹ÙÚ¹fž¤yÊÌ›­Êm‡uy«h¯µž¿®ãVÞ]§âÒŽ°Åç))­C{Kë_     &·š"yR÷¨¶'î®NÍ”'ðÚ£ÚÉ¾®*¶fþ:l,§Úœš©üêu^·æ%®Î-60Ä?!™3˜=©™ò8Œ¢h+3ë>Ô"iþïµ=!X“'5OŠñ‡»Žé¦JÖ›×„»¯Ž¦ÕÐ	b¾ÛÚpP’Îäÿ~ò­0¬¤¤D%%%‘.ãë&z±+ßÓÁ4©r[/ÈRež´w]†Üž¹=Ùº˜rP²6˜[¥Ê¼[Êö˜ç³•¬ôõÌÍé¬óÝ…¶óÓµ¼¬Péç
ýkgÈ½M±+·h§*”8wK;OZã+üîº[Çt˜´ŠÿÀúl½Ò÷g(Ç®|/¤îôÒçm£1Ìºf•f›Ÿ]wKIöMôüÝÉÒhm     €‰$®%æÚ6hó³º]½Õef·ïŠ]Ú4ß?óW’jŠÌ°6$•ôÕ?tFñŠï”õÏ-~ ñóß
lV'IZ±aÐ=„š¦eû­ÍýÌÚ‹×?wßËÄ¦æ†¬»ªØÿ\lÇ’¤„
Ún{^sJÍÍG!öw¯˜ú¨º± #åJ‰ïÜK[#]Ç™³”5äÜäŸ‘æÃr7¾¬Æ-t     €Èéïï×¯b~¡§žzJ’ôÍ7ßD¸¢	$0»8^ÛYAø­.¿©…9¥*f~óˆÖMØ OØÈž~úiIÒ·ß~«ÿøŠŠŠz(ë¦ý}¿þ÷ßzôÑG#Ã0Æp=ü$mõJwgÝÿ      ˆÿ\ç&ÿ¨‰à‚	ºyð Æu„F »N;<ÊVáÏ¿Ë     `RKÔ¦cÁ™Ë6¡ÃÏÉ$a     €ñÄ`âÏt                      à¾ž|òIIRã¥Ë®˜Ú¬ï õkÈ      –ÏçÓœ9s$I»wíÖ_ÿz%ÂSÓ¥K—µ{×nIÒœ9säóùÆüšÑc~      LZ†a¨ _[·nÕë¯¿®ÎÎZ½ú¿"]0å½óÎ;êè—acz:     0$Ã0ôã½~-_¾\~ø¡-Z¤Ç{,ÒeSÒO<¡_|Qü±’““u¯ìd:     0$Ã0d¸Ýýá{¹“’”’’"—‹žD Rúûûu¯¿_wø^QÑÑÈ      ˆ¬¨¨(IÒ÷îéûÿ þþ~ù|¾q™¿
Àd†ÃPTT”bbbønŽ%d      ÜWTT”\.—bbbŽ²‚ä±î<¶      `DÆ3´010°       àˆ        àˆ        àˆ        àˆ        àÈÅÎ™        §¬8Z.CÿúßnÝ»×/ŸÏg{óx–       o>ŸGGGI.‡ ÙpúÅ/©è˜Ð Y$È       ðsæ“O†aÈårÉpƒº£
—KÑÑÑ*       0®Á[æEKÎ³-        SÛàH                †@€       pD€       pD€       pôÿíi˜egÏ    IEND®B`‚‰PNG

   
IHDR     û   ‚”    IDATxœíÝ{tTå½ÿñ÷L‚—VQ(8(KDQBºµjŽ&?ƒ’ŒZ ÅvÁË²%ÔK—ÅKS‹À*¨„Ö_•DðT@šÀ©L‚%4Ñ¦z,p~!(0ˆ¡QRðBU.ÉüþØ{®É„„d’ýy­•%³÷³Ÿyfb>ûÙß½g¶íxÃI""b)ö®€ˆˆt>…¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆÅ·uÃÃoþ'Ù/|ÔìºÑ/aþmµyP""rf‘™ÿ¦¦Q°õLô,""¡Í3¿&³ü­ ý—(®øÜ‘W‘G	W0ë¿~ÃØþ
²~ú4æív‘ýÛÕäŽ4þ½ýù‰L[Ù?@Ý/³	€1,)áDë#|}kúhr$sëÓT<rUàa{^ƒˆH¬9ã5ÿ¦å¡˜÷Ó?°Ý|´ýùðÐ(þå²þ@Ä²@hl`Úô¿ph.xaÓ2ZÑÇóÿÜú‡¦%¬uO3óÍƒúDDbE»gþ›^˜Fú‘K¯`Ö]WùÇ_>"l–m¼úæ¸#†È™t33ñ)Èxšâ•üãÀÍŒõ®5‚÷Ê(^|3}	†õ¼•26döèÃïç0WÑ×\Ýü¹Š|
""1¢ãgþW>@q¹?±{3ñ‰¤gL4BØôñ! †§Á˜I›ë3‚3ê ÿÎà*&=|ð»½°½Âè/ûþ›!Þ÷¶{È3Üƒ²ÓÍ>F^o¬÷3ozaš9†‰!ç,:ê5ˆˆÄŽv‡ÿè‡—PQ¾šâ‡¯0ì¨ä­)wøƒyäƒáÛ›!~ÂØúæ¸üŠæWœ–«È-_MÅ=ÀhsIñ/'’î/EsZ¯AD$vtØÌ¿ïm¿aÉ­ 1ïY=¾?C®£d²šŠÐŸÅÁ™ºûŠòÕTüv ÅáÁ|ü!¯¿ðpCÐ7áûÆúWþ˜å~ó\>0ì9NiÀÍÌ/_MEùÓÆ‘Áº¿³½_ƒˆH¬hwÍ?ÔðGž&{ÝÓïx™çÞLfþmñÃ›¯€˜–±!¬­q5Ls'kÍõéW…/X÷4éëB_™Æ Æ1ëÊ
ÌÛñ2Ù/‡4-µ,êgn½žá\Ä€Žz
""1¢ƒkþW‘kÎz7½ð<ë³á`9Ä0úá%æe1vñf]I”õAÙK20†%Yws}ŒaIyëO¾67F®|€bódqG½‘Xa;ÞpÒ×ÕƒhIà}]7/"ÒaôÝ>""¤ð± ˜/ûˆˆHÇÓÌ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXPüï']=édñçœsnWADD:YüYgŸÕÕc‘No³Ùºz""ÒÉtÂWDÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
ŠooGJó¹ImÈ’4æº§0´]½î¤Ð5·s2¯,L§Oû†Ø-4}¡cÞËÓP³Œì¼J\s‹˜štêæ»
òÙ?qéØUC^Y'WDÚ¬]3ÿ]9ÍV%y®|*¼íéÙªÉ-,¢Ø]D±{¹ÎJò\ËØÕYOŸ4…bwë‚ÿHi>yeÁÇCs‹(Vð‹tmŸù×,3ÿøCg{õT<6ƒO-«w’ž;Ìhë­ êrªýÛfÎ¢Ø¿ÎdÌ»æÎjú|}$O[Àœ¬~m~ìëGú¬ÉTM]ÎªR—ùZÍ#"³Eè=ôý#âˆ©ùuæïŠ4\Tâö$’;3‚ùþ™äz0vNsH÷.ìô¦æ°gn©ïDÌü#~_Á±úûLnâr
šü?$"¡Í3ÿ]ïTàšúGkV²s2¯D~€²yd?VÁóaä,Ò¸h}T/™AaM[GßM8.f P][šf)Ì]Ä+Óqç™GXæŽØ5·ˆâÂÉ${–SPZøßÛ4æº›®ÀSÇàYE»çÞ\}-°~.j)˜WÁ‘¤)¼2-ÿ‘J“#ó÷Å´GŽ5ÐoL4ÇD%«BÇ$"g\Ã¿žýµ i¤Fþá;Ò™:ë\m„v²F9ð,gM
ÀNÖ˜³H×\³ä17-¬Ë#[ª¨]ïž…p¿ÜôxÞmTy 9c}€>)©$SËž@uçåPèMgŽ»È<R¨§º¼2¯1vÐŽÐu&g*ÉŽž7°~ã§%‚§ŠêS”ôŒßW"©)ÆóôÉšhì8Vïi•À@;8é,í<á[Ç~/;©2ëïN?ÒïM£ ¯’ýŸÔƒã3ö8'3Þ¿#IºÆ(5˜Õ;w^Nø§ŽC`‰ÂxëŒ#Ÿ%3È^²ü“zÈr‘ë¬¤À|ü¥›= ±s‡jü¾ÒŒpÆ™@ÿÎˆ4ÑÆðïÇÀDÀcÌ<ÓCÿÈ½äO­ãN÷†ÒÁNÀÓ#mÖ©v>Ýœ×Ø1&'öGÉ QÎu¤/,"àUCî¼e¤º]Æû_ûGÖi;Éþ‰‰ôøßH7×æšÿÐŒÒŒ;/ôj”z*æ-§šJò«àˆ'VÓ­§âUã|ÁÀKûûƒe 8Rº:l†o„IhÙÇÿ3'|ÇÓÃ%3ó¨É1‚T'T—oãFÈg›WU…þ»OÖÏŒ²š3þô#9#´T³“BWÙ;[~âP‘å¹S•‰–¤ª¶øÏ;¬ÆM"¹‡µ¼¡ˆtš¶—}’ü¥†Jò\•+ÉeÔýûLœLrÙrª#Ë2QKv/©mZÖ1ùÃ¤Éúf®êÞj)˜šCAàqèU0ýH_8‹=®yÜïZ;Ãt5‡¹µ9ä¶M$·Ð<ï¹.p2¾•5vçd¿“Cvž9ÿùœ”T’YNÁÔª¦-àÎÐméÌ)„ü©þß¹y•PÞQ‹t7¶_îkO­ú×i^ê™<m2—,ÿWdú X×^’©÷Y¤çiwøKO¥ðéÉþ""¤/v± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
jóÍ\>ÞýÏŽ‡ˆˆt"}¥³ˆˆ©ì#"bA
Rø‹ˆXÂ_DÄ‚þ""¤ð± …¿ˆˆ)üED,Há/"bA
Rø‹ˆXÂ_DÄ‚Úü­ž GJó¹I­ù(‘ÜÂ9¤;¢­Oc®{
Ckë©xlóaæ,Šs‡µg8""ÒJmþVO#Ø‚^³Œì<¢>>RšÏýå©¼²0>À®‚òð¾±#¨ÊXÀœ¬~öâDD¤ym,ûÔS]^Kò4Wp&Ÿä"×YIU±¾âÕÊ°õ}²&âòTQí¼¬*K$w¢¦ßô{Ó¨.ßÆ‘v¼i6†?ÒEÌÒëÙã	ÿ÷ÀKû…m3ØYKÕ–zðÖQMCJD8HöïDDäŒê°¾GJWãvNf|’I"ƒCÃ~LyèL èjÇÅì¨ÁˆˆH‹ÚuÂ×Ï¨ÿCn¡QÏ‘ØÖî™0øÃ¯ôZö„•pêÙ_òÐSÇ¡ÐÕÞÏØßÞÁˆˆH«´+üwä˜WüD?;aÿ'õ!ËêÙãI$5¥ŸQß§Žý¡;oÕÎT’Ãú‘3¡Íá¤4Ÿ¼²Èk÷ýÌ«w–¸Ùh¿·?ÜéÜ™YKÁêæZóê Œ*‰ˆt‚6^ç¿“B×<ÜÍ¬Iž¼V_ò‰Mmþ—ˆˆt_únRø‹ˆXÂ_DÄ‚þ""Ô!Ÿð•Ž~•4÷uÙþ+®öOÓ7¡ŠÈéSøÇÿå¯iÌuÏ	^[³Œì©9T)èE¤ƒ¨ìCvÌ €É¼ùÁ¹¤)N†%3(¬éªÑ‰HO¢ðÞ
V•ëÞ(_ŽçHçÎLp¿ZõžGJóÉvå_Z¥…ˆˆAá+¼uT“FjRô&CoHkú…x&ÿy×ÜÈû,ˆˆ4¥ðG>©keËˆ/Ä¨Yþ©-ì<DDütÂ·»+ÿ=ÙžZ’§-Pð‹H«iæ#ú\šÐÊ–á·¿¬öÔ’ìL¤zÉï©Ð-0E¤•þ±Â‘@2•Tµp5Ï®w*›Üþ2yÚæ,ü¹ÎZ
æE?,"Já+Nu5O‹W÷OÀ³œ5ºTÎ”£G±ÿñ
â§N'þg¿„ƒºª¬;SøÇ¡¹Èe9÷»–n‚˜òZ-Õõ“¦07ÜyÛŠ´“íƒíÄ=žO¯ëÇ÷Ì|lUïaÛø6ñOþ¦«‡&í ¾1¥é‹H.Íç~WNÈòDr‹"¾Þ¡©¡'“\¶œ¼‚ktciŸƒÝ½ûŠblîl¾ÍÖ¹c’¥›¹ˆH€mçGØWc³Ž~µïêáœü¿¡¿>SÒ]iæ/buß|‹½¬ûÊblÕÛ¢·;ûl]ch¼+ßÈ«5óïæþ"eÛ]‹}e	ö5nøê«¨í|—6|¾Þ½;q„r&)üE¬äØ1ìoýÛÊbì›«£6óõê…oìMøîÊ¦qT²fù=Â_Ä
öì%nÕl%obûü‹èí.DÃ]ðM¸
_Ÿ;o|Òéþ"=”íÄ	låoµü÷6EoGcFšQÚùÑ(°ë
p+Pø‹ô0¶O>ÅþÆì«ÿþu8j;ßÀ‹i¼c<o‡~ºjÇjþ"=ÁÉl•#nE	¶ª÷Àå
n»_úÐx÷¯ÿÄÅuî8%f(üEº1Ûg^ì«×bcMË_·àèOÃãñM‡oÀE7@‰Y
‘î¦¡ûßÞ3®Ø©ü;466ßÎf£ñ?®£qR6¾®‡xÍò%Há/Ò]ªÇ¾ú¿±¿±Û§¢·ûÞ÷h¼ãÇ4Þ1ßÀ‹;o|Ò­(üEbYc#¶÷6·âOØþúœlˆÚÔwýi¼3›ÆŒ!^ÚÒ2ý"‹þu˜¸’uØVcÛ·?j3ß…Ðø“Ûi¼c<|¿µ7Qø‹ÄŸÛ?þ×øÊ…·6ÂÉ“Q›6Žþ¾»²ñÝòðuV'Rz
…¿H³}ñ%¶’uØWc«Ý½áùçÓ8ÁEãð
Iì¼J¤ðé
>¶ÿÝJÜª5PºÛñãÑ›þ ‰Æ;'Ð˜™çžÓ‰ƒ”žLá/Ò™ŽÅ¾Ö}E	¶>ŽÞî¼ïÐp»ßÝð9¯è¼ñ‰e(üEÎ4ŸÛÛ›¤¸ÿß|½éUWÒ8)›Æ¬[à»çvâ Åjþ"gÊÑ¯±¯[o|±ÚvOôvçžCã­ci¼{¾«‡wÞøÄÒþ"Ì¶cöÂþfüû›¨í|C‡à›”MÃí™pÞy8B…¿HÇøæ[ì¥°¯ø¶š£·;ûl|Y4Ü•/y„n’"]Fá/Ò¶ÝµØW”`_³ŽÚÎwù÷i¼3ßx¾t+Déz
‘Óuìöõ±¯,Á¶%ú­‰§Ñ+ÄÑ?Ð,_bŠÂ_¤•lµ{±¯*1n…øÅ—QÛù.5Â­øúöéÄŠ´žÂ_¤¶'°m¨4®ØùŸÍÑÆÇá»éFîú	¾ku+D‰}
±†‡µúËÏlûöc{c
qús+n…8ŽÆŸüúëVˆÒ}(ü¥çûæ[âz„†{'ák)üOžÄVñ7âVc«úŸèíìv|i©Æ­S¯Õ­¥[RøKÏvìñ?ÿ%¶÷·@Î=Í6±}zÀ¼âZ8ÔÂ­/êg|ÇÎO~ŒïbÇ°HçPøKe;~{î,lßxŒÀmÍ°¿ó.¶•%ØßnùVˆ¾Ôki˜”ïÆTÝ
Qz…¿ôL'O÷p¶·«Â—¬ÜðÜö™7úößëKãDóVˆ—^rfÇ*Òl¾þÜwêf"ÝÈÉâûOìë7†-ö9¯À¶»Z¸âµ£i¼+_Æøzõ:Ó#é2
éYˆ›ùö7×·zß…à›p
wŽ‡Á—ÁÁ‰Ä•}¤çhl$îñüVã¨d|wÿ„Æ›Óáì³ÏðàDb‹Â_zŸ¸§ŸÃ^²®åvçžCãÄq4Þ¥[!ŠµécˆÒýù|Äýú·ØW–œºíñ4^“¢àËSøK÷æó7ÿEì¯­l]û†âÎÃþ×¿Ùq‰Ä8…¿tkqÏ¿„}ék§·ÑÉ“Ø§ÏÄþÎßÏÌ Dº]í#ÝÛÉ8~ÛñcøŽŸÀvì;ÇOÿ=vN‡cÇÍu'à¸ñøîš€ï¬³ºúUˆt:ð	õT<6ƒO"¹…sH|sÀN
]óp;'óÊÂtZ÷åÀF_{î-bjÒN
]«ÖgKN·}ˆ3¾Qó;ç ÐÒLF³‘ •}bH²ª¶„|·LÍû¸ÛÕã0¦ºO#È½Ÿ±¿]Ï'"Ý…Â?†ÌH…Ú`øïz§WfZX›]9d»ŒŸüÒú¦Ës³'°t'…®|*¼`·Í~¬‚#a=×S1o9ÕÔR0¯‚#5ËBÚÛÖÀ‘Ò|²*‚}ìôp¤4?ØÈr‰=
ÿXréÅ,{Ÿ] ì¤ª,Ô‚«”æ“Ç,ŠÝE»g1pÉï`¯YF^YsÝEÏJ`¿§™¾½õœUØÖå©¢:ì«mú‘>k2É$’;+>I×àòÔqÀ»*O©IfÓ²*˜eöS6Âc÷—§òŠ»ˆb÷rkÍå"“Tó)ÃHÍœGUÍ†ò>îÌk˜Êûµ‡jk¡lÙeÁ-’·Ô3°¶2g1À1‚T'!³“cCç ÉmõXê¨Î¼†9`	dN4KIÃHÍ„UŸÔs„:ðTr¿ky°‹wv25iX›ß
9sþ1fè
iä½³“T*qÝ0BÂ yÚæd…ß1jWA+:®YFv^%®¹E›'‚O,§9‹â\…½Hw ²O¬IºWÙjVÕ&28âDmÿÄDª—¸e¡B—Q‡zCøËEÞmT5WöpNf|­?‘œä"—Õ¬*)ù@ð¹ØIU¼´}.M€²ÕaçBÏIˆHlÑÌ?æ#5³–¼ÚÉä:€º|Ÿ¬9Ì­Í!ÏU	˜GI S˜›i.w¦ár6ÓmÒ5¸<óŒ²Lædr•ìñ~%ãbš'|“¦Ó‡~$'BYò	pÖ±Ê•C5³}s¯LËçþ©9ø—géž¶"±Jò’„~fÀXr¤4ß8±ÛêÏˆH,RÙG¢ØI¡k˜¥"éQ4ó± ÕücˆÏçüˆH×°ÙlŸžLá#(ÛµŽßmZÌG‡=|uü«®’ˆåœÖù\Ñ×Éôkåæ!c‰‹‹ëê!1*ûÄ€††Êv®ã~w+®¥‘NQxëkÜâÌê±; Íü»˜ÏçãäÉ“,þÇó ŒwŽgNê®ìweLÄzvÔï ¿*Ÿ5ž5¼ðþBnºüfìv{,éjŸ.æóù8yâ»ŽŸÌRð‹t+û]ÉœTãS-{¾¨åä‰=öœÂ¿‹ù|>øæä× 
~‘.æÿüòø444(üåÌé¡ÿo‰t{=ùoSázêÌB¤»ëÉ›
Rø‹ˆXÂ_DÄ‚þÝÔáÒ'ÉÈšÄìÒC]=”m_<‰ŒÅÛ»zgDwùˆ4GáßMõÍúå¥¯ó\Vÿ®J¶SY£.ïÌ1â­G'‘‘õ$oyOÝZÄªþÝTä¬sûâIddMâw¥åÌÎ2þíŸqû×E¢¿ÀÏ£ånæ92²&ñ»¨.%tì»é:¼ŸRÇÒSú7ÿ|#‚æúnâ­OtÛù]`Ûð±Ï.=^ó}{´œ·"ß/oÓ÷TºÎÞ½{ÙºukÔõ[·neïÞ½8¢îIáßÃ”²Ùÿ ì×Ì~ôI~¸áûn<g|ÍRî(Ø¾±§ùþFÄú’Ù‹©ˆx®í‹'…ô
°‘_„ì@oy‡Í\Æ G”ç+ûµ¹óêÏè1C€TšÁŒw+Ày£›Ù¾¹ñ´l8?î&cÛ¢r×,5ÆîœÊÌÐ£'O!ÂÞ¯'™þžúwÒ5^{í5ÆŽËk¯½ÖìºýèGüùÏî‚‘u/
ÿž&ó	ÊK_çÜ! lö\Æ‹¥¯S^4•Q ž½ HºòÒ×ƒ?f0nþøpˆ·Š60*÷sýel»7°QÒÁ9•7Ì>ÞÈžBVšáxàãÝà¼Œ![ú3üe«¾)70
(yÛ˜Y;5f$}[1žàQÁÃ,ð ìfANÄMÒ}¼˜	x
¹cöF`3fgÐ7ì
ÂŒ¢×)/}‚	 žÝ`>ç‹™F‹ºOTãïJO<ñ·Þz+>ø`Øàµ×^ãÁä§?ý)Ó§OïÂvúb·fÂÃè{éeÀnÈ¼–á ŽKH€àÖÏ[>³à{ nb²Vœt;3œÍ`Å,é`iVaØÖuŸ‚$ØWëo éZ&°‘’‚‡É(0ÇúÜëüÜ—0ÇHÒ°¹ì=¶OïÏ¾
»Cžû©ÇÓJÃï˜Ê¨2ãõŽÊÎ-Žˆþ#
ús¹ðËV.D½H—xùå—xðÁËüÁï_'-Sø[UÍR2fo)w€Íï§Tx !Ç_RÎÏK_çç!;›’Ù“(É|‚òéÃ	”~<©,½Œ:ÁW+ôÍúåY`œ+x˜ž!Ì(úUÓp÷î
ìè6oØÊá¬È™¿t‘; ÿéQø[Ôö· ÷)þ$ô™Ö»‘å¥·¥™š?‡Ï²ýGÎ©¼±¨™ ­yÍÜÄäÈûÿ:2x®4ãì¯)){íÓ‡3ég7%…ackÕxZ÷ªù]èÎSÈÊšŒàÑ‡t;/¿ü2^x! ,èâÑt/
‹+™=‰’&KûsKÎM,˜½‘Í2ÍF9	©³'-JÊ"Ë>ÆŒ{ô'{ÁyC Þ¸ôÉ¦'|!|vïÈ`rf!›Ë n"-Ê­Ï©.]i¼ÖÌ'(¿ãSfçR2{)i¥÷µúCbB¿mtÂ×¢†O7OhF`¿À'PöžqédÒ}“ÆÆúé¤7é#xÔoÂs¿âÇ!6mØ
‰—Žúfý*¤?“s*oLÝá7'ž›”|Z1CnYô:å¥%o9óŒó/Nnîh 6ò]¾)¤Û8v±††¾úò+†½ü} ¾™õMÈ¸Œ3P“7Ë4ÜÄ‹]0SŽµñHÏvî¼sØùÀ?9¿÷ù=òVŽ*ûH³W¶”ýšŒÐkùOã$lOHw§²4«oÖ¯š”tš+ÓXu<"ÝÊ>],VË>"Vf…²fþ""¤ð± …°ÙlôîÕ€õ;ºx4"ÖæÿìÝ«76›­‹Gsæ(üc€Í	ç]@~U>žöGWE¤ì¨ßA~U>`üMöàì×	ß®ÖØØÈ7_MÉÿû3Þ{¤«‡#"¦…×/æÇ#Çsîw¾ƒÝÞóæÉºÎ¿‹Ùl6â{õâæ!c9yrË=Eìý÷?ùºáë®šˆåœ	ß¹Œ)Î©Ü”8†ø^½zléG3ÿÐÐÐÀ±o¿åèWG9zô('Ž§¡¡ŸO¿‘Îb³Ùˆ‹‹£×YgqÞyçqÞùçqö9çôÈË<A3ÿ˜güOÏwÏû®ü(üE:‘ÍfÃf3þã{õ">>¾Ç?(ücF\\v»^½z)ôEº±°õØrŸÂ?†Xá8‰
=ï¶ˆˆœ’Â_DÄ‚þ±Ä[Ì½ó/d€ùsï[Þvt¶‰Åóïaíét±m^*æ`;žµÓx‹¹·Å±zYûR{ßÃèý.ÞÖÁÝŠt2…¬Ø¶ˆËJ7åsÌüœ3=ŒÛãl{xyëØÒ±#lÞ¶E8ÝŒˆt9…ŒØòÁ3Œ¹q[:7ÞÃôdÿccÆiÃöà[÷0`Å"ûVl2Ú®¹õ¸yhM1Í£€Å+îaÀüEÆNaÛ¢À†±M¸ƒoÝ\ßÂ{ËàÎÅÚjoÔíÃv`¡G7!ý6ÛÞ[Ì½+Šƒ¯Ûç–2`Ù}¬ÿò>’Ìm¢ÎÄ¿x¾`›MÁ÷+lÇú‡oË
ÿ²×ÙÚØÑšùÞúVhÇ(±Ká6ñî>H¹Ä¾Øá Åa,Û²ÂÉCl0Ž
2GñÐ²EÁ™ý>¸næç˜²”±ûžg­×Á¸ñK‹‹—Ægs n¶ô]È™’â-æÞ²Í¼4Å8Âxé‹1G›Xµ•àzîcU³áº‰wI%eD*){ª‚;ˆm‹HÚ3š™ÆQÌ«›énbqèÑÍCæØ¼ÅÌ<üHÈÏcÁÀÜwû®Žsñ6H¹Û|­½—žcúˆæßÙõ_$0æçÔŒtñìß‹9ˆ—µ/ÌÏƒïå3ä½uï?òÚÀã_–ð®×x=®}Oážù9Æ'°åËàë}=5#7ã
Ù‘"¤|¯  ëIDAT>K*fþ1d‡.;þ1!A½[ZïeßðøÕ£‡#RyœÍìódï8Hi¡—ÀÎå`ë{Oà:€ƒë»X¸.¤åh®äæ¡e2à¥*®{(J¸n«‚«Gí/0ƒã(æñëý;ðöÏz¤I¬.aý¾1æìÙÉC_†¬ì½”;GÇ¹åÓÓ›FœÊEÀE—Œ2—Ô±ïKx¶Ìœ­—=þwŒ&ÅáŸýáY‚¯‡A©Æ{ëHeœÿwå­cæû4ÿB’¶ºa_U`§<¶oÂiU¤3é:ÿ˜à`Ð°öS/ŒIFo1÷.«cúÌI>¢”»?ç ^Ö¾ä$iþ}Œé	™Á¶|ðÏî{†gÍ{êŽ­ö2î–¶Ms›ëŸfr¾ÉÑQ›¸xiJ33òm‹Pög~Î›X<ÿùVôõî™Fìt½á¥!‘¤™ŒH¹ú)Öo},¼þ¼æ>9‰sçðìfIa[Ï2ŠAmÍÁ‹ëŸíâåÝ=îˆYê&Ï_ÄŒ{èsÜƒšëdï~,»˜²ÌÒOÊÕO™%–#Ry|ßóMjà]2Šõ¡e£f¥¨AþÃ	G)_Öµ!dÔÛÍCõ¿—‹Bjõ4¶Ufþ)W?œÑ{«Xë?2q$Â3,6Kfßº§û\-%–§ð#5kùÊkgÃ)w5o£T±™—¦DÎ6#8H	œð\—Í«ç2Î%„ÏºG3=\æ‰L×K™9+ßVÅ³¤bô™Ê8ÌÊˆGq_<<Ÿ0šé¡¯Ñ”íÃÂ8pRwd†ÎÖGsÝ gclý¥—Æ=´Ç÷5ó^ŽHåqÿó}ÀK½Ýì;hŽÏÿ\kêH	”èF3}ÊRØê4Ë>£p?ÔL¹ë”—¥Št>}«§Ä.o1÷®ùÍªˆ´‹fþ""¤™¿ˆˆiæ/"bA
Rø‹ˆXÂ_DÄ‚þ?(˜ð5*“ü    IEND®B`‚‰PNG

   
IHDR     Ü    
a    IDATxœìÝLä÷çùíf‘ÂÅtúÂ0¦Iì…¾9áÙ=ûF]`IF¾­+%±9»kFEvÐÀ˜È«ÒYÆ†3 `nzc’k;}W*­5”3lU¥«µc.FºëŠŽ"	ÆÃ’mM5Î­äV´Ý‰¹?¾ßoÕ·~WÅ¯~>$ä®o}|¾Ÿï·ˆòª7ïoÅýû÷wd³³³£èã?Öóëÿ‡ÿô_
      H÷›ßüFü±†þô_iã?þ\Oý ç»¿®Ïþìa
xèüÇÍÿ¤ëoþ_zïï~¤Úßý¼ÆÿüÓc=¦Gyd_ößùÿ¥¾W÷¿è±ÇSee¥***ŠÚîô¾      ŠŠ
=òÈ#úç_Ñ¿ù7zïï~¤÷þîG‡=,à¡÷Õ¯µé‘G):$.'h      ìJEE…*++õÏþY‹~óëú÷ÿ>¢­~¡ÿò_îöÐ€‡Î§?ý)UWNÿ¼Ý©?øƒÿ¾¤*år"€     À®TTTèôéÓúíßþmýø”Îÿw_Öƒû÷õ›ßüF;;;…w `_XPù[¿¥Ï|æ3úÌg>£Ó§O@     àx{ä‘GôéOZ§OŸÖc=–Ÿ	 ƒSQQ‘¡++uúôé}ëý¼WÐ      Ø“GyD§NRee%Á3pˆ¬ ú(T>[      °gG-ôp4œ:ì        N&h       @Y@       Ê‚        PÐ       €²È@óäR       Àn³âÓyß=U¡Ÿÿc\¿þõo´³³c;Ø®Ž       8&vvŒàùôéG¤Sû@WTT¨âT…~ëSŸÒéÊORh‘@      ÀI¶£UTTèÔ©Sª8U±«*è¼Ð§NéôéüEÒ       €“­âÔî'X0]¦4       `7v[       P 4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (‹Ã ü]¹.½hûù®~¶Ÿûþ“ˆ~¹_û;JîFôÊ¥W¹{Ø      €üNÆA6ó¢^ú›zí7ôsÙ/ðŠ®\zE}ßyYÎ3‡1*       À~:ø úÇß5Ãçá³$}ök/ëµ_ÔK¾ŸÈÙ÷%#?­káÔg%I?Ñw.I¯½¡o}9ùúk_–¿ïKFõóK·$IW.m&ŽóË¼¢+³š+Ûÿ}ç’O¿÷ÚÓz÷¥ïé¶$}ñy]û‹ßÑ¿Kìÿ‰¼Á¸¨ÿ>ïy^gg¿—ç/ðŠfô´ÎÎ~OïHºôÚúÖ™ˆ^ù–y¬ôýßè•omêë¯I/™ç‘87›¿÷½¢™¿1Ïç‹ÏÛæ	       Ž† önI_N	Ÿ-_è{Cþ¢öòEþdLw<.ÿ×>g¾þS½òƒ?×Ë_{Aþ×$×BM"”5Âç½öÎËÉ0úÒwm!ô‡šYxZ×ÞyCŸ5ƒí+—žPßwÞÿŒ0›Áxº_þà•”@ýg3/ê%I—lëÜž}WO›û2æïéìkoèå/[çò§š‹è|"D¾¥—ž7Çc¼ïš±‡Ðê
ËÿÎ—dñ3?øoõò×>WÔì      ÀA8àÐ¿Ð¥óOìwPú99ÿâìOôïf?Ô¥×’×ŸýÚ«ï‹·ôþà‰µ.]¶Âß/éé¯Júª;Qñü…?¼ }øYzJÿB·Ã©ûþ‚ûyO_í‹Oë¼U=}Æ©—ß±ª¸±Ÿo}"mƒ'Ô7lçsr^¾ ýÍl=²ŸPŸÛ
£ñÞþð      €£äPz@ïÊÎ¼ô§rÍ*Š»ÿ ;zBOŸIÝþlzæ›¦¸üúûŸ>¡ß³ïûÌïèl[f´ùâÓ¶÷jt6eŸ5:¯wuç®²VŽ      ÀQtÀÐFð»/Õº_~AþwÞÿ;ÏëüO¿§+—^”kæ'{ßoÙýDß¹ô¢\—Ì"ï¼¡kži8       C@›í,RÚI$ýò¯Èõ'‘,­.ò0[Zø_Ë±ß3¿£³úP×¾Ðh²wŸÓï}1mßwÿAwòmòãé/ýs÷lÞÔ”}nêvzU4       q@ëË/èµ¯ÞÒK—¾›
ü0Ñ‹ù³ÿMôÓwuû®õ¾/Ù®B¿PäO^Ô+¶ÎÆÃ
ÿ K‹Š/éò<¡w^Jï—?øß5óÓúúžÚgôo¶ïûg¾ïév¡Í~º©¬ÿø»º2›ž†¨ŸUÍýEné¼çí7       +‡Òú}oèÚ¯èÊ¥mK/èµw^N†¬_~A¯}õE½ô­5#é¼gX}_ÓßK’>'çðóz÷[fhÉìm>˜ïË K?Ó•Kïªï;/Ëùµ—uMöã]Ðkï¼°/îg¿ö²^ûðE½té–$é¼çy]Ò»©}¡í¬ó2××Ÿ×µ×.èÊKïêö]§œ’¤'tI>¹.™ÁôW‡åßsX       «âþýû;ö;;;zðàîÝ»§Ë?ÿ¾Þh¼|Xc;¦~¢ï\òé÷¾ó²œ»i™q7¢W¾õ®žÞíö       °Ï^Œ-háóßÔ£>ªÊÊJUTTµÝÁ·à8Q2[üò>½óÅ§užð      ÀCîPZpœ¹Z}¬      àaF ½WgœzùçÑÝ       Zp        Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        P§ã ¿uê´>ýH¥9uJª8Œ!       À‘ô«ïí}•;û0’½;ð ú·NÖc•Ÿ>èÃ       Ø·àøô#•}H       À!8ð úô©Gú       €CÀC       eA 
       (h       @Y@      À1ò×ý×‡=„¢@      À1a…ÏÇ%„&€      €c =t>!44       q¹Âæ£BŸ>ììÖöâˆ\SkrMøÔ×|Ø£)5vuzh:ìá       8âþèþè°‡°+Ç£:ÔP«[3ÑÃˆi/ã‰õºœ>      8ÉŽmtU×¨"]‡=ŠÝª×¹3‡=       (¯#@oiéªGc«É%5’¤Í´zå7—¥·àˆMºå	Ø÷S¯áë£ª¹á–g½M.…ä_•¤6Í†{Õ˜¶?ký‡¹/µÉï7ôÈ?Ý®*kÕÈœœƒ¡¬ã       €‡Ý‘mÁ›ôhL=ò‡}Š\ïQKâ&õ…}ŠL´en“'P¯áë>EÂ^¹$¹&Œ0Y’´’®Xï…´°¸•ÜŸù3Û¹¦±WƒÚ¶öIæ6«óz}q+q8ÿz­üaŸf;%ÿ5Û6ùÜÝÐ²jUã(¼*       gG´zE7RKÿùdµqÑò„»
=z¶Y²BgKâ¡€‰õ²mó¸Î5Hþõd¥á®+F5t¼¨q™Ýê‘?Ü¾‹ó      €ãåˆÐ»Ôü”\òÊÓj´ÅPCü…ÚbDçä2
Ø×l¶ÝX/ÇàªÕ1íSGtNÎÖ9³ý       dwûöí’·9þ|F²{G4€¶U«Z±óZ–Õ:·íÅ7åOïÓ\ó¡€ñ J­€¶DßÖØªäºÒ$éNI{Oq¦V-º¥Í¸ÔH       'Ø
 «ÕñíÝìöÊÔi<<P’j¨Û¤%É?è–ßz `×srMyåjOîªÓ«È@SîC5?£áÆºÝS›†ûëµ´½¿:ŸØ_Kÿ¬ñ Áâzn       ÀCíˆÐ’í·'_ôšÿH[n›ô¦T@½ßSl I>E²ne¶Æ°-éè2þ—Œ6éÕicË½o       xxÝ zmR`>¥Ú51z´z-;Úõgý·äêvk¬Pu6       c'*€Vs¯"áÞÂë©\•ÍU]£Št•aÇ       p„œ:ì        N&èµ¥¥«n9[Ýr¶Žh‰‡À±›<€ßáñ †Z­ÿ½˜S¬Œ‡     œ wÃf¢»Û¼¥V‘ð¨:û7¤Ø¤[Î«AmZ1:g'F>´¸•xk{qÄ;Š
<V4“XßøIîÏÛ'WÌcv€bÏQñÐ^»#r]r^û—Fiã´ýˆMî×9¤Ï~O”Î¸'ö¶2É5w¿[‹;#Îrö èß©{‘ïr´k<ìSd¢­œ#      ìNVhv¦V-ÚÈ\“kJ¾îS‡cKKW=òL>UÔC]>õ5§/­VMÝ¾ŒøäâZ9¯ÅÛSüávUÅƒêöjÆiÎ±ã¬jö{Ñ·5¶Z¯áëûûÕ‘³Ïs×8àSd`E3­^ù÷q¿ù·;*Ç=    ÀsâèØ¤[ž€}‰æÔÜpË³Þ&—Bò¯JR›fÃ½jTzh‘b“nyÔ&W d¼ßÐ#ÿt»ª¬U#sr†$å
þŠj¨û–j:%`-eÛ‹#rM­%×íô&ƒÈhòø’¤†bX«‡´i[‹„¤†=é¤ôÁª¤Õ÷hRã.OK’ZêßÃÖ¶ñå»)óÞeÌ_"ˆ5‚Ý±Usœý³ïªÎ²MêþRî/ëZä¹~…¿kaÌO­\!ùRrŽöðY2Yó›ýþ?øk¡æ^E¦Í›aáææ–Ô\Ó¹3Åì»8Û›‰q¤,O™ëwWîyÛçfÊ#çTÚ{9®EúïOãs!-]õè¦êµ¼º¦–Î6)Òrb»ÜŸ¥üv1w)Ÿõä<ä›tË³n»×âA
uÏ«Æ¼'²ÞC)Ç˜—«u^‰{OÆöËæøÓ¿(È~r.v=‰9/<     ¶“@Gçä	¤†aš00IZ
I>Eš÷ŸÑxW“úÂ>õ™»ˆMºåy5¨'§ÛÔm^_<¯ñã-ÿz­üaŸè\êÙ,ZñÖä_ï‘?<*-ŽÈ58§‹á^5v*Òe®b¯À<ÔÐ`(®AKrR‚i)®8Ú565NûÔ!IÚÒæº¤º³ªÒŠfZßÔ¹þ6ijC›q©±@%¦Ðm†+©aHã€Oã’¤^EÂ»ž˜$ëZœ1B ·¢íÙç¡{N5á^5f©$3w›ôh¬Î«È´Zz4ScÌëëSkYCËíÅ#Ì
·›óäÕPÝ¬y?ä¸~'õZ(¤ÍºYEÂF89vcEE~–ì×Ï>ÇÑ¹”ðYñý½ÊørÊv¬¬×"Mô=ù%¹j¬pµI}áQãŸ>Ev3–¸=Ø\“§5¤Ä5ÌVµVþ|ój«ÞL„ã¹¶iN«ìÎÉ98©¥cÁrÝsò·¿)×”4{½GêÞP\R<Ïg)yN¦Dhî’÷±¡Åš£Á
sÌûËœ‡\¿wmRà–Þ·«Ã!m/ßÒrCþ¬9Ï=ÔÕ«H¸73¼–$µk<ÜnÍ©Ç²–YãKÊý¹(4     œ'+€–”­z0¡¡GÏ6KV `É¨’mÈ¶Íã:× ù×?2ÓÉuÅ&öë9TÖþTS+É
3ÿ¬¼Ff¢6]ÎVÙÙl(¥»£¥«óÒ„OšK„µ¹Ùƒ•Ô`l÷A|Öµ°Mxú<“1wJ©$¶[ÑÍ€$yå´’5R¢ÊÕÀì!î–Þ®I«kfE¤¡Å¶×¬×ï¤^µé²jvØÛ¢>KÙ>0ãZ´ôÏ&Ãæ}¾{j›°¢™ÁÔéÝý_:äã°›µ)_¤VÄWëÉözij#9ùæ5—\ÛÄÓCãúÄ¿ô
µ2>RÚŒ¯èƒœŸ%ãœv#ù¥ƒ¢Ëú¬¯i¹Ûü<ú«æg4ÜàÑÍå-utIï×ÔÒ>`Tm¸‡JcÞ“Þ¬­Sò~.v¥:ås    ÀQv²èæ§ä’×¬”QmW(,ŠÎÉe«²L©$>t[Zºê•ßª4Ã¡‚òUÝfeöÌëƒDëƒì­ r3÷qdæ®°ì­Ì ×œCOk(Ñ†@RöyÌü=L×b/Ÿ¥N³%Dð¶¶»¬Ð|¯Ef{žbÛs˜_å½n'ÁŠfºçµœÒŠ"K_ì,²~–2Âlål½R¼R[NýXð¶¶[¤›«õºøíjIæC
âšéÿ     üNö öÓöâ›FXö)ö)RtÐaöàŒµÈ±Jôm­J.g¹¨--]I
’•»ugþ¬7’aN•­²3cÜÍ½ÆùÛ
„,Î6%{‘ZÕ|O%ƒžxPC­n9¯µufU±9Ö‚¢sr¶ºåœ\)fíœŒyéfÔxmT‹sç¨«—VÍJQóúŒjöå©·Ö,Ù4÷*öÊ%iyý#%ƒá7µ”·Ò4íú=D×ÂPÄg)«§Ô7Ñ&­ÎëõÅ­Ô·öéZ4ø2®EáðÙö%P‰AelÒ-g«[3Ñ’6Ë`ÜÇ·ô~ÜOÆý°ÏŒJgsî
ÊóYr´k<ýÞßCøl}ÖÒïBÛu='×ê-½uã––;Ÿ3+”‹½‡ŠeV¦çÜßn?¹liéª[ÎÖ‘}?     ås¢* «ºž“kÊ›ò'Õ+ÜÌ?ÑëvkLmî¯×rÐöþê|b‰ö eú?ü©ý{ ¦ãJ›Æ­ö=rÉ<·æ^ÍvºåévkLõruÖky/UuÍ½ò÷Èeýy{Q[Z{Rª	ÏÔªEÒòúm«i÷‘Í½ò÷oÈ•eîÔ5 á 'ÑO×Õ)sjuL{õA«­Z>ëCÆÌý™çÔ80«áuë^1¸&|ê3 –íúíþœŽãµ(ðY*¸½y-§<Ò¬Æ[núµØ^œ4¿¸Hþ(¶Š×QW/i-í¡…¥«êÕìºõYW‘÷ƒ$5éÙþz¹ÒBXìú®þµ¬Þ*pŒ<Ÿ¥¢+ö‹d»?œVÿåN¯"§<Ñjç’¬noÒÅÎ5³¿xrÞrÞCV;Ÿoô¨¥;í!„wSÿ¢a¬Û­1ë~H¿NVµö^?Y™÷êšÙ^d÷÷     åVqÿþýû‚=xð@÷îÝÓåŸ_o4^Þ×V}ê±}ÝŸ]úC£²õSÝËþöÎèÍ{³=íÏÕÍ?U¯)ªÀIa>°î´58ö×kqâÇ‚ã+:'ç 2ÿwÌl‘R–°    pè~õñ=IÒíÛ·KÞöüùóÆ>*w
¬YšcZøü7õè£ª²²REmw¢Zp4:ÛÌŠeãOß¾›»ŸËiyÊóPÿéôöâˆœ­Åž§/~E§¦§%I§¦§ÞëÿùÏô‡ÿi=ëûG×¢Ìö%„Ï‡>oex=²Zí¤÷·î¯Á\„Ï    €£ïDÐÙúíî¥ò°q`o=K3U«cÚ›-80{¥>,U’U]£EõB¶üúæ¥O>1B­O>9z¯ßýôGü‚þe–÷8®E9$?çÅ~¦}ÞÊñ{“ÒCÛþEjé÷     ‡éDµà       €ãŽÈ/:'§ÙÄ9¹rØ£9T±IwIíFŒõŸ¡Å­ò      @Y@§‰Mºå¼Ôöž÷Ô¦Ùb[˜½>g¢{>hY}‚Í`x_æ&·ÆŸ"áY
7”ñ        ÄéÃ Ž¾ª®QEº¶´tÕ£±·mð)2P–a      8âNV “sPru†äHR½†¯[û[ÑL«W~sÕ–þYwUÛ¶%÷c«¾Mºå	˜/:½E?¬-»Ô1dì/’‡kÂxÀÔöâˆ\SkÉu¬mâA
ußRM§ä¬¥l“yNmšMyˆUyç®Èó±oj¨{^ËéËeÙ7ëÚ¤@ÈxÏó
      à(:-8BòËk¶qXÓØ¡§WþN¯"aŸ"mZžò-/âA

†äšð)öi¶3¹§íÅyÖ{äû	{å
x÷Ô—86é•¿ÁÚ_f{ÿz­üæü×ŒVU]£ÆºaŸ"×{ÔðÚZu¬É¿~Aþ°Oþþzùç“uN¾nSHž«AmkKKW“=–{fkî|ší\ÓØ«…Úm4©Ï[ú6Žv›ãÊf9°¡‹×k¡À›E÷ˆ      p|œ¬
hIR½†¿Ñ$ÉÇoëæªäºb¾ÍOÉ¥67·´½yKËjÓåæôýléýàš´º&Wë|biËFæ¨«—órµÎ§V`›\WÚU%)5‹M¯2–j²l£šZIÚŒKŽå[ZÖš–»ÝÉ–
’T­ŽiŸ:²
î®”œ;k¬ŠKÆþsÈ¨Ð.¶wsçsFEôÝ"×      pìœÀ zŸíc{ˆ”^ÊS9§
µÆ0+·zäŸnW•ÙÖ¢8Ùöm{Õ¾ÌlQòÙHŠÎÉ5µ–hý›tË³¾›      8‰N`Ž,gU#ÉY1^Gß“_õºØR­*[å°âA-XýžU­š:•¡=„Q…l´¦0[HÝYUIŠÝ°z*§ÛÒÒµÔpAO:džSHíBŒcGÂöŸl}žWôÖÔšÔùTþ¾Ñ’¤z;£´¹      €‡¦ºI}×{´Ùí•ÓI]>#xuôj¶Ó-O·[cª—«³^ËfoãÀ¬†×=³µ²HyÐ_‰Rh(ãAˆÆûrmQ­Ž+m4ÆÝÒß#—R+ ýƒn³=G›fÃf;Žæ^ùû7äšòÈ9e®XT%÷Zò\zä7×O·½…È3n°æ§MÃýõZš«¥=Øq¬Û­±†ù§Ï      €“¢âþýû;ö;;;zðàîÝ»§Ë?ÿ¾Þh¼¼¯¬úÔcûº¿#):'ç 
´×Ø#³GÍñÑ997ŒvÑÍhr³=³O6      pÒýêã{’¤Û·o—¼íùóFè¯*w
¬YšcZøü7õè£ª²²REm÷p´à8!yZÝrN®ö@Ž•Ø¤[ÎÖô>Õ       Ž#*       à¡       € ËÄh%1¢¥œ      €“ :Ø¤[Î«AmïÓz»ËdGçäluÛ~æ+Çñ      `— Ë¤qÀ§HxTŽòÇ5áS$ì•K!yxà!      €#äôa`_ÅƒêžWMg›ü$©¥Vã]ÕŠMºå	$Wµ–ÛÜRM§ä¬I2BÝ¾æÔ]o/ŽÈ5µ–Ü.:'ç`(¹BCê–%Iõ¾ž¡c“nyÖÛäRHþUIjÓl¸W{>ñÇu®!}Ù––®z4¶º_Ç       €ÒœÈ
hÿz­üaŸüýõZžz[1YÉæÏD›–§&mm-Öä_¿ Ø§ÙNÉ-­F<¨×íás<¨¡ÁY}ll“àh×¸yì¬VCÒ•dÕòÂâ–±¿”v¥¶ôøH¬J-u—4O       PN'«ÚäºÒ®*IêU¤Ë\˜R™,IõY·Éxfàê¼\Ý’:½ŠtUK’¶—oiYmºÜœ¾rzôl³$5©/ì3¶k<Ü¾‹IþA·ü²Ut'T«cÚ§Ž]í       öîDV@gZÑL÷¼–;½‰
è¢5´ÉÕ )ð^ùò·‡
h×„Ué=™ù B       8DI m0ZTliéZ¨àºIµzöÛ=j±=ä¯ª¦VÒ†6ã’âA-òî 0³mGÄþ3mVq¡ªë9¹´¦›Ë[¶¥[Zºê–³u„`      À¡xHè&=Û_¯å)œ­}ÐÞ£–R6w´k|¢M
xåœ\‘š{5Û¹¦±n·œÝ·TÓikç“³Õ-×Ôš$s’ú9gcîÇ¬Žž‰fžßÅN¥UAWëÉöz)#˜      €ƒQqÿþýû‚=xð@÷îÝÓåŸ_o4^Þ×V}ê±}ÝòˆÎÉ9¸¡áë£êpö`       ãWß“$Ý¾}»ämÏŸ?oì£hQÔ&    IDATr§Àš¥y1¶ …ÏS>ú¨*++UQQQÔv'ªúôÅ¯èÔô´$éÔôô±z½¿Ìöƒ!¹&Ÿ      Ž@ÿúæ¥O>Ñé‹_‘>ùäØ¼ÞÕê˜6zI÷5—a÷       PZp       ÀB        
 €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4        ,        eA 
       (h       @Y@       Ê‚        PÐ       €² €       ”4Á––®ºåluËÙ:¢¥øa      @9Ý :ÔP«[3Q)6é–sr%ëj±I·œWƒÚ.b—¥¬[Ô¾ZÍŸ´}n/Ž$ßkSÌz#:g[ž¼ZÛÍDíKíamæ<ØÇ1´¸•å½ôã¬h¦5÷þ²Ë=†ÄœÆƒ*1LnéŸU$<ª‡¹À¼æ%Ó¶û¤)×¯¨9       Pª£@;Îªæ°ÇK<¨…@›fÃ>EÂ^¹VçõºþFçäš’†¯û	Ïj¸!$ÏäŠ¤--]É5áS$ìÓlçšÆ^M×±I·\Sk‡ŠMz4¦ùÃ>E®÷¨%à5ÃV#ö¬›ï…}ïª6·2ß¤ïmKKW½òwzÉØ_n¹Ç 9êêw3ƒÙ9Ú5öÉß¿ûÌ¡qÀ¼v»Ü~{qdß¾Ì       NªÓ‡=€üêuîL–ÅÑ99CÉ×
æãA
uÏk9ñF›fÃ½jLY^®ÖyIõ¾nVß¦lg[ž‹£]ãaëÅã:× ù×?’T­X$$5ôèI‡$}¤V%­¾§Ø@¯:¦}É]ÔÕK
Å%UÅƒZXï‘ÿºôz÷¼í@+ºZúÏ«J’înhYÒrdE}gîèæj½†¯·ï¥ÌÏÛ«ó*rå=972Ç¿~GÛj2·Ë1ÇÅŒ¡¹ÉX¥î¬ªt'ßNöl{q$5 ïô*2Ð”|I^c×„O}Íæò”koÞ{KlÒ÷]£™s       áÐMêÿð)b-Ž54J„Œ±I·<ëæ{Žv‡ÛÍ[Zºê‘gò)Ez	÷šëöÈ?mmW4Ó=¯š	ŸÆ›Í ³{N5á^i2³Š8%Ü”¤ømÝ\•ZÚ—´¥Íu™ìŠfZßÔ¹þ6ijC›q©1joéýàšÔpAkÜÓÆ¹¥ˆßÑ¦¤ššj#H½V«áNilýŽ¶Í ¸æÆˆœµÔ±5÷*Ò,)ú^ÚœV«ãÛ=ºÙm…ðFŒ¼a{¾1¨IU]£æµi²Íýþ«êU¤ËSPCÝ^Í8}ê3Ãsÿz­üaŸ´8"×àœ.†{ÕjhpCÃ×}êp˜÷ÊÕÚ´ëŸ&ýË
)%ì6Âç"¾¤       p”èì¶—oiYmºÜœýýXzh\W`‡Ñ÷ä—¤A·ñ_IR­$³MÃ@¾·´ôê¼–zäïª–dõ`¾£¥«óÒ„OšÓXú9,Nj,Wõr6›A
MI³áviÒŽ¹¹!iM›u³Š„«ó¶‚×|û2ƒkËòÔÛŠuQœekE3­^Û5RJ‹×s.kj%¿cù––µ¦ånwò4(¿fãËŠLÆc«ûSE
      <Ž] Ïöâˆ­:Õ‹Ú2{EkF˜-{´µ{Euµjê$æõ¹Þöâ†¤ZÕ8’c4zDQAköÁöOm˜¡ç––Ì
ëº#$¿Øbô}nt¶IôJët+š©¥Öèm¶YX|ÆÖ?ºø1\û	³wuƒ9×æ¸‹Sb`œ§ºcÚ§šI·<­T@      E8vt•­ÂµQA-”VÕj†½Ñ·5¶ªÂÐgjÕ¢Æn¬¨ÃÞSXù+ c“V5lj³}•ÍVÏhtN®©5¹&|E†—MºØi´—pH‰v®+MÒ™;jQHÜ•äPZïéü–Í~Õ–ššás¡143ôŽÝ0úug>¤ÒxÐ£5Æ½Ê°§ËYmhðiVnyºÝ‰/       dWqÿþýû‚=xð@÷îÝÓåŸ_o4^Þ×V}ê±=ï#Y™\/W§ä_¿`V!ÛÚ44ôh¸n^c²=¬.×Ã3j˜Þ':M¶*Y[¥mÊóûÊl!!YÕÙÞkKV_õaº”¬^Î‡­Ò7ãaŒ¶q¤=ýa~YåÃ®û»Ùž¶ŸlóšeÜ-ý=ª™2ZœôÉñàIóUö‡>žr>–ŒþÞyl/ŽÈ¼ÿ>      váWß“$Ý¾}»ämÏŸ?oì£r§Àš¥y1¶ …ÏS>ú¨*++UQQQÔvÇ2€Æq—#€      p¢èc×‚e­bÚ´÷jçÜ–§<rNeï¿
      àø#€†äh×x¸ý X­ŽiŸ:ðˆ      ÀqcU3g§{        €“‰ À‰³½8"g«[3ÑÃ	     ÀÃí˜Ð+šiukhq«Èõ·´tÕ-çäJÎ}9ÍŸ=VÑ99[G´ßã~²‰5T¶PÍ6GÑ99[çKyßœ§«AmÛ–Æ&Íeñ †ÊuÞJŠÎŒ1ä¹~'òZ˜ïYçl»§ôµ8‰l÷@l2í÷Kt.9Gök‘o     €èXÐÛ‹#ÁçþiR_Ø§ÈD[Yö~|T«¦.Ç[ñ †Z½ògyËQW_ÎA%Tu*žÕpCú;'ñúå¾±IÆÔ#Ø§Èõµ¼‰ —k‘dŒÑ§¾æ2ÄqV5Ù–ÇƒÉ5áS$ìÓlçšÆ^5åÚFÊñÅ     ÀñväB›tË\£ª²½–$Myäœ’ÔÐ#ÿt»ªâA
uÏk9±u›fÃ½jL¼~O3VÚéUd ©èã«„m$éƒ#rÖ$Õkøú¨:’Q!šr[úg5ÞUX¾ÙÙ&BÆøÇÚÒÒUÆV“ûNX)çk;Ž¹¼¦³Mþ@(íXùµÔ=ž97æU3áÓåˆ[žõ,ÕU•îž›íÅ¹¦ÖÌW¶ë“s0”¹|Jºyçî°¯ÅŠn¤–þóª’¤»Z–´YQ_³y_Ùk‘6wÖgÖ\~³.Ë½_èóœ2>kÎS¯«k"BÇ&Ýò¨M®@Èx?1e9–Šü¼×ëÜ™Ô%ÛË·´¬6]n6Î{s]Òê-½o7ï½Ìm$IÍOÉ%¯<­Ú—û     à(8Ò´þÚCC©qÀ§È€Ø¦yŽv‡ÛÍF°å™|J‘3ÈlèÜuŸ"
j¨Û«gþ
ÉíÅyÖ{ä·«Ê,‡êŠ	×ä—W‘p“q¯õäôy½Õ+¿jEçäôh¦&9†å€4öi<:'çà›ZúÆ¨jnX¯É€Ý°¢™n#o6CÄî9ÕØ‚+ÿz­üaŸ´8"×ÔÛŠu=£Í´ Õ–6ø4.IêU$œ\£qÀ§FI±Hæ™VuÊXÜd›ûüŒÀS¾îK\WIfåèFbylÒ-ÏÕÚdH¸+%^3Ìœ»^iò¯EüŽ6%ÕÔTc¾V«áNilýŽ¶Õt¤¯Åöâ¤ÆVs‡ØËãXã)ŸÍ\Ÿç¦Døl˜ež{_Ø§¾”pÚ&’&|Šœ1®ß[Ñvõ5oiéÕy-›÷Ãöâˆ\ÁòÛŽ“"L7©/<j,ðÉúxÄ××¤†r˜cþ ½G-«óúà®$Göm’cŸÕ¹«yZ7R~ï     WG4€¶ª%K¯ºL©X–${+ƒÎçÌ@Çø3øÍÍ-©9W˜¼¥÷ƒkÒêš\­ó‰¥-E¢^Ãß0*'uõR`Cñ¸tsUr]1+*›Ÿ’K!sæ¾ûŸ1ÎµÙ
W4c¯xµ‹¾gTqºm­1jSVq]1ÃÂ®QEºŒeÓ>uuåbÎk§7#\3*G×´ÜíÖ˜µ0£ÍC©J¼f 9wGèZl54%Í†Û¥ÉùÂëçtp×¢ª¦VRHžÖPöÊâŸÍ\ŸçX$$5ôèÙR[lXÛdé­úßø,ö–xÃû“ÝlŸÕxËm
½Uµ:¦}ª™tËÓíÖ;     ÀñrDh[SB%àöâˆ­bÚ±÷:”Ún¼ú«$3[H”¾rÛŸ¶ï ®…Ù?Ø?µaÎÑ––Öe¶Ý(‡}¼fkÊ^9…ç«,Ÿç¬ªõd{½Æ¬–>J¶üÉ_ñEÇ¼>wUKÑ
-«^³µÝÈ`ÝGís	     °;Gú!„æ¼ºÝ‰­V«‡¤èÛiá^Òöâ›ò«^[òµÒ0xSKYª%‹³¢·¦Ö¤Î§Ôh…‡‘ã­è{EŒáqk–×?’dôbNô¨=S«­iìÆJ	ã1‚ýHØþsÐ!—öe›W«Jvaq«Ç=	×¢I;%5ÔÊ!IñÛF%·s·_üµh°R¸f´¤H“ùÙÌþynt¶I«óz«èßù÷†õÐÀ”‡6÷¦]#_Á/¤ªZ.¨Ef«YÕÚôdÁÏÙŠfZ­¿ü |     'CÅýû÷wìvvvôàÁÝ»wO—þ}½Ñxy_Xõ©ÇJÞ&Ñ“ÕÖ6åÁi‰‡‰Ù@ÖÐ£áºyÉ«ÈÀãÕ¦‰Þ±Ù>–¨üÌ¬RÍì9›&½b2ÏƒÎ’ûÊÑÓ:}›Nãj²¶Ëu,ëÁwûôçû©©3û ½\R[+$+m3ŽeV›f´b°ÆÐr;÷õÛÍµÈ7wGàZ¤WNïõ:Hs-9ö•­<ýs‘ùy6àÔñ™ÃÊýyÖ¤ÛèéžåºdÞã{¬@ÞÍ£srò B      ýêã{{ßGåNá•JðblAŸÿ¦}ôQUVVª¢¢¢¨íŽE 
à¤2èºClu“ñ%Až/„      ÀI
 tœ<§/~E§¦§%I§¦§ê×‡íhÌÅ¿•$¹ÿö­Ãã¼þ×ëºpÑ¡¿úÒïËÙêÕ©ÕûËoîÿ¤     <d q ~}ó‡Ò'ŸèôÅ¯HŸ|òÐ¾>
ŽÆ\üWê\ÙVßVâx¾©†ñ‚þÉ?ÆÕ÷Ç/èo?ÙVß¿ø‚*nþð°/     À±G       8BhÁŠÍ´ºå¼ÔöC=†Ü¶Gäluk&zØ#Á®ÄƒjuË9¹rØ#     ØU ›< àÐ‘ò†€Ñ99[G´Ï¿«ƒ³³Õ]Ô¸ö$qî[ZºêÖÐâVyÆP`Ždnó!×<–"ïIÉ
ºçÛ·ãf¿îV nüØŽ—r¯d~Ö²ñÆ<'ö—òÚÇ‘v_Ä&³Ý“iû+õ^*æ÷Ä>I¿×‹º~%Üe     8öNn jh¯áIQû0*b}Å©£]ãaŸüýõå?Ö™ZµìjMêû™nWU‡—ß>Ž!×<¨¸@z{q$#ô¬êU$ìS_séû;[Zº’kÂ§HØ§ÙÎ5½jžStN®)iøºO‘ð¬†Bò˜¡qìÆ¼Ô?«ˆy¿ø“AflÒ-×ÔZÆ‘b“©Gþ°O‘ë=j	xŸÛíÅ97ÌcÙ¯¯1wž@æÈSööÊµ:¯×3æ8÷ï‡Øy-7ôèYûµ2?‘¦Ô9Úåý IŠµ\WörÏ7†ØdŽêí     8ZNö Ê":'ç`HêôjÜa{-Iš—«u^R½†¯ªÃ±¢™V¯6;Û¤@HË’Ôé5 Çy]l˜×X÷ˆt}TŽ´ãÄƒê6B$³d$­o/ºå·ïOÆ±ü‰önè­«nùW%5ôÈo†cÛ‹#A›kÂ
SÕÒ?«ñ®ê<ËóI=¯ôóÉ:wÕªÆ!m±¦”v®¶9ÈxÏäšð©Ïü÷7Fä¬)qÍïæ¹îÎÉ9(¹:Cò”\îÈ3†xPCÝ·TÓ)ùkÉã§„ÀJ½_ãÏ6Õz²½^cS
)ûõ‰M¡¨kbÔÜOêuM=~¾ýå¸'­±&–·i6Ü«Æ”åkò´†R—ò~rîr«VÇ´/ñÊQW/6—„¤†=é¤ôÁª¤Õ÷hRã€Oãæ6U5µ’6´—ÔÂzü×¥×»çSÎóf@jé?oÌ×Ý
-KZŽ¬¨¯ùq½\SKÿlæX£ok¬Î«È•÷äÜÈþª1Vë^¬©±ÍmÆï¥¼·\ÉûØº¦’Ò>G»¹lï™A÷Ÿe\Ÿ,×/çï¨Bc°~GÔkøzæç¿”1Ä&Ýò¬·É¥ñ;Ïº÷Š˜     pôœ¼
h3lnéŸM8Í½fu¥Œà0ìS$œŒ-¤ËaŸ"mRàM³êÙÇf;×4ÖVÅh…(^[µ¤±~äzZ¤DU§1Ž--]õÊßé5–M´N«!éJZ•e<¨×§ÖÌcÌj¸Á“SB$ëXaŸÖdŽayÊS°z;[å¨½
1ëÜ¥´UHkyàh×¸(uLûŠ
’ŒÊ^ã<SäIZ“_Ï™ï­iìÆJ÷CH~y3*rsŽÁ:ÎúùÍýú¯¥W¢niéÕ´ð9Ï<Tu&®OzE©6Ökøº=d6+³sÜWÙ÷—çž´*qÃiÕÇ)Uêmš5×IÜwÝóª1ï{¿4ÖmT&-,R2ï»-½\“jåÐ–6×%ÕU•V4Óú¦Îõ·É
šSæ#’äËÑ®ñlÕéñ;Ú”Gçä¼V«áNIëw´m…Ûëo'ÛzXsÔÜ›ó•Æ¯\
ÉÓê–Óü¼%®GÖßIÛË·2ªŸÌÏx–c•~?XŒà=Qyœ÷úåÿ•{VøÜ¦Ùp¶/JƒÉþ;O!-˜¿oòÍ     8šNT´U¡šµú´€–þgÔ(™ádê{>ùëFätk³Vã5o'Cîb«ðâ·usUr])¦:8M"¨z\ç$ÿúG2z7ÔëÜ™,ëGß“_õþFÚ±ÒÇÐü”\
issKjÎui•£ŽóºØ ­”X#ëÜ9z	÷–~®»’cÌ÷Œy(åÏö“sg¯È-Ô:À
Ø2;¶¬i¬Û##l+¡As¯"×k5Ôí•s½Gþéóz?ôõs^Šôý}[yïÉ”Š\Iª+°ÿè{Få¬Uù/Iª•d†«ù7ß^œ4+hÛU•¸^w´tu^šð©CsË8æœYù[ä|l54%Í†Û¥I³BÚ§—×kåûT“sÐ«gß#æv	7µôd…}îß+zkj-kµr^»¸¶ß”?[vÖó)âwTÆÎê­V¯qŒ÷vIc°$~ç_¬äÃa¶ä     …œ¨ ºªkT‘š99­ xŸþD;ùçíV e 9×‹m9±ÏíAÜf(×¦Ùé#ô'é)mOLE·ç(ÁQŸIR½\’?ÒÍh¯‹
âl­d¬yë˜ö©fÒ-OëFí-
ì/Ì¹êöâˆYU;ª‡YáZÔA²·ÝÈ³•Ú&ÄøòH¶m«US')0¯Ìõ¶7”¨t¶OQ_89ÎªF’jÃk·´dUX;¤Ij7¿d)ê‹³¢=­ÍØuäÿý°½ø¦üjÓl‰_’•~?AwKÿÀþ´YÆÐžÕ¹«¹Z7²á3     pt¼Í½ûø'ÚÖÈ²üy»£]ãf;Š¬þJg`››[²¼V²èÛ[•\Î&óßÉ?_ØƒŸæ§ä’Ùn"Ëüs¹Y)}±%_`kT]/oçhUI:?f›‹”Ÿr„EùæaÏŒðLOíyŸç¾1 á¥<,/ã¡xi­dL9ÚÂ”º¿‚÷¤öš÷]AgjÕ’í¾“Õ^"õ'ñyŠÎ™¹ 6:Û”¬n7ÛsX×"Ôy>ÅýµC“.vÊlï¡´ûØ¼Ç­ªþ¢>¦õ;)Ÿý–ºÇäüý`²Ï”tOíæ~°‚îËÅ~Wà~È=†juL›mZÒÚZò
È7     àhª¸ÿþŽ}ÁÎÎŽ<x {÷îéòÏ¿¯7/ïë«>õØ¾î/'óÁpíUYf>H/[Åt¶}d0¶WZfÖŠÙª‚[:Û¤ÀF}gVŽ&˜ö`@)Ëƒñ’‘Kl—¶<Q=š­b9±¿ü4Ü·jó<cˆg© 5Æ¡Üó“sp#µŠ·ÎV5™í~¸›6Ûœf«âméŸÕxËm
™½“QË6kµÐ0Æz³=ÿ¼n/ŽÈ¼`'ã¡Ròámyö—óž´]ó†
×ÍkLöŠÓ=L¿†
…Z$¤?ô.uÙü˜åÞ—u?|”e©ó`m—ú Îç“m^­q¤¿—õ\Ó~?D‡\f^ÿìçdŒc÷CÁ{¨ðõK½ŠClÒ-Oâ>ÙÝR>?Yæ¨Ð     8	~õñ½½ï£r§ðJ%x1¶ …ÏS>ú¨*++UQQQÔv'7€>áŒ`®6d¥‡=ºƒ³ïóðÎ#Â¨9ƒîtÆ     À1u’è“×‚#‹Ó¿¢SÓÓ’¤SÓÓE½>
òós?þÏZøÿ•n}é÷åluë¯¾þ¯µðÑ»úš¯´ó,×ëý>ß\¯?÷ãÿ¬…tëK¿¯ÿï¿vè¯¾þ¯ÕÒ? ¯ùv9þïG$I¿÷oÞüìvîpTT«cÚ—5|Þ÷ë×Ü»ÏíhöwÇõw2     (ÝC@ÿúæ¥O>1BŒO>)îõwœ}A¿ûqõýñúÛO¶Õ÷Ç/èw£ÿ¡ôó,×ëý>ß\¯û‚þÂ<ÿbÎÇ_üå7w?þßù§úÛO~¤†ÇŽÞüìzîpä=l×ï¸þN     ¥£       !´à         €‡*€ŽMºå¼Ôv¹j¨Õ­™hžu¢sr¶Žh)^îÁd*ylç›tË9¹’|/:'g«Ûü±ŸÏ––®šëFçälS¬ÄcšRÇ`®ï´ÿd_Ûœì·ý˜·ô{²˜}î÷õÚÍ      pdÜ :ÔÐ^Þ¢ö±¢™“9Îª&ÛòxPCƒ!¹&|Š„}ší\ÓØ«VðZ­šºû+%>íûäï¯—Ô¦Ù°O‘évUö¸²ÉyOoiéZHê|NŽÝï>ãŠ,¶Grô4      ŒÓ‡=€²ˆÎÉ9’:½wØ^K’æåj—T¯áë£êp¬h¦Õ«ÍÎ6)Ò²$uzh’çu±a^cÝ#ÒõÑÌP,ÔP÷¼–zäo–Œ
WÆV·—ÝòÛ÷'ãXþÄêžJlÒ-Úä
„Œízä·ÂÍ”ó²Î'9®šÎ6ùÆû-ý³¯y;Ï<I½ÎI]²½|KËjÓeóÜ7×%­ÞÒûñöÄþZêÏÜUóSrÉ+O«4îU£ŒíóÍÝöâˆ\Sµru†äd?ßåôyÌíÖ2æ(6é–'RKÿ¬Æ»TÄÖ’%®k~Ûå
æsn“6îuó°®ó„O}Öµ‰$ï	×„O}Í¶¦.ì¢oklµ^ÃßnRáû8õ}I‰/(mÒ WNeŸkÞ]£™}	cÈw?      ÎÉ ÍÍ«eÍ½Š„{SÃ»´Í–ÒlØ§ñèœœƒojé£êpT«cÚ§šI·<Ýn}`ô¬Ð3%„4Öï°ƒ‰ pKKW½ò[ëGçäÜ(îœ!iÂ§H³`¿¾x^ã-·ÕÇ}Íf°×=§šD +ù×kåû¤Å¹¦ÞV,œgRÂlSâÜšÔ5–
ø±¦`}Mj¸ ‡~ÐÞ£–Õy}pW’Cjði\’Ô«HØ¾ã&õ…guîªGžÖ
38Ì7w–6ëf	›AñuH3æúãÍfpkÍC<¨×§Ö2ƒXc‹ØÏ}RK-£yÇPÕ5ªH—uòA
u{5ãÌ6N›èœ\SÒðuŸ:f¨šgukß¹Æ]HÊ5œÓEë~Èö¹°‰EŒ`Úîó_‹Ø¤Gcê‘?œÁš{¹^«¡n¯œi÷˜>çþÂ£”1²ÝMyÇ      €ƒu¢h«jt7Á]Kÿ3FP×œ–a¥¿nD®A·6m•Ä-ý³Šd	ó²ŠßÖÍUÉue™
=z¶Y’×¹É¿þ‘¶e¯>6«>ÚŒ+@»®˜Á›=8ÍÅéwãýIn¶Ï¡xÑ[å	÷sjÓes¾;¦}ê¤èœQkUÈJ’jÿ˜­CüƒnùÕf«¶VZÕ´TL5zf»²·&±‰EBRCž,¥¥D¾q¸æ5µ’ŒûÁ±\àsj!P¯áëÅÜ›+ºZúÏçuíŸÕL«W®Ö
Í†ŸÑæUÆVóœKIc°d¹rŽ¡ø9     Àþ9Q= «ºF™h“Ð­¡Å­}ÛolÒðÆ»ªÍ
ËiÊsrzÍ¦<LÐü)pnŽºziu^7ëÌªÚ»ZÎÒª#;ã|FElé_¤2ö	[?VØØ¤¾°O‘‰6I!yZ­ûbE3VõzâýbÆë•¿¡Gþ°O‘ë=Êc]¡    IDATjÙËóÊ5îÝ)ô¹ˆÝ˜×rÃ…ÒBò|âA
µZsÕ«FóË†ÙÎ<9zª—      8'*€–d„ÃmZÞ—p8OHêh×øõµ¼9¨–Æ¬jÝÜÜRâak¥Š¾­±UÉålRUM­¤nš?4*m÷à5÷Ú\ó§@ÿÜª–j‘TSS]âV4ÓjUÄÓ:3µjÑšÆnä¹ÖÍ½Š„½rIZ^ÿ(±ØèO]âµ¨;«*™i«!ý†âRâú-Ç¸-¹Ç`ž“ýZäú\ÄƒZØ*§2ªð­ñdŒ!:'§î§µ¾h0TÙöÐÎ’ÇP@ž1      à`¼ ZJT(·ÞL©¶lü†Ñ£ØÕê–3G%fŠømÝ\Íó>G»ÆÃ^¹VçõV4uùåN£…B²’¸I}V ØêÑÍº¶â+h­1›m?úšsô÷×'Žá	´i¶È°­äyÈÅÑ®q³²¶¤1DßËÝZ"ëÜƒÞdå¶õ…@<¨¡DE·×8¦ÙÓúÙþúÄµø =­š9ëªÕq%yœ…º¹¬õÍã
4*–­1Tu
h¸Á\6(¹:‹˜×œãN½vµ%Ç`2Æl†ûé×"Ëçb{ù––-^2ç6ë<|Ûüâ%Ë¬>Î¹¾¼hð÷íµä—6¥!¿Bc      ÀÁ©¸ÿþŽ}ÁÎÎŽ<x {÷îéòÏ¿¯7/ïë«>õØ¾îï¤Ë÷àD`oŒžÖÚEÏô“5    ÿ?{÷ÚV~ÿþ™Ù	½H/—ñ²õÏàèËÈ._…e¿0Ë¥’ñ…¼¿Y„`fjbC‘ƒ
fíâÂ¢›¯üûÙØš{ ù‚gš/BlXë"XªèüvtA-Á×cÈÏ¥ z¨¯Ê&%Ù‹sŽtô_²åØQ^0­tŽÎù|>çh.^zç}DDärùûßžýW_5ß©
¿ÌÝçþO?åÚµk\½z•+W®´ô¹î¬€®ðîŸóÎú: ï¬¯·ôZ^¿Ó\§7õõqðCþø_~ð!^_ˆ/?°^JîÎW›ÑkúbƒßúcÐ÷VDDDDDDDäÍ÷VÐÿØû=¼|iT/_¶öú’œ‰½5}lOuÞÐ×Žÿõs~ö×S¿úœ?¼<aêWÖëáŸ;|¾7Õ›ü½ƒZpˆˆˆˆˆˆˆˆˆˆ\"jÁ!rÉœì,àõ…ØÈ6ßWDDDDDDDDD^·*€Î­†ðÞÛåä¼OTØe®YšÝÄë[àQá¼S­íu°Í'·Â»º_¶¹vø{Ì£{æ¾ÙM¼¾MrmœËkþu.P¶çŸ1æÚx.½ÏN7‘Ë {èÂ.sg
x[:Æ>Ý^yë¸N_M¹ÕÁµƒ[zé¨ó¡zta—¹±-˜Ž’NÅH§bÜI·´öŒ.’>åõj…êÆ8²”w2ÿÉPû-2ä¹ãK?‘N{÷¢p.²›xg“ˆ°ì°½`‹ op2¿½ÈˆcŸ
_„£€I2 é™!pÜäŽk‹¥±Ø^dÄQq30Í¸&ˆ»ÁúÂ,åÍ™Ùqûñ0Î/ÀÙt*¹ÕaüIãs®	âÖC	ËæeÍ§4®¾€ŸxÂØî™Ž²Ü÷°Á:4‰“ïWÏÿþáñmøbl«æ§<ïU¿éþˆ Â>ˆ¦&´æúÀ\ËÑÞâ®ƒ3“€Qõ\ë'HOØç[¾¦Á•òÚøœ- /Å­ëåd~»2à=æÑWÆ=d_Ó „}Éòó•]ÀeýŸ^n
;YZ3G”eÛÜ:;†÷qÓ1ˆˆˆˆˆˆˆˆˆœî«€6ƒ@ÏtÔß ÷$éTŒh #ÀMÅH§ÊC×LÆS1Ò+~H|mV=÷2²#8`i¬¢ÊÙ
ÒV lîŸÞžÀƒ¦S1sÇ<º!ˆï­ø[ŸS"	+1Ò©Áü_ìçŸMÏaŒ±¼Z8~ØO<#>í$³ö\£uÈnÛ^ÿŠ¹CL™û
ÎÄJëêf¹8÷jƒ31#ìtO’¶ÍÆñ¢Ì»’„‹æÇ×ë’
DI§¢Ì»Xz°o«Îzf7	®ÁüvÌüŒ}£üú‰¦jý¸ð„={å±c˜es-ÁOÔ¬ÐžrSãZ”ªgt‘ôŠŸÌZ¸¢Ê¹ƒc0Õ¾ADDDDDDDDäütU´UíZYÛ
ÏôÇF@êž$*ß68#>°@p6Ä‘­’Ø3%Ýj5iá	{yÞ=E+×Ÿ¹Þã†â‡?pÂc2ø7ç9èõCâ)GŠAoð®.’mr3$~}Œ°¾o5Dx,Ä÷+Qn·Ù+ÉýDS“Ù¬Ÿqs½GÖcŒ49C.×·ªª»Íªi×ñTí =÷Àøqa¹ie8œdÊ¯EMîIÒÛýÌEðN_¿Î7ƒ¥Ñ}\=†ú?ˆˆˆˆˆˆˆˆˆtBWU@[UžñÙÎö»µúWl½ÛÐMÕ¤
+ ÏƒÑ—8œp2¿cÊmöŒ>ü3'f8mTúž³›-‚uzQßO@Ð{–¾Ë²›xË*æ/ÃDDDDDDDDDÎWWÐ€w¬Õ@eHjÛäfy{O"‚÷Þ.'Íe>Èïèè˜boßve²”7BÉž¾~ ÉžÙÄ¨ö½]£Ú·Ef{Ž²¿™†ŸeöÙðU·žôú!¿Å7z £cÀ	ù§ ¸v%½Œ¬W¶1X½¨?k±ŠÞ¸Fõ¹Ûì,T·…éðš©?‘óÓ}4+”=¶¸ ƒŸLàÉoô…ðV~5Y=xë=¤Ï1Ì²Ù—¹,4u3€ø¬½’xˆ)+÷…Ùðãiu>Ö˜Í qÊmÌ1>í,ž#œðm±ªµíu¨kŸ
_È¨ªÅšojÞJÙo‰›­5íï›?Xs*{x`=…]æÌµ¡b=£3f¸Â;Á@å‡m=¾X?Vì³—°µ/©Ð3ú‚˜Çô™}ÁÝ“Å>áÞ±Çôì•ÛÇ|·{`<²f»–¡¡fc9Wž?þÊþÆ«W¯xñâÏž=cüO¿ã·ƒã=aÏ~ÜÑãu»Üjˆ°úõ¾6';wo_èz_†1ˆˆˆˆˆˆˆˆÈÅùûßžýW_5ß©
¿ÌÝçþO?åÚµk\½z•+W®´ô¹î¬€®ðîŸóÎú: ï¬¯·ôZÞN=£‹Þ¹ÞNs[¯EDDDDDDDD.Â[@ÿcï÷ðò¥,¿|ÙÚëKbp&vá¨\§º_¾¼èa‹ˆˆˆˆˆˆˆÈ[L-8DDDDDDDDDD.µàiâ­
 s«!¼÷v99ïv™ó…ØÈ6Ø'»‰×·À£Ây¦ZÛë`›On5„wu¿üX>ó¯ì˜Ç<ºgî›ÝÄëÛ$×Ê¸|•›ä¬cÙÞŸÛ96?µÏFåglã³o/^s>•ç²Žy²³Pö~ÃëX9ß²qcÎ½ÆûuÇðÿãµÏ¡å{¥4†ÒúT¯CéZU¯}®åë`]?ë3¥ëiÜßç¶ßÅûÆWùšT±…¹ÙÖÅ_ãûª³ßùÓADDDDDDDämÖ½ta—¹³¼-ÃäZ)ßPŽëôÕz¿°Ëý„Ÿh*F:!˜ßâ‹b¨ØKß@ãÕ	¤gb¤S1¢À5A<#šdÐÚÁ|/>í$³¶Zv]<ÓQÒ)ãóé™!Û¹¾%îš`> ñ´:†YNÅHoOà‚+Æç–G{!»Ip
æ·cÅãM¹›-Ð1î…YÂsÅ¸qšÇ‹2ïJ¾·ËIÝ1ü/L­ø!ñµ9¿c}•„À/q4Fá	{y?óÓN2»Ol¡ë>¾ñ@¤´Fö¾âæûÑ ÄgK!qiÌq—ûIî—Èÿ##¿™À“ßâó»{°EÆ5ÁgÅõ{ÊQNŽžÖBåEÙ‡,åÌ2T½­U-þ7á2ŒADDDDDDD¤[tg ÝÄ;¶EÆ
íÌŠËpÈoô…l¥F€<·ºYªHµÂ'ÇMî¸X«v™óEˆC6³Brl‹Ÿ­¬ÈµUœÎ&[šŠ†m–>g¯æ,«®µÑª<]Ý¤¬º·á:4ãäÆûo9†Y.­ïqÃ™ÃÊvñ¼W}(÷GI>eåhO_Ëûž=…ëÜpÂáŸ›VÂ6
GëÊ>d)Á»ÍÙË­a'äŸÒpÉÝ3ï:`éÁ~{¡ç_ž’qõs«¯¿ì';_§ù1NóÿU†Þæ¸ß¯—Çå$³ö°üú9†@ü«]N
»ÜOXkòßçðý_Žùn‚gÅ½b|wÂ‰Zã¬y×€$áÊêmÛ÷"œ°¯É÷¹cc8ÃSDDDDDDDDºL÷ÐÙM¼³I£"Öª„uOÖ¨¬],«(Í$`<#]V}ÚËÈzŒhà€¥±Š*çÂ.sc[d[5©±eU«1ŽcÝ³U¡®ø[ŸS"	+UÆ…]æf“Åsc,tã‡ý¶Šá‡ä­CU«{p>Ä”¹ßàLE…qq=ž°—/œgÌªb÷dEEðSVUí)ªA¸Ÿ>ûõ[×hÏqÌw»½CôxnãÉ?æ»&çêýAŒëÝjû
c<5ú*Æx|d[‹Zz¹kÜ‡s­V?¹tÏðMzÌ€Ï{áð€Êõª¥px ®~jíf„þF3@ßðm<¶sX?™À“ÌÿZYý7ú9:zÂ÷ÜæNYu¼YAž÷­ø^{Âž=„7«ÇãÓNÀªÀ7+Õ«¾ö5ø>wr¦¶ÿ›""""""""Ò…º*€>ÙYÀk†OË£½m}Ö3ý±
º'«ÂéÁ#hŠÏÚ*‰Ç¶Àr7c´Aï)þù~1È+UŸd“ÁÏ3ðôú±„PªÈí]¬€k0Ãé²¿VçÆ1ÌÀñ×-¯û)‚8³j;¸ÖO´b>öÅko††7ÞÇl#rÀ^¦Yßá!¦l?Ägë´ch‹h›m:ZYW÷G9 ÓrË‡}öÐ××‹uŸ[Ž4“ˆÕÂ‡Ä×›Uq›úJÕÎGö÷Í
ßL­ŠpÏGô­mq4|Órï³a­K{4÷Àö¯š¨ü^ÔRõ}îð,mý7EDDDDDDD¤KuU Ý3ºHzÅßñP'·jüSûb°íž$½=ká„“—DÃ
èFlý[
/‹Ÿ3Ûl·Òg³j;b´ïhelyJ¦þFˆSÝ"¤.÷¤Ùû˜¦­;Œêà¾ÿK½=œ¥žÒ-¯Ñw€ë6·Z	=æ«íK˜¥|iÜFkò'Ê"FÕ~YïZÊ«¨­jç½Cû>f»{lŽÍ
Æ¼4Ï©T”y¶ÖjÉbµò8Í7uT}Ÿ/ÅDDDDDDDDºSWÐ€®ø–g‡„¤Ža–·'ð$"å}™ë1äwttL±Ÿl»¬^ÃÞ!3ô,µ@È¥“­‡•µœ²:·j¶-h+|6+Nëµ;hhˆÏ¦Ëû×[:Y|À^Új—ÐÂçJ~àû<0p½ñÜÜÄì}Üò±;ë$ó˜ŒËöÄ?˜-Gz<·ñ`ö”®Çìßl<¼Ðêù\ù ÄŠÖ!¶jçæúésUïÅïQ1Øïed½vK–ê6VÖ*ÄŽKýèÑ¹14vŠ^DDDDDDDDÞ`Ý@C±BÙSÐFÅfß³ú¾n×	IÃ,›}™¿É–¿?¨|áSV0î³7àÇÓê|¬1›½­§ÜÆ­Âo<l­õ¸íu¨'»i>ä­ô6o+Ì~KUVjy´½´±ÞFK
{Õjeh_ËÉÎ‚­
ÜxÀdó–CL™÷A°uè£·´gøféú¿ßÇj9bÿ±¤ÖÃ,Mƒ^?˜UÐ=£‹Åö(õ[‡˜½ª;ÂÖ’åAé¡{‰úw4úuW< Ð=Y÷ØcúÎÒš}Ÿ;5†FšŽADDDDDDD¤»\yþüù+û¯^½âÅ‹<{öŒñ?ýŽßŽwô„=?úqG×ír«möæé';wo_è½Æ """""""oŸ¿ÿíÙÙqõUóÚðËÜ}îÿôS®]»ÆÕ«W¹råJKŸ{·££¸¤Þ½ós^þïóòÞ=ÞY_çÿëaÓ×ÿØûýE[.‘“‚k5¶¼¾jÖË0†×©gt‘ôèåÃiþ›b½y›¼ô?ö~Ï;kkFhôŸÿ·–^_ƒ31Ò=¹Ôa¨¼~§ùoÊ;kk=l‘×N-8DDDDDDDDDD.‘njÁÑ!‘÷VÐ¹ÕÞ{»œœ÷‰
»ÌùBldì“ÝÄë[àQá¼S­íu°Í'·Â»ºonØgÃÂ[üÛ$WüÐ1î™ûf7+¶5RqLsœ¹UûyŒ¿¬ÑÙë1·slk›ëZy-Z¹~­ìÓŽÓŒADDDDDDDDä’ëÞ ú4Aä©Ža¦]:®ÓWsÃS©éTŒt*B$áb8ÝKß@ãÕ
¤÷ÙðEˆ"æ1c¤×‡éÁì…Š<ÓQÒ©SîÒ'3kÜu¯å1¾JBàgzˆ_y0‰Ç """"""""òuçC³›xg“ˆ°ì°½`‹ op2¿½ÈˆÃ=~H$É "¤g†Àq“;®-–Æ`{±:,ì27¶EÆ5AÜ
FÕo˜¥¼±93"n?ž°àl:•Üjˆ0~‚‰¤ñ9×q3”-Ÿ—5ŸÒ¸ú~â	c»g:ÊrßÃëÐl$Nn¼ßt¸xÞkø ÷G‰öA45É ùöÉÎ×Äq2ÿÉPóÙ¹œxòIîï|Ì²§ÆöÊû¡lÛC–òNæ3DóëW¾(óƒ^?ÌFðbí{>c8ÙY ¸ÖO0$ž ûõk:‘×¬û* Í Ï3-…pîIÒ©Ñ F€›Š‘N•‡®™Œ§b¤WüøÚ¬Ríed=F4pÀÒXE•³>"Å*]kÿôö ¸bVñÃK[uïŠ¿õ9%’°bV ç·øbçØ8ÿl²xcŒåUÅñÃ~â©ñi§Q!Üh²›U-.JÕ´CL™û
ÎÄÊÃÍâç"Ä]üz´·¸ip&Æòh¯¹þ¥ Ù8^”yW’°­"¸px ôÓ×vðmî ³û¤º­H­ûÁ&—¶W7º~[
³„¹næ>EîIã½D¤º½IÇ`Hr4%Š2ï:`éÁ~ó1ˆˆˆˆˆˆˆˆˆ\€®ª€6ªC®”·gh…gúc# uO’N•oœ‰X 8âÈVIì™Ž’¶®
ž°—‡àÝST¦º&øÌ
ð7\?ü“ÁÏ¸9ÏA¯O9*PzƒwÍ`|t‘ôh“s˜!qÛŠŸ3*wƒ÷(Uh7d­}«!Âc!¾_‰q§ý³ÝúdÏØßd&Šï5½
»ÜO8™ßnåšì³— ÏôÍúss³œºÎ†/BÐ÷”hjGGÇ`ñ3nÞw#ë1FšŒa°æ1DDDDDDDDDÎ_WU@÷Œ.’^ñŸµ=”®r«¡bˆX¬èÝž€µp÷ôÜmXÝŠ^n
;!ÿ”ÖÚn)'œÌoá¬cÀ	!zÛÃŒ ¾û¸øV³û!÷`‹Œë6·ÎÐw¹La—9³<n¿—a"""""""""¥«hÀ‡Wüd:W‡¤EŽa–Ûiw`>Èïèè˜âCçÚ•}ÈR‚Þ!zúú${f[\:	g	2ÍöemõÞç›µpõÓ|ûløÂ,åýDm­Pz<·ñ`k)Ñ¦A¯òFoK½û¡°Ëý„­J¼)£ú<sø`ÇöÍÙM¼U-Y:=†&ADDDDDDDDät_ 
¶^¸_û~2'¿EÐÂkë=\Wá	{ùés³löeþ&[þþx â³öJâ!¦¬ÒfoÀO­çåÕdÙlû1å6æŸvÏNø‰¶:¶½õv™+VL›U·­Œ!û-qüÕí!ì¡¾u\3ÜÏ­šç s
+zr¸?fÞUã|5î‡“Ìc2ÅÖ&j^¿^F~S[?AÛGŒ>Î
þ×‘14Öt"""""""""¯Ù•çÏŸ¿²¿ñêÕ+^¼xÁ³gÏÿÓïøíàxGOØó£wôxÝ.·"|Øb°+-ÚgÃSô
ï®1ˆˆˆˆˆˆˆˆÈeô÷¿=;û1®¾j¾S~™»ÏýŸ~Êµk×¸zõ*W®\iésÝY]áÝ;?çõu ÞY_oéµt³!¦RüÖƒîWéoE ý½ßÃË—FP÷òek¯/‰Á™˜úù¾eÞäûUDDDDDDDDÄN-8DDDDDDDDDD.µàiâ­
 s«!¼÷v99ïv™ó…ØÈ6Ø'»‰×·À£Ây¦ZÛë`›On5„wu¿b‡}6|¡Šùóèž¹ov¯o“\K'³Žeþ™ãÌ­ÚÞ3ÿ6²p²³€×bnçØ6ÖVÖµü<ÅÏWÌ×îµÝ?elëh2æÜx=;;ÖÓADDDDDDDD¤{è–ƒÈ³Ã2†Ío:ÇuúlÎ­Fˆ»œxÊÞí¥o ÎêÒûlø"ÄÒ©˜ñgö¿œ‰‘NEžé(éŠøeÖ¶†óèží<+~2k«òc€¥v°d²”w2ÿÉÐŽnÈe!ûëC'¾""""""""òÆy÷¢p.²›xg“ˆ°ì°½`‹ op2¿½ÈˆÃ=~H$É "¤g†Àq“;®-–Æ`{‘GÅy
»Ìm‘qMwƒô…YÊ›3³!âöãYkñ Î¦SÉ­†ã'˜HŸsM·JX6/k>¥qõüÄÆvÏt”å¾‡
Ö¡ÙHœÜx¿ÆÛÙMÂ	'ó+·Ù›}\µÙ3ð^õgÜ$BØÑÔ$ƒæÛ';_çA§Ë‰'ŸäþÎÇ,{šï^T3dO’½LvÿÏ×à)ßÜÏS~-¬{héZŒöšÇ³î'óÛ•ó>æÑWÆ}l?–qŽÂ>ãxÁ3Œ/» —õz¹5ìdi-ÌösÛÎÓ‘1œá»$""""""""]©û* ÍÎ3-…†îIÒ©Ñ Fh˜Š‘N•‡`™Œ›Õ°$¾6+5{Y
°4VQålqH±J×Ú?½=#”K§bæ8ª«n[–HÂŠYœßâ‹cãü³Éâ9Œ1–WÇû‰§bÄ§F…p£uÈnVµ¸(UÃ1eî78³…±F8é™ža¤F8=83ÂN÷$i[Ðl/Ê¼+IØV[8< úék;œ¼Í dvŸœ²åÄ{ÜpAæðeƒëgÊ'á®¹O~‹o² ûlŒmÑgîŸ¦ùµ JÁ¯ŸhªÖOØ³W;†Y6~¢f•ø”›÷Cù¡zFÍJïpE•sÇ`jû»$""""""""]««* Ov®”*BÛà™þØHÝ“¤SåÛgbÄÎ†8²U{¦£¤«ªIë(<a/Á»§hcàšà37XAiüðNxL?ãæ<½~H<å¨@1è
Þ5ƒñÑEÒ£MÎa†Äí8ÙY5‚Ëõ^h»µ‚Hö­†…ø~%Ævasë“	<c[|“™8ÃQZ`]û|³ß•ÒVÅ4 ýe«¾f5¼k‚xÊú£\îñÇrüI¦ü~¨É=Iz»Ÿ¹±ÞÃ	âë×ù¦ƒc°´õ]jõû#""""""""o¤®
 {FI÷mâíp¸•[
NØZ`ya¼‡‘ò
Ù7Ueû¨h=Qé˜ïv°·a È˜aró ìmŒÊÛ“#'`†èíVA;†lÞ}L+]8j©Ù.¤e­¶2±Uà7î…	úž–µ" °ËýW:xoÙZÓX×õu¡ú»$""""""""Ý¬ûZp¸'ë´8
ãámá„“ùíŠÀÌ1ÌòöžDï½Ýæ­ÌùSì«Û®ìC–òôÑÓ×$Ù3[äÒIpÝæÖi{ëší9Êþëf»kßí	<ÔX§šöÙðU·}èñÜÆÃKNwÝ½~È˜ý‰pDÐ~³'ôÏ)°x¿ÿ”ãîed½º	˜•ÇÅÊ÷æŒûÁï­àØîdg¡º5M‡ÇÐXƒï’ˆˆˆˆˆˆˆˆt­î Ál50§ØÖ0ø‰Ñ·7èá­Ûj²úßÖ«lu³löeþ&[þþx â³ö^ÊCLYÁ¸/ÌÞ€¿õJ]kÌf€8å6æŸvÏNø‰®×n£P©íuè´ì·ÄñWWÜÚC}«µîçVCxÍ8kX£°ûcæ]´`ˆ)ûyf“Wl×¸æõkÀ1ÌòŠjŒ»9[oäb€½Ï^ÂÖ¶£BÏè/’$lžk#¸'‹ý•½céØpiT«{êþ«€¡‘fß%éJWž?þÊþÆ«W¯xñâÏž=cüO¿ã·ƒã=aÏ~ÜÑãu»ÜjˆðáñÃeyóì,Ü½}¡×ü2ŒADDDDDDDämõ÷¿=;û1®¾j¾S~™»ÏýŸ~Êµk×¸zõ*W®\iésÝY]áÝ;?çõu ÞY_oéµ¼~§¹Nu_ÿk˜ÿþ_~ð!^_ˆ/?ø?š¯çvŽÏ~ü3¾n¤gt‘ô¿õÆp^s‘îôVÐÿØû=¼|iË/_¶öú’œ‰]x/“õ    IDATùºœê:Õ{ýãâ?ýµÀÔ¯>ç/O˜úÕçüÌ|ý_þë§g?þY_¿¡N;gy;©‡ˆˆˆˆˆˆˆˆˆÈ%¢"""""""""""M¼Utn5„÷Þ.'ç}¢Â.s¾Ùûd7ñúxT8ïÁTk{lóÉ­†ð®î›öÙð…ðÚþævŽÍmÇ<ºgî›ÝÄëÛ$×ôDÆñJÇ°3gËCv³ìüÞfë^Kåµhåúµ²ÏyADDDDDDDDä’ëÞ º°ËÜYÞ–Ža„¦]:®Ó×`sp%F:eü-öšïöÒ7Pç-Ò%¹Õ0KLOÅHoOàIDÊÖÜC”yÄ¿ª®×½–Ç<ú*	_0âhc@Uã³óu\†1ˆˆˆˆˆˆˆˆˆ¼Fï^ô ÎEvïl–¶× lômNæ·qì³á‹pðC"I !=3Ž›Üqm±4¶ Û‹Õá`a—¹±-2®	ân0ªtÃ,åÍ™Ùqûñ0Î/ÀÙt*¹ÕaüIãs®	âÖC	ËæeÍ§4®¾€ŸxÂØî™Ž²Ü÷°Á:4‰“ï7nÏÀ{Õoº?"H„°¢©I›¤°ËýWÌy;nrÇKé}¦¼5ö¸^þÐÆÊû¡lÛC–òNæ3DóëW¾(óƒ^?ÌFðbí[yžÎŒádgàZ?Á@’xì×¯éDDDDDDDDD^³î«€6ƒ>Ït´Â¹'I§bDn*F:Uºf0žŠ‘^ñCâk³Jµ—‘õÑÀKcUÎVøˆ¶asÿôöl•ÁÅð2B<1Þ[ñ·>§DVb¤S‚ù-¾Ø96Î?›,žÃcyUqü°Ÿx*F|ÚIfí!¹FëP£•E©švˆ)s¿Á™XU¸Ÿµ>S~þÁ³"Ú=Iº,hb*eÞ•$|ª*u³ºúðÏÅJgca#ÈýÄ6¾Z÷ƒM.m¯<ntýjTaÛäž,VfWµ7éàIŽ¢fÅ÷Kö›ADDDDDDDDätU´Qz@p%Æ”»½Ïz¦?6R÷$éTù¶Á™ñ‚³!Žl•Äžé(ébË‰&
OØËCðî)*S]|æx.ˆþÀ	ÉàgÜœç ×‰§(½Á»f0>ºHz´É9Ì¸=CL¥bLVånø^©B»!#hí[
ñý)®™uÍs«!Âc›ô¥&q4»
»ÜO8™ßnåšì³— ÏôÍúss³œºÎ†/BÐ÷”hÇÇ`ñ3nÞw#ë1FšŒ¡i…¹ˆˆˆˆˆˆˆˆÈ9éª
èžÑEÒ+~â³õdw:¹ÕP1D,VônOÀZ¸{zî6¬€nEƒžÏ5'œÌoŸ2|®lµÄcñÍî‡Üƒ-2®ÛÜ:Cßå2…]æ|â®	âfð{Æ """"""""rQº*€ŒpxÅO¦#ápƒÔ1Ìr;íÌùS|è\»²YÊCÐ;DO_?dÏl’K'á,A¦Ùž£ì¯­>ÂF…p­P¸Ö¾¾0Ky?ÑTý§ÍžÏÅ‡Z=¡½uÚYÐOŸuÌz÷ƒuŒ»­TkƒU}ž9üÁ8Ïƒ-£_¸%»‰·ª%K§ÇÐD£1ˆˆˆˆˆˆˆˆˆ\€î ÁÖ÷ë²þÂƒŸLàÉoô…ð¶Ò{¸ð„½|ƒ‡ô9†Y6û2“-<`ë¼º1e…¾0{þòÂXc6Û~L¹9Æ§Ås„~¢-†Žm¯C]ûl+¦ÍþÖ­„ÖÙo‰ã¯ÛÂX#ûÚõ2²n¬sÐÂ;¶Ö:˜Jëàd~»â¸5î‡“Ìc2ÅÖ&j^¿^F~cþàà3iûˆÑÇ¹Áü;2†ÆšŽADDDDDDDDä5»òüùóWö7^½zÅ‹/xöìãú¿ïè	{~ôãŽ¯ÛåVC„'Zì«,­ÙgÃ3ö~óÇ """"""""—ÑßÿöììÇ¸úªùNmøeî>÷ú)×®]ãêÕ«\¹r¥¥Ïugt…wïüœwÖ×xg}½¥×ÒÍÌ‡'^hð[º_EDDDDDDD¤[¼ô?ö~/_AÝË—­½¾$gbêçû–y“ïW;µà¹DÔ‚C¤v™kñ"""""""""Ò¾·*€Î­†ðÞÛåä¼Od›Ùûd7ñúxT8ïÁTk{lóÉ­V¶¹Õ^Ÿñ7·sl¾{Ì£{æ¾ÙM¼¾MrMNs²³P<ŽñwÆõ¹À5.·Ï†}^çvç)]ƒ× ê^oa­|?Î{""""""""òZto ]Øeî¬ácKÇ0Â®Ž…i—‘ã:}57!søp‚x*F:cy´×ÜÖKß@ã5¤ÌoÇH§"9`éÁ9V';†YNÅHÏß9ØgÃ!ˆ6×èëéÝà{{°EÆ5Ággy c+?P\†1ˆˆˆˆˆˆˆˆHÛÞ½èœ‹ì&ÞÙ$",;l¯Ø"èÛÂ:qáQÀ‰$€@Ä%7¹ãÚbil¶qTœ§°ËÜ˜~ÅÝ`²a–òÆæÌlˆ¸ýxVY<€³éTr«!Âø	&’Æç\Ä­ ³l^Ö|Jãêø‰'Œížé(Ë}¬C³‘8¹ñ~åüŸ°—w2¿]?Põ¼Wý¦û#‚Dû ššd°ÁYKŸ/_ÛÒšRÊÆj»VëÃVC„õŽÁ@’x¢òx•×òëQÃÉÎ×Äq2ÿI­»üxžé¨àg7ñÎ>5ÏkÎ{Àc½û¡l>ka¼k¶±5¼žÚæW~®²µµ¾Kkz?Ácþ¹Fc¨¼~PúQ£ÙýÐ¡1°³@p­¿öµmãž‘Öu_´Vy¦£¥Í=I:#À£R1Ò©ò2“€ñTŒôŠ_›•–½Œ¬ÇˆX«¨r¶Í@ÄVÑjìŸÞžÀWÌŠ×™!ŒpÏV	»âo}N‰$¬˜UÁù-¾Ø96Î?›,žÃcygü°Ÿx*F|ÚIfí!¹FëÝ¬haoµ1Ä”¹ßàŒ­bø/OÉ ß?(µÎ°¯ÑàŒYíž$]ê
1•Š2ïJ®ªj5ÖÚë‹ÇÏ¸YQ[
³„9æí	<‰ˆÑb¡…u€cýk)|î1ÇfTY×’$N„t*Ê¼«T…[·ÖmÅø‰6©f. ýôUüÕ÷Cf-ÜZ%½u?lOàÉoñM¶|>žéhÍJëêûá#‚°—1[Ud²”·…åµ¾K6'™Çe•ÇÆPuýÊŽÔà~èàIŽ¢U×¶ñ=)""""""""§ÕUÐ';×®Ä˜jóŸã{¦?6R÷$éTù¶Á™ñ‚³!Žl•Äžé(ébË‰&
OØËCðî)Ú=¶÷¸á‚øáœð˜~Æ­àÍë‡ÄSŽ
ƒÞà]3x]$=ÚäfHÜŽ“£§ÀèõÕ§³›Üi©‚ÔëûVC„ÇB|¿ã3 T•jTÌ†ïõ_¿Î^<Ó7ù8nrÇK-­ÃKcaÀO4Õjë+„­ÑCxàzgÚgTÞî’äèè˜:ýNJ¬û¡Í´Öýà˜vÜ}ÂÉè0…t\Ür´ò]Úç›µ‚+‹-¬Ç~ùõ«©ÆýpÔÉ1XJ?jŒ¬Çi2†vÿ;"""""""""åºªºgt‘ôŠŸølg@–[
ƒ°bEïö„ñOüWÏ±GñëÔ°º¶ž¾~ÀÉè
zý€þ6göN=Ÿ«ƒ¾^n
;!ÿ´Ýœµ‚“`À	$Ù;cŸn#ÜŽk3›,ýhÑ€cÀIëkòúõxnãÉ?æ»‚[!u³ï’ÑZÄÏŽ´Õ÷ÃeƒˆˆˆˆˆˆˆˆœMWÐ€›íÎ7¤Ã,›­ ¼÷v9iv(óA~GGÇÆq¿J6ûDµìC–òô™áo)TÍ¥“àºÍ­¦½œë0Ûs”ý5{8ßûýx8àû¿´;†}6|a–ò~¢©zý§ùn÷ \ý8ÌÊïÌîc­êá×áÆ'3Ì» >{–‡Ì×¬ØÖ¡ì‹õõxnã©õ0Eó~ˆ§Í÷³ß·…ùEæ5?7ŽaÆ,íEÊäW÷»dT·ÀÌëwø`>4°l{ƒû¡cch¦•{RDDDDDDDDÚÕU-8ŠÜ“¤·û™ûšGŸ”Â¤ÁO&ðŒµñð½âCöêìçf9u
_„o²Ã¥€Ú1Ìx`‹pÅC§Vüxg£y~<ù§­Í'oÙèkkœg’øôS‚Ö9Úh1Ñö:Ôãfyå)ÞvÇý–8þ:{3z@/Uod=Â÷¾È)×¡·øyã!ssd ^"‚7aôìžª;è^FîúY2¯Ÿ¥i»Ç0ËÛ07fœ(>oj{‚#ÛûÁ•˜q3ï
›ëà' üÁ‡u
ñÙ´“`Õ 3*»“x†k´È¨õ]²®_Í ¾öF~3Áž5×€Ÿ ¶`ÞCCÍÆ """"""""§råùóç¯ìo¼zõŠ/^ðìÙ3Æÿô;~;8ÞÑöüèÇ=^·Ë­†¶$ÊyÚgÃ1z€öbTÇ‡Yˆ4¯¿äŒ~Ïý-†¯Æ¼÷†£-U€ŸË0‘óó÷¿=;û1®¾j¾S~™»ÏýŸ~Êµk×¸zõ*W®\iésÝ×‚£†wïüœwÖ×xg}½¥×òúæ:½¾×{Lýþÿc¯/Ä—Œð?}³Ï¿ÿß°áñåòÇŸ8øòƒÍíòÇú—K4þ¯ÿçA¾üàC‚kýüûþÿøgÛöúŒõ]lð[ú®‹ˆˆˆˆˆˆˆ\.oE ý½ßÃË—FØôòek¯/‰Á™é·¤úùT×é5¾þÑ˜úÕçüáå	S¿úœŸý5‡ãe/3Å×Ûÿã¿]ªñW½þsæxÿGåö7Ô›ü]éFjÁ!"""""""""r‰¨‡ˆˆˆˆˆˆˆˆˆˆHoU [
á½·ËÉyŸ¨°Ëœ/ÄF¶Á>ÙM¼¾Î{0ÕÚ^Û|r«!¼«ûÆûÙM¼¾PÅß&9ÀxPœ¹ovÓö~3ûl˜Çj¸~ädg¡¹Ø?SZ£Ë8¯Æl×ÒÔÊ:töûvº1ˆˆˆˆˆˆˆˆÈÅêÞ º°ËÜYÞ–Ža¦o^¨ØÇuúj½ïž$Š™‚  —¾:ÇkHg¿%îš`> ñô~­=Þ,ÙM‚k0¿+®Õ”û¢U[ÙvÙ‡,åÌ2túƒ·ø}¼c‘Îy÷¢p.²›xg“ˆ°ì°½`‹ op2¿½ÈˆcŸ
_„£€I2 é™!pÜäŽk‹¥±Ø^dÄQqžÂ.sc[d\ÄÝ`Ti†YÊ›3³!âöãaœ+^<€³éTr«!Âø	&’Æç\Ä­‡–ÍËšOi\}?ñ„±Ý3e¹ïaƒuh6'7Þo°9û-qªBÏÀ{Õûº?"H„°¢©I3°6œ=…¸5à„Ý?sÂPéŒõæ[±î¥õ6ªdƒkæ¿y>sÿs¿ì&ÞÙ§Æñþ²‰w‚$ñ„í<˜×€Â>cÁ•ÆòÉÑÓ‹V~?x¦£,ö–ÇQ>Vc>ýÕãk²åkç¯XwësNæ·+Þc}e|—ì÷VÝu(;à2ÿ·Ùw©cc8Ã÷YDDDDDDDD:®û* Í Ì3-…of¥n4€à¦b¤SåT&ã©é?$¾6«${Y
°4VQål…`i+6÷OoOàÁÄÒ©˜9ŽcÝ‹DŒ÷Vü­Ï)‘„³Ê8¿Å;ÇÆùg“Åsc,¯*ŽöOÅˆO;É¬=$×hjµÓ(V¢1eî78+­k‘ºnsË¶¦ƒ31#PuO’.<‡˜JE™w%	—U¤óÝîAï=žÛxòùÎÚf^×âš¦*BW¬ùÄÊB×Rõ±y¾–ZB$‰1?sÀÒƒ}p³l®¥à¶VÍÜ3ú‚÷Oyûêû!³n±’>ÉÑ@´||Ö¡°ËÜìÓbv4`_+øõMÕú‘å	{öÊãFëPuOÚÔà»ÔÉ1˜Úþ>‹ˆˆˆˆˆˆˆÈ¹èª údg¡R.ö¶õYÏôÇF@êž¬
§gŒ°+>bnçØCÇ¶Àr7SxÂ^‚ÞS´pMð™à=n¸ sø'™ÇdðsÇÝ½~à)G¶öÁ»F0Þ3ºX ×PÖN£"Àlunw‡KÕÊMÕÍ ñÆû˜m?ØËK'mëÐÚ¹ÏX¡x/·†JóglõPfˆ)ÛñY3Ø¯¼ÜŽŽŽ[8¦ŸñÑ^Š?xÌ5\ã^)…àá„µeŸ
ŸZ×¾?r¶È~ÑRµpå=YKÕw©Ãc°´õ}‘sÓU-8zFI÷mâ
qdµ3è€ÜªÚ•Ú-L’Þîgn,Œ÷0ÒzP{™U¶N€ò
äl‘ÁÏx[½í-¬*ì§d8 3bÉÚíð 3×ñB¹'I§>6æ|øçóf•Ê¶†©T”÷Â}O«·v¹Ÿ€àJçîïêïRï%ƒˆˆˆˆˆˆˆˆœ—®ª€Œ ÏlgPóafm9æÑ½á„“ùíŠ°Ê1ÌòöžDo+mÌù®fËŠve²dVÍöôõIöÌ6åÕ¾§pÚ
h3 ,Vœ¶Ä¬z­h¹K}~­óÇ§ø–f…w~‹o*Û&8nrÇñ¯ª¯cÀ	Å6F{ÒC-§¼§òßçëô˜÷CñA‹fí;žŠ°Ý¼æM5Xë^¹_³Ú·—‘õZíPÌjU×aœÇ¬Â7ï‹’ß¥Ž¡±Fc‘óÐ}4aêöžbïWÃà'xò[}!¼AWMVïÙz,s³löe.FÃŒÌvÅ^ÊCLYÁ¸/ÌÞ€O«ó±Ælö¶žrs´ÚmüD×[kÑö:4`´]¨œ6’ý–xUEî>{‰ò%e!{Å|KãîedÝ¸ÁŠÞÕ=£‹Å^«ÍÃÌñ™»~HDÚ¾FOç$a_eOç:ë³³`ë«!î²Æ0Ä”õ†ymƒ+æ}æþØèí<2ˆØÊÈê¯ƒµvÆ½WÙßÛú¬Ùåõ¾y=ê´U©¹îÉÒz=¦/`{Èf³ïR§ÆÐHÓ1ˆˆˆˆˆˆˆˆH§]yþüù+û¯^½âÅ‹<{öŒñ?ýŽßŽwô„=?úqG×ír«!Â‡Ä[—E:ádgàîí½ï.ÃDDDDDDDD.ÂßÿöììÇ¸úªùNmøeî>÷ú)×®]ãêÕ«\¹r¥¥Ïugt…wïüœwÖ×xg}½¥×òúæ:]üëß°áñåòÇŸ8øòƒñZ¯ÿé_.Áøê¿n¤gt‘ô¿õÆp–y‹ˆˆˆˆˆˆˆÈëõVÐÿØû=¼|iË/_¶öú’œ‰]xøºœê:]øë^f^ž0õ«ÏùÙ_Lýêsþ`½þÿv	ÆWÿõ›ê´ó‘×O-8DDDDDDDDDD.µàiâ­
 s«!¼÷v99ïv™ó…ØÈ6Ø'»‰×·À£Ây¦ZÛë`›On5„wu¿´-»‰×*þ•æ|Ì£{æ¾ÙM¼¾MrMNs²³Pv¬ªõ©8×ÜÎqù¹ŠÛš«rÿçªœCªÖ÷î‡SADDDDDDDD¤Ãº7€.ì2wÖ@¯¥cì³ÑíÁžã:}µÞ/ì27›$¸#ŠŸvŸµÂß^úê¯a íd~;F:!ÈKöKŸ±+Š±<Ú‹‡Yb‚xÊÚ6É`Ã	õ2²#½=Ìc.2âhe1';µCüÂ.÷¼{–¾ÝFð]
Ø/ïDDDDDDDDDy÷¢p.Ì°’@„e‡í5 [}[Aç"#Ž}6|Ž~H$É "¤g†Àq“;®-–Æ`»F@YØenl‹Œk‚¸ŠahÞØœ™
·ã\ñâœM§’[
ÆO0‘4>çš n=”°l^Ö|Jãêø‰'Œížé(Ë}¬C³‘8¹ñ~í-GGÇàî5^¸ú±Ê3ð^õÜ$BØÑ&a±ñùc}•×Ÿ¹+vÈ>d)Á•Î=¨ñdgàÚAéŠ =·"œ€àÊbÕ9sŒûá×gºz¹5ìdi-ÌQ3h?Ÿ1äVC„ýIÏøÍkÒ|"""""""""Ít_´Êz¦£fÈ¸'I§bDnªºâ5“€ñTŒôŠ_›UÏF¥l4pÀÒXE•³>"¤­@¸femÌÇ1îEˆ"Æ{+þÖç”HÂŠYœßâ‹ãªêccŒåUÅñÃ~âferfí!¹FëPÑÞÂë³·žbÊÜop&VZWÇ0¿žv’Yãõ…®ÁüoJAðàŒY¥ìž¬¨Jb*eÞ•$\Uan¬µ×!ŽŸñÑ^à¾Ï×«ÂÖ“£§4
ÇÛ–Ý4æ±#Š2ï*ßl¿F•öTeÎ>{e•Ç§¿zFI¯øµ­hÒ¹1˜òI¸kU'¹oV=7ƒˆˆˆˆˆˆˆˆH+ºªÚª\
®Ô
æóLl¤îIÒ©òmƒ31âgCÙ*‰=ÓQÒ­V†ž°—‡àÝ¡æûV*Vþ¾Ç
Äà„Çdð3nÎsÐë‡ÄSŽ
ƒÞb9ºHz´É9Ì¸]…C[¥°Ù2cd¦•9ÁhßjˆðXˆïWb|”*²ÊÝð½~âë×Û×iåÒF¥õ­ªŠp«’Ø_·jûdçkâÅjø&Z¹Ü“¤·û™‹à=œ ¾~“ï:9Kñþb*k2†ÎUš‹ˆˆˆˆˆˆˆH÷ëª
h«b3>ÛÙÞµ¹ÕP1Ø.VônO@7U†6¬€®ÿ«×ê]ªoÆè1\¿’×hAþ)3xçðÏUýŽ{úú¾ÿK‹ó<5«¾VÕ6À>ß¬à¾Ù¹€6»‰·¬Êþ2ŒADDDDDDDD¤u]@F8Ü±¶
BRÇ0ËÛx‘Ú‚«d>Èïèè˜bOãvYýŽ½CfðšdÏlbTîÞ®Q¹Û"³=GÙ_K•Ì•áo?}MÇ°Ï†Ïªä­×ú˜ïvÌžÒV½Å7•{tDˆÕÂ5hcÀ
½)®·ÝàLí–,';_ÛZ†´r¢Æ÷ÃÉÎBu+™N¡‰FciE÷ÐP¬PöTTã~2'¿EÐÂ[³‚´Bá	{ùés³löe.FÃŒ >k¯$bÊ
Æ}aöüxZ5f3œrsŒO;‹ç'üD[¬Pm{êqOµÍÓ¨oüPA ²ß§^	«´P›sê],›¯×gU¹1e^ƒ`±z»¼v5ã‡ïØ¬ñëÐ3:cö¦á…` úÓƒ3Fµw)ô6Âòb—JmßÖñê?ü¯3ch¼FÍÆ """"""""ÒÌ•çÏŸ¿²¿ñêÕ+^¼xÁ³gÏÿÓïøíàxGOØó£wôxÝ.·"¬Þ»—[vï,uû2¿5c‘ŽøûßžýW_5ß©
¿ÌÝçþO?åÚµk\½z•+W®´ô¹î¬€®ðîŸóÎú: ï¬¯·ôZ^¿Ó\§º¯ÿ5Ìÿ‰ƒ/?ø¯/Ä—|ÈÍ×s;Çm¯!óŽü6ƒî¹(oE ý½ßÃË—F°öòek¯/‰Á™Ø[óð·S]§z¯üOü§¿˜úÕçüáå	S¿úœŸ™¯ÿËý´ýã½ÁÞäû_DDDDDDDDÞljÁ!"""""""""r‰¨‡ˆˆˆˆˆˆˆˆˆˆHoU [
á½·ËÉyŸ¨°Ëœ/ÄF¶Á>ÙM¼¾Î{0ÕÚ^Û|r«!¼«ûÅM';x}!óo“\qË1î™ûf7+¶5>×ö7·s\:–}[Ùø+·ÛÏµÏFÝÏÕV>§òëhlka.5æÕð~è°ªk|÷dåNµv""""""""òFëÞ º°ËÜYÃ´–Žaœ¯3\|í×é«õ~v“àÌoÇH§¢Ì»’„‹át/}uŽ×$®ÄH§Œ¿åÑÞÒ×ñTŒôŠò[|“#|³„¹-³=ŒoŸ
_„x R<^Ó~Úes2þ¦Ü>pqNvjê…]î' x÷,½ÃPßøàrADDDDDDDD.¯w/z ç"»‰w6	ËÛk ¶ú¶ 'óÛ‹Œ8Œò(à‡D’@ Bzf7¹ãÚbil¶qTœ§°ËÜØ×q7ÃÐ¼±93"n?žˆàl:•Üjˆ0~‚‰¤ñ9×q+D-›—5ŸÒ¸ú~â	c»g:ÊrßÃëÐl$Nn¼_þÎÉÑS Ÿ>@/·†°ö-¹™!3 ÏÀ{Õ‡rDaD‹aq»Ìñd²”‡àJuÐy²ó5qœÌ2ÔòQ9Õ`]k ûŒu®Ä˜rW_WcMÝïÛÌ{#»‰wöiñZœì,\;¨8^i8¹ÕáW«æ{`Ü“¿>Ó=i\Ï¥µ0sDËhw
×Î<Î¡Ÿ Iây ¿y_4ƒˆˆˆˆˆˆˆˆ\nÝ@›¡¬gÚX¹'I§&Í ËàÚdMÅXÎnâýšGŸ,2âèed=FßjˆðXˆïWlÕ°V¨Vò ŒýG¬ Ø¾?Ç<ºgVãÚÇ–$’íp-2    IDAT°#m_ìÜdÙó„¹Ùdyˆ7¶IŸ-ÐöOÅ`gàÚCr©ëPf›Šsb*µh¼7#]¶ÓSŽ
0è€ÂáÐ_Ü28c€IÒ)ûg†˜JE¹q/LØ÷´*\[!)¥€¼šcqÀIæ)µÂq°Æã7òÖôŒþ‚àZ„¥±Köó;†YN
›ÁpEp>ÄT*Æ”ù*·"ü¯»ÜZnx?ÔUØå‹µƒò¹ÛÁo½öÙKØùÓß“=£‹¤û6ñÎ†ñÚïó6ÇÐpíLùò{üþÎÇ,ö6ƒˆˆˆˆˆˆˆˆ\~]@[U£õ‚»F<Ó¡˜»2,5‚ÔøÀÁÙG¶JbÏt”t«U™…'ìå!x÷šk‚ÏÜ ïqÃñÃ8á1üŒ›óôú!a†ÁæÇŠíFI69‡Ò·£gt†ùÝp1¬õ¸šWt—Ô÷Í¹îõ³ª¿»ÌE˜ˆòë¶FÜ
3L6ùøl¨Ð6P^±¸Î0³å‰Äûm­UÍì¯[9~²ó5ñbE~­Ü“îIÒÛýÌEðN_¿Éwƒ¥xëßxgië!""""""""¯SWõ€î]$½â'>ÛÙ¾±¹ÕP1Ø^í5±	X—=ï–Ý,ÈŸ/ÔÂÜŒÙê•<>p ®~Z+86úûU´mþ`à¸Éd §¯8àû¿ÔØmÀ‰U¡Ý6÷¤Ù×8üsãf7‹÷G:#8ÅùÊ!lzÅ$	Æh¬w4$\³7ù>ß¬à¾Ù¹€6»‰×ªô_¦çRŒADDDDDDDDÞ]U
Áá
ú'ûVÅiVŽa–·i½*Ó¬j=::7<ú*I+= ËXýŽïÑC?d/;É ré$¸&¸å N¸¶W]Æzè\^ÌÕ¬¾Ãõ«hŸË¨Üõ¿gö“Nÿj—Ï*®Aç6¶Xz°ÏÈ©îƒø>®·0'³
ˆ¹íU@×¾Ü“¤Skuø`TÛÎÄˆRÝÆèyí'ÚjU~“{Òªê.kgcêØšh4‘·ÉçŸ^wÛ¿ýÛ¿½Æ‘´§«* ‹Ì
eOâë²
ÍÁO&ðä·úBxkVoV(<a¯Vølq³œŠÌoñM¶üýñ€ÑB¡TI<ÄÔŠŸÌZ¯/ÌÞ€O«ó±Æl¶ý˜rsŒO;‹ç'üD[¬m{ê)ì2gUKWõn ûmÃð¹¸n¾ŠJvkÌf5¬H1e^ƒ`±z{“˜?LàIDJUÝ÷vV3Ÿì,ØªÀ#F+	[xÝ3ú‚fU²×b#¸?fÞuÀÒXïØSîLWÉ5ï‡^Fîú!©¾ìëjõúàLÌ¸þ_Yó9æ»ÝƒR+™Jmß“Öñê¿íŽ¡æÚ5Ô|""""""""o‹z!óeŸ®<þü•ýW¯^ñâÅž={ÆøŸ~ÇoÇ;zÂžý¸£Çëvœ(R”ÝÄ;Ëé*Ê»i""""""""]àï{Vw›½ºQøü÷«¯ên;_æîsÿ§ŸríÚ5®^½Ê•+WZú\wV@Wx÷ÎÏyg}€wÖ×[z-¯ßi®Ói^çVC|ùÁ‡üñ'¾üàC¼>ëõ Ç¯áü§}ÝÙBåBƒßcÐwPDDDDDDD¤3¬Ðù²W>[ÞŠ ú{¿‡—/PëåËÖ^_ƒ3±·æÁk§ºN§xýÏÿ÷	S¿úœŸýµÀÔ¯>ç/­×9¯áü§}ý&{“¿ƒ""""""""—Í›>ƒZpˆˆˆˆˆˆˆˆˆˆ\*Zp´|µà‘nöVÐ¹ÕÞ{»œœ÷‰
»ÌùBldì“ÝÄë[àQá¼S­íu°Í'·Â»º_¶ùdgoùZï›ä¬
Å¹óè^ˆ¹ãæcx]ëeÎÕskç³æYœGa—¹º¶–ªk|÷dåŒu²Ý""""""""Òõº7€îDØÒ1öÙhì½é×é«³)·"¸vP½!»Ip
æ·c¤SQæ]IÂVpý~?žšGk#>/Ža–S1âÓÎ¶?šY{øZÃÕ“…Ú?$v¹Ÿ€àÝ³ôoíZ\†1ˆˆˆˆˆˆˆˆÈåõîEà\d7ñÎ&!aÙa{
ÀAßàd~{‘Ç>¾G?$’d Ò3Cà¸É×Kc°½Èˆ£â<…]æÆ¶È¸&ˆ»ÁÌÂ,åÍ™Ùqûñ0Î/ yÈ™[
ÆO0‘4>çš n=”°l^Ö|Jãêø‰'Œížé(Ë}¬C³‘8¹ñ~õüïNß†/Æ¶ÊÇN‚k‚[€ø>ä¿%73Ä  ýô9à¨ìS½Üv²´fŽ(Ë£½M×ÇÇÜØ–qí*æ“[
N”Ïc~{‘¾åï{¦Û8_-.'ž|’û;³lO×ËÆà'ššd0»‰÷«§xòdð$‰' ¸cÊMÅµ5?c;¬5¯àÊbUÀ›{`Ü“¿>Ó=ÙüZ´<†²58 ì3æeÍ5·"|è'H’xÞ>ßSÞ""""""""rit_´Üy¦£fÀ¸'I§bDn*F:Uºf0žŠ‘^ñCâk³ê¹—‘õÑÀKcUÎV¨ˆ¶asÿôöŒ€-Š™ã8æÑ½ñ@ÄxoÅßúœIX‰‘NEæ·øbçØ8ÿl²xcŒåí
â‡ýÄÍjÞÌÚCrÖ!»ik—aþ[m1eî78+­«c˜åõZ®Ç×éaŸ
ß×Ü˜öO9*˜Ÿ3Æ‘õXY°Ø3ºHzÅOf-\Õê£¶}6Æ¶è3×!>Mi²›„N³
;B#,-Î#+^‹ÌÚê[OÜæN 2»OÊ«ÍŠjã\•ày¸³!H’£(Ñ Y×ö©9îÑ@’°­ÊØ~yM¹«×c¯¬òøô÷d£kÑÖÊªÊýDÍõ(û\>	w­ë”ä¾YõÜþý """"""""—IWU@Ÿì,\;(U‘¶Á3ý±Qaêž$*ß68#>°@p6Ä‘­’Ø3%Ýr•îöò¼;ÔÞÀ \|æx.ˆþÀ	ÉàgÜœç ×	#àµ*e‹àè"éÑ&çpO’NM¶?¶†þÌ£ÿ¿½»ŽªÎó=þ9P"JxŠBAT‚’ˆt aîŽ™MG°œªTîÝô7Xà°Êê-ªf®
SŒ°Â®ŠwdfÑ™Y*[zAœ"¬aï(„0a!ˆHxˆhx0ÌhPÈCÿîçtÒt’NÈIw'ïW¥éÓ¿s¾§ûP3~øòý=±QZ³E÷éU­
wYÚ•lž e¯Töñ€ŽïP*?°»wý½’¤	o°;­Ûi×™Üý‘meü @Þ‡7êÍò‚ ×ÛuaO
®íIãÇ–ŽKå-ßí1•?œßú™M‘Z»™ÛwDûÕm}CE-ù]ç™l÷]¤«¬7kðkyÆ§jÑÎ-]Ôp5c=      ¢_míÕoÒu}JÛq‘Ñ¯è¤žSÉøW•íŠ{é¯ì·ŽðÛþ@¬PÙÇW¶vÇ² ‘Žy=½·Ñ?IÒ¶úÄùÌê¶žT‡apGµ„}ýÆˆ¤ÍVžV¶Œ|PK(jwM—ûÏ_ùª²—žìÆýu yŽæÏÛ¨Â»Zf\×m]át
?§û’ 9¬“…xï{i‹Æ¯ÍWaÎÉ÷|Xo®;&ïâ%½Ð†ø.¢¡     €þ....Ò%ôŠþ7‚#mA/þ•}{´£’çhõæy·­½	[[ÎF~§OŸ³ÏûZqW+Ú«|K«ŽHyÙS•4~‚¤b½çŒ±g.ßëÌ\îg<GÐ¯«ûR³sÕ:7úœÊv“æÍÙ1¨nëŠö#T:3f‚¼:¦Uhÿ]·tâúï§Mç¬wÒ(õø»è@jv®täX@gµÔ¼;ß_Wüßí¦6ßK]z,LÝÖ7T¤\Í÷^ºx&;û.z­†.tûy      @Té´äü•ýy[f9ÛRP ï‘ÊËÉWvÎŠ®gþÖVè½#lÒ—<G«¹ÌoV¿>žT´4p–òT-òã9…zoR®¼!N’¿f'ˆ[”fßcÑâÉ-×(Ü–«
aŽ&èöçÐ¡ÃZŸ“¯lg”…]‹39m39_Ù9…Z¥u ÚAuÇsÎgÿZ_)û;X“+m[Ù:»Úù¤R^Ë}?Z<¹å»ødNAëwáÌÂÎ[w¬õzáüƒ_Ú÷µ|JëI<¤<«0'_Ù¯MÐòyáœc3·»0Ä<n[ê{¦rÑkþÚüŸÝ÷C‡üÝ~&»ú.º_CÐg‘Óf¦zH]×      €èf544˜ÀŒ1jllÔ¥K—4¿æ÷z=u~¯^0ipb¯ž¯¿«Z›¯BæÞöHÛÏÎž>¡ÃÙÅ1­òUe/Udï-j      èN|rüªGp$Þ4²—ª±=RµI›R~¨¡C‡*>>^–e…µ®v@·1è;+ÏK/I’</½ÖÏˆ=ùþ</½¤Ôì\å?¥ÏF$ëŸï˜®¼uÇôËW4­ç»¼ð»ÊÎÉ×?ß1]‡œóÙ?W_~«gõõäç9›HF4øí¤~     L"€nzï?$ŸÏµ|¾ð~Ž©KÚÏ.hzôýù|ôäµèñŸèÎ/jµèñŸèÏ¾:ý·»±>àçkSï×Ÿ}uíÎ·èñû5ìýÖ×ÍŸcY,ÿ     @Ï1‚       ¢#8        Qç™gž‰t	AT ]µ6_ÙOìPÛªÝ¡e9ùZ_ÙÉ{*_UvÎ
ý©ÖíbÚëöçp?Ukó•½öpÐáº­+”ÝÁýV­ÍoŸ-÷~Nz"_Ë¶žë¢ û}Ù9¿œúík¿ªªvçn­;p]—×ª|5ø:9íï·íg>ç>Î×õwÑ~ÍÕéI
      ˆÏ<óŒ^yå•H—¤ÿÐµ;´ìjÞ°ÎqXë»DÆ˜ä±ßÁ¡ªµùÊ[w,Ä;è,ÜâÐ˜	ò†<[ô”íÜ¢’5¹Ò‘z3ÌÏ<oÍ•ì´­~`tçoN[ ’[´a^Àõ–L
ïB’:}*ßÒª#“µüÝ9_WûLöY
      èKþðùüùó‘.%È HàŠÊW•½´Xš·R«“~–$mT^ÎFI“µ|ósº/ù°Öç¬Ôéy¹Ò¶b•KÒ¼•vè˜œ®ïLÙ¨U¯6?§û’Û\§v‡–=¼QåS
T”&Ùj¡V±—/ÍWQàùd_«¨å“»¼•ªµù*T®ò¶Ûë¦¨È¿)aÐ}ùï§µ®ñórU´Í>î]¼A«Ç¿ÕÉçÐU%“uë˜ö÷¿éxŠ6K/<¼1øXå[Z5i¥Jû@ÙKO†8ßO–N½6Zs&kÕºB-Ó†.Âb§žÓ¼¥×¿’‚ƒùvÏC›µ¯ÙÏä}]>“vgwP°?Éùg·ŸÉÖ ž¡Fw]      úT´†ÏRì€vB5ïâ
­«¡ºZwgåÛ¤ùþîÚmo8Ý£ußK[´aÞ1­z¸MG©?è›·R%þ@ØyÉæyÐy»dªìðr¥Šæ­´_[“þ=m+–ÖlQÉÎ•Ê;²Q/l=g_iqË5ìFQH*:>AE;·¨hñd•¯{KU}Žž˜ªEÎûR—t'ÏÑê–{o#mAÇÃÉs´zç¥:ŸW`ÐœôÀs*Y“«òu…íÇNÙ¨¼œ|ç
;ø,ZÚzOWÓ©^µ¶P«ä|nÎwÜ"äóx¼Bïvwñ]ä­“–oÞ¢’´|Jà‰ºûLö°G»g¨«      Ð§Ú†ÏÑ6º_u@û»FóÖlÑ¢vÝŸó.þ¾R%'”>–ºd‹Š&­PÞÒ|è$ö.Þ ’®F:øÕVè½#RÞc=}0¥@?J“¤QºuŠTtü¼ê´KåÊÕ|ç>S³s¥m'uºVö}HÊ{Ì	!xN%tq´*Ù¹ ûµ¹!mJ6OÐ²‡W*ûxŠ^J·_÷w×îÐ²‡WjÙ¤
z*ŒÓõäyhï°ÞÛ&y§·vÿÐ£ƒç¡êv0¼:ŒÐ¼ª¤XšR ŒNÞÛ“g²;5øuöµ«!Üß      è¡Âçhë„îóè&_³kçöwÏ-
gc»ðùçç­qºuÓ¨dsªK7V…»ù^_ÕÒY'orº¾3E*?%¿‘ºzjwhÓ6)/û*æ.·Ñíg²/j      @Ÿ‰…ðYŠ@ }¹¹ÑÝ¤-èx„C·ù7Ò›¬å›ÛtÑ&ÏÑêÍòn[©ì'v¨®«S9ù>}N-³x»«ò-­:b‡ˆIã'H*Ö{Îø»köÞN»f;åŒcúÕ­Í÷zGÝÖíG¨´åt“{'êýÏ¡Cv÷¹?ô®úÃF{^¸_'ÏCÕì™Ì?
³;yÒdéÈIÕJ-ßy«ž=“Ý­¡sÔ       ×ÅJø,E €nð5©¾ñ²š|Í22î\Äéõ¶Ìr¶¥þ @^ÿáœAÇBòÏÌíh£µä9ZíÌe~³2øõùóf¯=,iªùƒñœB½7)7x†pgf{o°¿´*Z<¹å…Ûrµ¡£yÌmtûsèÐa­ÏÉ·»•å¿_guí-óÏk–=+¸ë þœÊvkÝì®-ÍNw´¿ówCÀgêsœÝeg¼Ó	^¸-àzkK­ûþÑ	wsœ!Û®
ù<Ø£;ZFY´ê»Hz`‰–O)VaN¾²—Jyóôè™ì~
êª      ¸ê—¿üePØÜöçhb544¥ÀÆ566êÒ¥Kš_ó{½ž:?Rµ       ¢À#U›´)å‡:t¨âããeYVXëú¼       00@       \A 
       p4       ÀÐ        WŠt   Ÿ¸ô<ûÈÚ].«òtÃõj~öç27%Gº2    @„@ €žij’UyHÖî2Y{Êä©8$55½Åc|j~ùÅ    ˆ4h  ŸOÖÇÇeí)“µ»\ž}û¥KßtºÄòÄõQq    €hD 
  :dÕœi	œ­ÒrYuÃ\hÉÌš¡ægþÁÝ    Q   ´ú¢NžÒr{¬Æî2Yg>íÍ)òeeÈdfÈÌš!sÃõîÕ	    ˆ	Ð  dõ_Ë³ï€¬Ý{í.ç?	íÈ‘òeyíÀ9ÓËfƒ    €v  @¬†Y‡ì±{Êe<$55‡·8q¨LÆ=v—sV†Ì¤[$Ër·`    @L#€  ?óùdùXž=ÎX}¤ËWÂZjâã¥{ÒäËtºœïL•±©      |Ð  ô'ÆH§jäÙS.Ïî½Ré>Yý2¼µ–%3uŠ3Vc¦Ì=iÒÁîÖ    è×  ˆuç/8Î{í±ŸŸ
{©™x³LæLù²¼ÒÌ{d†
s±P    À@C 
 @¬©¯—µw¿<»ËíYÎŸT‡¿vÌ(™¬5Ï²ç8kÌ(÷ê    xÐ  D»+Wd8(O©3Çù¿ª$Ÿ/¼µ×]'3k†=VcV†ÌÄ›Ù8    Ðg  ˆ6ÍÍ²ª>²;œKËdí«”®„·q –™‘&3+C¾Ù2Sn—âØ8    Ð  Dš1²ªOÉ*-“çƒ2Y{÷K_}ÞZGæ®T™¬™òezeî¾KÌÆ    €è@ 
 @Xµçdí.sÆjì•Î]{­¹u¢LV†|Y2Ó¥ÄD+     ç  èÖ—_J¥ûÐ¹LVõ©°×šÇÈdeÈdfÈ—é•Ft±R     z4  n¸|EÖþ
Y{ÊìYÎ‡HÆ„µÔ\?L&ÓÛ8ßœÂÆ    €˜D 
 @ohj–u¨Êœ÷”Kû+e56†·öš!2÷ÜmÕÈôÊL¹MòxÜ­    €>@ 
 @O#ëø	Y»ËdíÞ+OÙ©þRxkãâdÒî´»œ³fÊ¤M•IHp·^     "€  €0YŸÕÚóž2yöì“.tcãÀÛn•™íÌqž1]J¼ÖÅJ    ˆÐ  tÀºøY¥ûZÇjœª	{­{£ÝÝœå•o–W‘äb¥     D'h  ü¾¾,kÿ{ÓÀ=e²Ž|þÆIÃefye²ìÍMÊX—‹     ú@ ®¦&Y•‡dí)·ç8W’ššÂ[{íù¼3ZçÛ&±q      m@ ŸOÖ±ãÎÆåòìÛ/]ú&¼µƒÉ—~§6geÈ¤Ý)
âF    èÿå è×¬O?“µ{¯¬Ýå²JËeÕ]{­™r›½iàì™{¦K×q±R     úh @ÿòE<¥åvà¼§LÖ§Ÿ…½ÔŒgw7gfÈÌš!3ü     ÿ#€ Ä¶ú¯åÙwÀ›w—Ë:z,üµ#FÈçŸáœé•{£{u    0 @ bŠÕØ(«â8—É:xHjjoqâµòeÜ#“9ÓÞ<ðÖ‰’e¹[0     4  ºù|²>:&Ïn'pÞÿ¡ôÍå°–šøxiú4ùüÎwM•Å¹\0     ð#€ Dc¤S5òìqf8—î“õ—¿†·Ö²dRï°ÇjdÍ”™ž&]ÃÆ     D
4  ò.\Ç¿iàžrYŸÕ†¿ö–›å›å•oöLiæ=2×s¯N     Ð-Ð €¾W_/«ì@ëXOªÃ_;j¤Ìì™òÍòÊdeÈ$v¯N     pU  î»rEÖ‡ÿeÕØ½WÖ¡#Rs¸&ÊÌšaÕÈÌ™8    ˆÐ €V>Ÿäñ\ýyš›e9*Ïe²JËdí«”®\	k©IHf¤·v8§ÞÁÆ     Ä(h €$Éúè˜¬»ä[TÐýÅÆÈ:qZÖž½ö,çÒ}ÒW_…·Öã‘¹sŠLV†:OO“†î~
      ê@ äÙú'Åýã/Ô¼`~ø‹Îž—µ»Lq¥ög=öR3é™ÌùfgÈdL—®»®U    €hG 
 YS³â~õOò¼þ†$ÉŒ»©Ã·Z_~)íÝow8ïÙ+«úTØ—1É£íq™òefH£G^ué      ú@À eÕ]TÜ’§íq~)c[ÿýòYû+[ÇjT}dÏˆƒ6LÊœ!Ÿ3VCÆ³q      4 @Ö¡*Åþ\Öçgƒ\ü‹<ÿòäÙS.8(«¡!¼,3ãn»Ã9Ë+sÇmR    0Ð@À ãù÷mòü¯çB†ËƒþþÂ;I\œÌ´©2™^{¤ÆÝwÉ$$ôr¥      Ö@À a56Êúß¿VÜ›[z´ÞLž$“å•Éœ)_Æt)qh/W     úh .\PÜOÉÚ_ö3öF™L¯LÖLù2gH#F¸X      è  Ÿ³><¨A‹–Iç/„õþæ%ËÌû®LÊX6     WÅé  îñüñß5è¡a‡Ï’äÙ÷¡Ì¸›Ÿ    ÀU£ ú13ç;jš4QÖñjYÕ'e}rRª>!ëÌç®±Þ/•ç•Mò=þhV
     ú#h èÇÌð¤é23Òƒ|}YÖÉS²ŽŸuü„T}RÖ''d<-55)nÝËÒŒ»åóÞ™Â    @¿@ 
 ÑµCdRo—I½=øõ¦f©æSY'NÉúìsÉ¤3Š     ô4  Õ 8é–›en¹Y&Òµ     €˜Ç&„        W@       \A 
       pEÔÏ€6†)¤       6Ë²"]BDm mŒÑþ“z·òŠ>»ht¹1Ò  ` 2ÆhÖ__t    4|ÔMŸåÕø‰·Ä\•#8Œ1:pòŠ6_Võ9Âg   D†1FÆ×é2   0€544èì™ÏõnÑÿÕ©ãÕ171"*; }>ŸÞù°ÁþÁ)ÆR}   ô#ÿÿ§Ë–D°   D¿¨Sùû{T}ô˜>,Ý§”[&(...Òe…-ê: 1òù|:óç²g       ÔðIš1{–$é¯/ÊçóÅTtÔÐ’B7´üMGh       WÒÈ’¤Ëß\Ž©ðYŠÒ        û        ® €       ¸‚        à
h       €+Eº  ˆžü»å&upðÊe½òòy½Ý§u 7YÛ“tÿ¿ÖEº   D‹Û¡Ç6T¼r¯žç'º­ÍñôÂ_éÙûGF¢D @”¡ Zn²¶§ÆGº
   D‰×?Ò&|–¤]zzî/Tr6"% b Ð A5U5ZXêH¢^øépM,ÕzQÿ½¨^æÕÂq©îRKGrp'u£Š×ÕêÅçÜY>Jÿöí!JxÍþšª-T@øœ4TÛ'8çNÒ+‹‡*Å‰€Z   Ðü­ž~W
îx¾ ’Ÿý\ëVký–”½èŽKƒû™OÊ  IDAT»¦'jÑožUöÿÑô›¹«ôNÀûç>ÿºxì^ÍýÞ.½ó®¤ï-WQ× D':  *Õë©ÒËª—”8.QO¦ÒCã<’U2|–¤xåþt””Ô.|–¤ÁC´°åxO´	Ÿ%)i¨þ-/±Çg  @løøÿí’$Í}¾uÜ†4RÙË¬ôÛ¬×Â
Ÿ%©Zëý­>–dØÁá³$½ó´ÿ¸Ÿ>Kšû7„Ï kè€€JIMÑöÔà×üÏª8¯7&ÕÂqñÊý¶Ý\SåïpNÒI
êj¶;˜‡èþ\ém%ÚásËq  Ìtu=_º¸V÷û» ý]Î¹ÉÚXŸÿœãõ¤ê:¯  Ð¿\Ð™jIºWßšÖæÐ˜l=ûëŽ×Uì¬VP×ôÁß*ïé]úãö¹zöþ‘ÊþõëÊx¿ÝQ}ZgÎJ·i=SkW4  Ö@@{»èÝïï:®»Ô:®#=NÃ%»«yqŠ¬>,Q*N’Tþ'l®×S/×·¾)½ûµ<8Ì>gâ¸áÚ¾xxÀ‘8I—TÑýs   –´†;wA'ŽJöœè]AG*ª/HjÝ¤ðãõ8#>B	| b4 DPÇ3 þ Y’’ô¤Ôe§qâµ	Ò×Ý¯eâµ=ÊäÑðQ=\
  €0Rc'J:Z­g0¿YÒÙýâÑÓúïŽæCõçº¨‘ªøÙÏµþèD-úÍë*Zäï€îÝê ‘E 
 Q+Q/Ì¢Ö	ËñÊÌKÔ‹EõRE³.~[A›ÉMÖByìùÑÎxÿÌèšª-<ï¼opœ&JjéÑ‰·¿lÖByFp   ` ¸íoî•ÞÝ¥wžþ­¾¸	áªß©BRÅÏÆëµ_g·Y5R·Ü.éhàÆ…Î–èý£’nÿ–ÒÇØç;Aø ý4 DP¨ÐR£Š×ÕêÅÜÀ9ÎÍö(Žq×ë…ôz=UQ§ê†*%©íŸþç=U\¯ƒ“†kÚàxå.NQ®ÿð•ËÚ^,IN€­6ÇCIªí‹¯ÑÁÿüF5ŠWJÛ…à   è?¦ÍÕ¢ÛwiýÑöã4¤‰Z´<[Ã%]z}¤Òs&J!ÖÌ}þu=êï¤>ú;=6÷w®• ˆ¬žþ}k €«’ôJj¼$Ÿ–ž×ÛªÓöO}’<š6k””ôâ¿Ö¨¸.xUMÕ=U!Ù3Ÿ/êà•À£*n	Šë´°ª±õÐ•Ë*þÔ|²âú6ëë´pÝ%Õ½)ðœ   è¿ì
_+œØæõ{õü;Ïå0üþgÛ­I/ü•½¡à˜l-
<ö½å*zþ^IÕzÿ…Þ, AVCCƒ	|Á£ÆÆF]ºtIók~¯×Sç÷iAþë/Üt¹O¯   ´eŒ‘inTfýfIÒO—-‰pE   ¨^^½V’ôè’¿W||¼,ËêÓë?RµI›R~¨¡C‡vëút@       \A 
       p4       ÀÐ        W@       \µô5ñþ3‘,       "ªîÂ’¤!×‰p%Ýµô˜aNðl$YVDk      €H¸øEö}P*Iº~øðWÓ}ƒ"]@(–e)7UÚøgÙá³¡   ‘÷òêµ‘.   Ø]3ÒeÅX³nÔÐ–eÉãñ(ýæxýO_ƒŠ«¤³_YºÒ[,       \­„ÁƒuÃˆáºóî4Ý4>E'¦Bè¨ %Éãñ(!!AÓo‘¦k”ÏgdŒO†Nh   ô9KÒ#]    Ë²œ†]Kƒâã• 'j§*‡•´eYŠ‹‹ÓàÁƒOð      `ÀòOˆµîg)Jh©5„ŽµD       z[¬Ï~Q@ûÅê       íÅ        W@       \A 
       p4       ÀÐ        W@       \A 
       p4       ÀÐ        W@       \A 
       p4       ÀÐ        W@       \A 
       p4       ÀÐ        W@       \A 
       p4       ÀÐ        W@       \A 
       p4       ÀÐ        Wêê
Æ˜¾¨       ÐÏt@ŸO#†\×Wµ        ¢ñùz´îÿc£ â½”ï    IEND®B`‚‰PNG

   
IHDR  Ž  ÷   ðË÷    IDATxœìÝoh\÷½ïûOímÙÚÅmÅ–ƒ¤XE¬&Q$#íñtáHB°ãLuÁàÄ!Ç d›‹¸ÄÅ'L¶÷@Cœ†kzÔ‰[–Œ±¬-ûœ#a+nZùfÄ–#©±lO5Q”ñ¤»p ÷Áo­™µæŸF²þØÖû!Ö¬¿õ[kéÁg¾ú®ïÝ½{÷»D"¡—ÿüÚù²°óê~SÇu@ïhËF       VèàõôýÄÃ¡Dc§Øèa       À*ø/=        Àý…à       àBp       p!8       ¸       \Ž       .Ç        ‚c       €Á1       À…à       àBp       p!8       ¸       \Ž       .Ç        ‚c       €Á1       À…à       àBp       p!8       ¸|=²0Ø«WOÜp|²[G^Rõ=íõs½ßö¶|ôÞ±€¶ÜÛ™ó(-k.?ûµz¿lSOkIÞÕ&Ô‘­ý~ökí;rQmGOé•§W:r       ’5¯8ž<~0KØyQGÚz5tg­þ0Ú¡ÃïŸÒ™S:3ðŽû.êHÛ¯5¹Ôfw†Ô{äbAG¨>|Jgî9Ø      ð ZÛŠãÏ~­#KîªØy
u¿©ã‘:þ\ÃOšuï©÷•uÍÞöù·tÆ^f1•°æßmGßÊ<^Ú>j_gÉêÚ[‰oÐ¥W>Tß ]IlUb[k˜JáÏõ¾=/'ÞÔ¾fnóé¼F®ŠãôC¦Í1•È      ÀÃgM+Ž'ÿÝT¸¶u&ì¬õÐ{¹BcIúømíëÒ‚õãÂ`¯#ä”Ž¤ÂÑ\û¸vâM½ÿÙêÏ}é±mÚ.éÚy™PÞjß1pJï½¾CGz5tçI½òþÕÊ„ég?iBýf½3ïP­.êÈñÏ—8Ø¼†ÞþP×¬ý}^8R@µ3      €ÊÇóºyC’vë¹ôŠÔÇêqô%ž›À·öõw-$E>Ôï?“¤Ïõ{«ÝEÛQ«MÃÑÝ®].\½¤kÎåo©MÒÀ©ðù¡wçº‘j÷<¥-’¶Ô?§ZÝÐÙZ‚<ý’Îè/Çj_zh¿”È‡zµ{Hÿ@K      à¡´æ=Ž¥YÝÌÛËøs]²ÚYt&ÛJ”(ð²	†o~9/Ý¹¥›’ä; ¶Cè§ÕæØË_n˜`yàÈAík;¨}v»†È¬þ²jçrŸ»3«k2•ÖûÚRðÍ/ç3V]ìÕ¾¶ƒ:¢·’!ûÒR×E‘õjÛAWU8      €‡Ãö8.Ñö’"¦â5ð˜cÑ!õ¾2«Î—T­=á“Y«q˜àºú±¥×| Y¡zíŽé±rÕJR¶ÞÎ®ð~^×Îß’íB–jQáðôK:3ð’’½”#êøàSy/i      `sYÓŠãê4Õ©î>¸VŸ\]Ô‘î!-Ø³.ªop>µÎ¦?òöÇK’}|S­+¤…Á°«Çñ?ìØ!ÉÙªÂþ¯ÇZ?dL›«Zû±§ôœOºvþZ]UÜ«¡ŒŠo;Ô7ÕØés™Ûçz¿í öÿ\Ò“zÅj²ýqBc      àa²†Ç’žnÓaßE\Ô‘¶‹iwèð[¦Ïñ–àÕ~ü¡i±pÂ±J²5Å“úç×whàÄ

9˜5ä´ûùf,þ-ó2¸‡Æ
å Ž'Þ­£É>Ã%
{K_´½­WÛ>”d‚tœ›Pùø‰7µïü½÷–™ss]v¨Ö']»qKÊ7Wæ%{7_y[ûì>ÿ–^Iïa
      àö½»wï~—H$ôòŸ£S;_^“ƒ,öêUëåv†3ì´ÜR¯ó%mYßÉãuÄ
,k_? í'>Ô€ï€Þ³_´—¾ç2       À’^ÿ`}‚c       ÀƒáàõÖ¶Ç1       àÁCp       p!8       ¸       \Ž       .Ç        ‚c       €Á1       À…à       àBp       p!8       ¸       \Ž       .Ç        —ï¯åÎ§þcz-w       ›^ÕO*W}Ÿk¯Å€       k‹V        ‚c       €Á1       À…à       àBp       p!8       ¸       \Ž       .Ç        ‚c       €Á1       À…à       àòýµ>ÀÂ`¯^=qÃúi‡¿ß£Àc¹–ïÖÑ—T\:¯¡î7u<býøü[:søÉµ2       ljkZqlBár8¥3§tæh¹Ž¿òkMÚ+|ök×ò÷^ŸÕ‘î!-X‹'¿©ã;Þ2Û¼£Ã7ÞVïàüZ       6½5Žçuíü
Õ¾Þ–ª ~ºM‡}ué3³|èƒ‹®å[Zƒj‹\Òµ;’î©ïã:´+ŒKxy·®ÿc2X       ¬¾5ŽK8vJ=­%ŽÏæõEÄýïí—¸¶yÂwC—®ÎKwfuMåÚîhk¡ÇÊUkË       €5±®/Ç[kÀw@ÿü´ýÉ=á†U¢í;?úÊõÎÅmÓö5#       lvkþr<›éw,~? -ëuP       À²­KÅq*4îQÀUa|C_¸ÚNÌëæ
Ç‘YýÅ¹øÎ-Ý\Ãq       Ö!8ž<~P¯ž(×ÑôÐ¸DOø¤›_Î;>›×‘z®¾Äô3Ö¬n:ƒå;³ºæ{Nµ®ý        VÓšÇƒ½:òñnxIÕKKxy·®Ðdrý°ì`ø±€:Ÿ¿¡ãáÏ­¥óúà¢j÷<E«       XCkØãøsýþÄ
I7t¤í¢kIíëï¨§µDzú%½÷z¯^m;h-Ù­£©ÈÕ‡ßÑáî7µ¯Íúàù·t¦µdí†|Ÿ3-?nd|žœÏ‡Î¼†ºßÔqÐ{Çî­7vîv)       Ò­apü¤^8¥W–XkKkÎ´æZZ¢À±S
¬òÈl;\á§	DÿMCõ¢       VÇÇX[/—tQ_Ü‘®÷ÛÞÖ€µ¼íè)½ò´ù÷äñƒ:ò±µÀ—ªâ5ŸïVÛó5ðqævº3¤ÞW>ÔµŒ}¦*‚ïøPÇ?–LÕ¸ÝšÄ=wetîqfšÕï»j "eÎí*lw[”ÔùîPÛó©½eT[ç§‡¶r      Xž59ÖÖÂ—³’vè‰Ç$ä¾­ß½7pJï½¾CGz5tGÒg¿Ö‘M@{æýª|¨ãƒÎ^”þñ”Î¼£Ã>iàÈ¯MïiG¨z&}Ÿ¶È%)híWÕgíwòøÛÐnµ¶»vâß¬íòŒ3›È¬žxë”Î¼¥6ÝÐñ·‡´ g lû¢Žt›eöùÖ¾þŽÎüW=q#ÕâcKýsªÕ
]ºjÆ¹põ’®Éz)#       ‚ãÏ
å öµ™ÿÜ•³Ô¥ˆ’/´Ò/ìÀ‘ƒzÿN@=§Òªkwë¹§%û¥…ÒE]ú,3TÝÒ4ámò¥…’T®íIzl›¶KºvÃHiûµþÒÚ£3…ÓÅ~a¢žÔ?¿¾CŠ\Òµ;óºvþ†c™5îÈ‡úýgÒä¿_”´[­%’JT»gGj=¥ç|ÒµóÔ‚Ò÷      €àø³ÃTØ¾@µ’’¡­$Ý™Õ5I×N¼i‚e«½ÄÍ/ç¥§ÛtØgV8bBç÷?[úh¹qÃ}Œl|åú‡,Wí1^Ô‘¶ƒÚ×fW1çgÁæõEDÒŽm+xiž$Gfõ—´       =Ž\tøõKzõÄE9Þ¨3‡Ÿ”+7AmŽ^½ö‹í¾ÀG~­ç^Ê{˜Ø±CÒ¬nÞ‘ª—[‘ûX@=%{!G¬±ó³0%zÂ'éÆ--èÉ¡oîq›*çu)¼[×´C‡iS      $Qqü 3m#$}6ý]-L@¼¯Íôvþ{Kë5ÕÇ®Ja»7ñ¼†>0mž{:K?àÁ°´C‡ƒO.1ºy
uÔ¾î!-¨D·LõqíŽ’¼ãÌÊj?!}®ßŸ°ÛJØUÃ—tÍî›üÁEÉw@ÿü´Tý»¥ä¸­vNÖ>¾H›
       
Ç´'õÊÑÝ8rQÇßRí±€ÇÞÒmoëÕ¶%™—á“ÔÚ££7êÈ+u\’iyÐI‘$íÖsú7ík»a-{IÕ’©~_ê}åMí;aogõ*Î«$c,òÐ{V…qÎqfãÛ-}pPû"fœG™q«µGï©W¯Úçä; ÷ìeO¿¤÷^ŸÕ«'ÞÔ¾;Ôöü)âŸ	žoÐ¦      Hó½»wï~—H$ôòŸ£S;_Þèñ`L?¨#ïÖÑ+,Þ$LË„      ›ÃÁëPqŒMèÎz­òÕ¾þ¡1      †Šc       @ÒÁëðr<       €Á1       À…à       àBp       p!8       ¸|£€å½ü?þ£Ùéi%î&6z8       îÁ…îyýÁw«07‚ãÈÿø÷Kúþ¯ÿ{£‡      à!G«ŠÈG§ÿûF      À&@pü ùóÌìF      À&@pü ù6AOc       kà       àBp       p!8      €ûTÿ†—àŸúºº4º¿Y=”Mk     p/ìÐx#Âãï¯û±¾|
”I’¦‡BêŒÜÓÎÔ×P¥õÓ½ïïAåÕÉýAÕÇ‡Ôñi4 
õ«7¹Üš§ø„ŽQ_{ìlÞ¯îõÓ\j¾<ºþDÚTõlX{FbkpN÷Ê1'ýëySäºæx'ìùJ­wla—c®mq]
ŸÖ!5ë|°FÎ¥ñ‰¥çÜ}ý¬}Å$yÍþbC!ýÉ×¥vÝûüôtt©ÝSø½µÚûíéèR{™õÃÜz_oË*?ÉsÿDz-X®IûúÙ÷GÒ2žg     VCzXÜßß¯ŽŽŽu;>Ç™Îæýî
ÏH¿C!›ˆ«2Ð¥>ß½ì=¢ÎPHCs÷>Ð5cqMž˜nÅs,ò6ë¼#\/ˆ¯CÝ5ÒÕpH¡°®ÆËÔÞa]¨ùå:Ôýoƒ¯E}#§“Ï„	éCjÙA¡1=RcÈü·d éº~!ó¨~¯õÆ¢ºcþ{ÑÛRchHÓ9ˆU~.&rí-¦C§­óõÔ¨Ûù»Õ×¡Ñ®õ¬â8     °åª0^ÏÊc*Ž"v%àôPfP×7rE/ÔTéóI‘ˆµ®]iWÕÍéìÔ¾Ë£¸Ç#æ4=W¦Ê²•WgT1:*0;#rUD;+mÍvsšV™*=îeîmRcsU}¦Wº¶qT„ú:4Pò<]Ë–_˜—äNâ{šÌ¹
ûºÔž^ÔškŽ|eR|BÃ1I*‘×#ÉãS"Vs\·bÒ¶Âvgö™­*ÔÛ¬óÁrÅæ¤Ê238÷uuW”§*ms}ž^i+Ùi^Îk±Ä\ã¶vXÈõÈv-Ö—GÞ)™Ç£Žg0®Ø²†ç¨r•Róçº‡kÔÝU£îœ•ÒiÏ’æ4]Vf®¡óz¤=KY¯ŸTpeq®Êù¼cð:Ç^øó—õ¹Èû<§Íkú9Å£êS©^Ëz¬ˆ~7±KÝ5åò{¥¾˜¤HDÓ€Ú»:$×_     pïÖ³²8‚ã‡„;Î½ž	Ø¤Þþ°¶íšÊÈ+[LhêW¯¯Cíi2<$o0 ïBXg”¿Ô+E–_;Ù™S{ ¶tî,—'>¡_Ed£€GWÃ!ŠYç°¿Y“§GÌÆž2i(¤Æˆ	.ýÍ^õŽ”¨/P–µ}@ßÈiõXás·YçeÉ€²§£KíÁõ$Ãž2UjH¡y³m“OêŸw‡Lfö’óÛÛ²¶íW£#{êí™ë±Œp›GVhåS_×.Å&æTYãÑ6¯¤Øˆö„¬UO‡rïÆ¡³y¿	ëC#Ö>:ß<¯=×%É£JkYuG—Úw5«3’Z¯2# ôêä~Çç¾‚ê‹†Ô©T¥mòËk«œ×ByÆàëpÜÃf<r~±áÜÇÒ×bÝDúuÖ×¥ö@—F’	LíDÔiÿ;9Îü:›÷¦žÇ´ã4Frµ”ÑžõÜXi{‡O½öµ,³ž¥yÒ¾àQß|–çÂšcsýìÝ5ë|0 >_$ÿ—G¾ÌûÁõ<gCÄ§>ë‹¤=ö—?Ö³©Œ/_2ä}.²=ÏõtU/ë¹°Îé|ó¼öŒÄÌùšINí7+V[DÖ1Ú»ök[Á7     ‚ãž£Z8kÕ[ZÎdØÓ¡ÓCêë
¨;`™Ô¶&ñJŠEcÒÉ³ÅYN¹‘Ëºº+¨ê^iDò—{Ÿ½®>Y!²<ªvi4uè”ø„~‘\á›¤X\ª¬	j´¦°êDsœ9
[»èÌ©½Ì
f­ƒ^½‘9ãäQt¨À vu”êäþi(¤CêÐhÍJ÷ã•¿Ü#yìŠTÃ9­ÓWLàèú{ŸO•Éypîn§ª=ÒôëóHDÓ2yK½êÙâ¬”^ž¬c°Fz+cë}-¤Êdì+½îªÞ¸£ò6W¨]f}É±²±/WwM™Ú»ºÔ¾ŒÂÕÚÙž%Ç-žþ\¸¹«Ì¥¥Ÿ~wå|LÃ³qÕ×lQuž1˜ûN’c¾í÷´gÊö<ûôÓ2)>a~÷(v]“ñÕò{ÍÕ'þtÚ˜Ì½i¾ŒêRß¦íû    x?ðÁEÖª·<¡›·Ô­¬Õø†gãª/ß©N¯Tí‰kòºs€ÙïÜ}C­ó±B¼ú`—F×ä]ù«\WÕ£·¬FÞdË
²¨ËmNÖþbß›äŸþw©]2_tD¤õ»)Y[³ÄœU½)éÂ=]j¯iRÏÈ
Û8+‹ËíÚµä¹v6ïÏl=³’cKJV™Ûí$¬gmíd¿–™mK6è…œ‘|•ìö½¹¶÷#     àø!ÑÛ2ÚQõ–§ÁÞi"¬Æh“Fûurþ´­ÁØúF®è…®]z¡IòÌ]I†+veåŠª3c#Úºn…6¥êT$çØìãüÔ')’VY’ó kRåšêCºFvtl^JVÏ]Yaµ¥DïÒIo¤ð Ë
mí?ëOí.ª˜j’½±“•É×cšÜ—Ê¬ŠR_“UÕ¾¢AK’:›w¥ÂÊ´sZþµ˜7•éå;Õ©õ¥WN¯:»µˆõc|A“÷¸ÇÞþz­jWoAÿÖ—
^ó\Ø•÷Íò—¥mcõiîi2UÖK~r!.•ÙmiÜ÷qÎ/‚æWYæ}§{©8Îz ß¦o³²ÃvUv®¿ö     àÁFpüéíi²y¿º“}ksq´·‰I2í$êƒûur,OÚ”ö§úæÏù	M"úÓ\À
LAM¤_ÇJ÷«»&˜jÍ°dõpúŸÐÇu5lµ=pU(šV
¯M„µgÄ:Ž«m¾ùY9÷ËÁœcÈ»Ùó`·ìˆOèØ=TP'ûW;Z€L…Ô9Ÿo«ˆ:Ã¥:h´Ëô0­2?Ÿ2=©5ò‰üåA«BxNÓsJ^—œ×âzî˜/®…¾”-SL‡>™Ðù`ªeG|"¼&Õª}Ö<¤æ;uO®D¶Ó9ÇÝ{yBþ`ÚËñ¬—_¶wu©=>¡«seKWÛ½™ƒ]U\Ósqy<’Ó¡+s
˜kŸ˜Ðt™ý€¦U—™u¦‡Bê9­ê-öþTØ}Ñž¡-ÉcÉÞ.ãËƒ{åhÍ³Z÷ƒÏGh    x¨}ïîÝ»ß%	½üçßèÔÎ—7z<È£­ùŸ6zÀšIé›	Pãs     à¡váÂIÒ§Ÿ~ºìmŸ}öYIÒ_ðÝªŽéàõ¨8pèÌ©=à~©_æËÈ      °ŽÜò¾„      ëé¿lô         ÷‚c       €Á1       À…ÇÈÁ§¾®€¼aí‰I’:›÷«»Æ“Z%>¡c§GÔ'Iòêäþ êíÅsCjì·Ö¦-ÓœÎ†ú¥Ž.µ—¥wNÕÔHWÃ§u(æØ>>¤ÆË¥:¬Qjñäzãs,ÛpÞæœãîéèR»'5—æ<â:Šè§]U:÷“œWÇœô»÷d™×é¡:#R®k‘÷t¾<ºþDÚTõlêžXÎ¹Ç’cH«gBÇNGõBW@r­cîA
…ô'Ÿûœ¦]ëpNaDÕésgÏwÆõ3âa
o	fßf)¾RÆ'ÂÚ3R’ñÜ¥Ýu}]Ï`Þƒ©¯+ Ê‚×7Ì±ò<GÉ{#}¹ûþÌõlï4ŸÇíóõ6ë|°\“áÓ:sì#âÓh@Kß«     `Õ#-¬Yje;”3¡N÷~I§GTÝT½&t,4¢>o³ÎêóEÔ±Â{™sWý!õ*38•¼:YT}“OêH¾&Õ{âºúIDR©¤TpØÓÑ¥ö`‡zBýštïþ”mÜKšs†o»tÒÉ{zûCêÍü'Ã¼l×"ŸùÅ3"ÓÂõ4ÕÈŸÐ¯Ò³To³üeÒôÐˆúä•?.y3¶Ž+6/õFBÉkÚÓÑ¥ö@‡z"©ûp©s*lRäcÍŽvHý#ÚÉ@÷täÚ&OxìmÖù@YZ nÄâReùNuÊú"ag¹<šÓp24vÜãÞfõ5{Õ—/ÈÏzç—ÆçXgW™47”y?ºžY[æ³ÙiýßSÓ¤ž‘ôç6¦[ñe
     ¬"ZUlv¾kä™»²ÌÊÜ˜]™“<åòï°Â·+Vp»®É¸TéóY’cÙrö]¶K'½v8•}|½‘9ImËLÖÙ¼_£]]ÖûuÒ+3/ö¿%™ ­K£¾,Û˜ÿú|…såãŽëÖJ+¨Wt-îñ¸Þ´{ÃÁsçÈ½¥^3÷û›“¡böá,˜/

9§eŽ!%¢ßMÄ¥2Ÿ	”Rà6%[r¹1
ÏÆÍså•$¯üåi.¢ÞdÈíXc#ê\¢ú»§ÉÝgç
>	3¯ñ!5åÙÈ‡/g¤ñyŸÙñ¸â*“¿9ûÃ_˜/xØ     `õPq¼™Y*ŸÈÖz`^±¬ …°*=¥úo¥ÙU£Ë¹¬«»‚ªÞ»WžŒÊÅ”_™ŸÐprøejïêR»¤‚ª½Íz­Æ“Yù‹h:PõN¯4“¼;UmÃµ©Ì¬ž
gTŽæãwõR+—4Ú$Å'>Yq5uçJ¯ElD{BÖ¿O‡ò®šqÌåÙ+}åÓO•¾ö=S-©ÇçQ\Rµ¢®õû’m;âº¶ªq8§ÂÇ°Ž¬û»>Ð¥Ñ€\Ï`ßõY½VS#o‰¤X‰¼iúJD*ñÉ£¸&—yýzûÍ5ëYÆŠô«1"É—{£_Žjcç³â’ùlš¿˜Õä\êËwªózæØÍýn     ¬‚ãMÊî9šíOåbÑjl*/ëk<YÃ©J+p3”"Êþy­*bQÅTcíÏ¹mD¿›Ø¥n«e€v–ËŸ5µWZQ ›cÜKV³Ú=s}
ÕÍÍÖ“»wmz/\Ÿ^¨ñd
f;›w™~»çQ¢mšÕd¼ÜªÆ¶+#êERÇî×Éði
/9Â•Œa=Ätèt(ÕF¢&¨Ñr«ÝEìº&ã5ª÷ù$ùT©¸®ÎK*qlîèœý‹Ÿ5æm–¿,®«áÌÉëiª‘'[ œ§UÅðå	UkôÂÎ‰50     X.ZUlR}#§Õ84§Ê@—Îgýqlå(íjÏ[‹9VˆGõ¯Ñ¸$©ž\î¯Ï*.i:’9ˆé¡C!5Þs?ãˆ:C!ëOòME¤=}×g÷”Ëï5íâ³×­8<ªvi´+¨zÏœ†îîiÜ‘ˆ¦eµsX¾{¸9÷9rÚ:ŸCîÙÍ»T©9ý)K¥ï5ŽùtÚâSµ¢:‰«ºÉ—µâÝÜæ<–:§Á¡z‹'Õ£@ËÚ&6¢=!«„g‹U}nµ«(ó©ÏW&Ù_XX½¦½%2Á¡!M/c\«É´ø˜uTú[ìvYžÙ¼b#ž“*ËËWmŒ     àÞof‘~5Í™jÇŽ´?I÷6ë|W®PY²ƒ7ÍEÔk÷4Þeõ¥u†GVØ™\v¿rqž-V
ÑðœGÕMMªv†Ã¾&Õ{æt6´:áõäBŽž¶é+ú|ªÔ=T¯ëµ°‚Ù‰Ëça‡¹éaûäB\ž²2ia^š_ÊÊ²öîiª‘Ç®øÎ{NËƒ‹u/.ßó6òj›G®°Ùâeªtî+ý9[%=ËìÑ½âžÑùõFæ$ô
‰j    IDATç^Ã     V­*6»H¿ç›u>¸K'½‘^fåèSj·PtèôúºêîªQ·ÌŸÏ›jåˆ:Cr-[v;‰eqöQMo…Ý* ùÁœÎö§R¯ÞÈœÚ¦—kr¼VÚÔq$Å­6+qßÈ'ò—M³½¯þˆ$+Ésõ8Në¥ìXf¡º£KíeÖòš Fkdµ$YÇkáó©Rs:›ÌZÕÛyz5Ç¢±dµÍÉýAÕ'/’óºæ9§•ŽÁSãºj±Üm­&”³ãþ‰D4(S¥âš¼nï+¦C§Ã:¹?è8W)¾ÄÐÜíDÌ8_[jŒiÏE}°K£Öý¥÷ŒÎ|6]­Fì¾Ï$Ç     Ü¾w÷îÝï‰„^þóotjçË=äÑÖüO=Èââ©ÀÕ×¡Ñ€gézÓH½00#œôuh4 5üâà~ÃÃÈ¼¤PYz£w6ïWwùìŠ¿@    `³ºpá‚$éÓO?]ö¶Ï>û¬$é¯?ønUÇtðúÇ‚ãûDF•ò½       ¼û58¦U°\±í	lô(      €5ÃËñ        .Ç        ‚c kÄ§¾®.îoVçF      ËBã‡\OG—Ú=:ö‰ôZ°\“áÓ:“äëÐhÀ£«öÏ¹¶;=¢>×Ÿúºò®úËà¼:¹?¨úøû#îEKŒuý™9¨Lþ<§³¡~õnØx2ç®³y¿ºkì×÷­Ñø6êº¤×}®ÒôPHÊ›Y/nÍ…ûf¹a–{Ò~1â\–û4÷€Í±âÙž'Ãù¼Uwt©½Ì±Ð>V–—2ÚcÞÌ¾M:k±¡:þ2õtt©½,žå¾XzrÊ2îÜ¿£’¹¯Ÿcòu©]Ë¹†     l>Ç¹É…¸2’¦û‘¯Iõž¸®~’äxurW™47tŸ„Æ’QgÈ§	ÃÚ;|êÝ¨*mîL@*]
‡¬9ó©¯Ã'­ûøœó´ZÒî_GÚ¹Ú«-(®2UïôJ#1I^ùË=ÒÜ•Th<çÚ;tÒÛïÞGú=éëÐhÀ™Î2Üìaoú:þ2izÈ =’”WÍXG;¤Æ~ë¥ŒYCÔ\Û¸ç¿§©Fžø„~µ&·‚Ôf;ÙBæa­Å¢Š©&ë¢ž‚d     Òoñ¨úTª×²,ò6í×h™G’U!XâÇjÔÝU£nkÙ­&G%dMP£5J†UÕ]j×œ¦ËÊLgZUaî*D)o8ì
ïL0U=ë¬µ>û&*Ïöÿí®¬õuh4ð}Åâ¥ú?²m3›»jº³y¿ºËg]çí³ä/ÌgÝû\œsë˜;œ›Se™Yž¬€Í¸¹ªIÓçÎ§j<ŠO„sQg¿YÖ×wnN*+3ûÌYÍjW)[sÏ²=‚ô{(½
8£Â4-`œËU)å~IÉKsD‘±ëšŒ×¨¾|§:5¢>ïNU{¤é+u6ïW¥ætÖq}#ýi×4}^½:¹Ë£«á°´7¨úìGÍÐÓdÞa_—Ús5˜Ñï&v©»Æ§E
¬Ï±MZ@-)#Ÿ
©s~‰êÞ\÷dÄgª{¯ø4pŸl!ó)3ˆŽeŒÙý;*[ºâÎ}Æ›—äs©72§ö@ö°    €ÍŠÇ¹¾‘Ó&‰hO(=´õ¨RWÔ
ëjÜ£ú&ŸéWc(¤³s2_(¤Fk»ÞþCCš–	6C!5:Á²2iÈZÇS£×š½…
Ò»SÕž¸®^Îlz|eÒÜ•%«cßüïìâq}›k›è
J˜ãQs¾¾vuiÔúÓû_-Õ¶ÃÛ¬ó2M…¬ùõ¨>ØaªK-•ž…tl".OM“zäÕÉ½V[ësÅ'tÌl¥Ï·TÞ%ÎÍS&
‡Bjš“Êvé¤WÖýaÆfî‡2µwøÛx4©1<¡xY@}ÉEYî!Y÷](¬«ñô£[a ì{+äjñZ'9G÷kæýÐ7rEÓò¨>Ø¥Ñ®.Ç¸bžKž-ª–¤’-òhNŠHÕ[<R|A“¹¯V–{2¦C§—ß’£·©–>ý´Lš¾²ÌÖ
+Ð¹³\žø„~—O}²Ô³²Æ»®É¸Téó%×K1Ï=éÏº.=™z:÷Ix"•ÿæùå¬@Ï¼ÿ"êtþ.sŽ5ÒŸ¼·éÉ
    €Ap¼©ekW¾;;”šW,.y¶”$™Ð9G?å¦y²…ÃÞfùËÜáÝ-{¿¾vu¨G%òzâŠýyAqy´ÍëÕÉý]:ßì5Õ¨ñYý!×6yŠ„û¢vèh^ðÖç3c²²Ø
¯Ca]Uº—›:w–'ƒKÉT8JmsdëvxhB×Tåt¾jæœsgÍßù.¨Ž:BàøÄe³ïH¿ëšôtXëvei7`#UL’·Ôø2ï¡dåo– ÔÚwe ËºN™çã¾$Z!¸½­u®}×gW™~ê³ç,aqêœ÷› Ýþ<ß¼®¢Îæ]ªt…¹kÅT¢»çÝzNk‚içÓ¡+sR™Ï\ŸO•Ž{W*°ÂþÇûÓ2)>{}Yº¹Î³^Éu‹hõ¥Ww¶û    €M†àËþóùH–jã¦yÒB ÉSBØãóhzÎ£Ÿú$)®[7Lè¨’ªŽÏ)V¾SÕ2WÎmò…Kó¦ÂÑç“wnN^«ú2³’7­²uU™}›`¯KÝéÁ_¶¹s»±íÉZõ›©³y¿ÕJ$[¥æzq†Àejï2_ Ø²Ý©MûSãö”š?Y9Ûá
!Mßos½zûS¡sRž{ruYmE–Gª^b›Îæ]á¯©¢¶«y­ªmû†HDÓÎÐ}Îny±Ä=ù ó6ë¼ýò¾
}Ù%     ÷‚c¬>_“ê=îàÍTvº«:¥T×ŒŠK;¼K¥L%ð.ù=³ú]$®Ê]»ä/hRóŠÅ=ªÞU®Xä²b*—¿Ü£X4–g›äÁtrÚøbQÅä‘—G“—#Š•í’?k•²	ÿ\Áž]éë¨Bî‹Æ%+ˆ“
­Œ´ªD“­ÜîŸ}î"úÓœ¬VËe…éÖõËÆqM^_a)®æîÊS¡éO¶DIV­ç¸ÜJäõ(ÕNÄªPWY™kÌv%²?G+•œ÷d^Yî¡%Øaîp¾6'Öy/«ò6c»ïõåìa¨ó;tWD¿›ˆ[¡»³Ê;ÿ=¹RvåwªÕˆû¯zš
{±žóK|÷q_‡FƒVŽ,=Ì    ØŒx9²ê½<!0óÅS©o¹_Ž'IòØë›ÈKJVïÔ¡Ì ÆîÇšñÂ°ùÅ=eòÌEÕ‰ê…@@•qÉ	ëË¤Éù˜†g¥úëeZ9·ÉÇÑ•ž9ÝŠEtk. ö2k£ô—ƒe¼ü-‹H¿Ž•îWw K£É¼|n©€Êšëä6Rê…q¹ç®·?$ut©½«Kí©Íòê¹¢jf›ø„®Î•¹_ WÐh—ÄôPÈÜ%Ùöd˜—!Ú?™ûâ5ë…‡N©¯+¼Wò¾ Ï~i^Žû!óEhîÐ½‘9µ—¥…ô±í	KçƒÖ=ìš Üóê:'™é¡üÁ©{|ÎyüåÅ'>Éæ¦=K¹^âXÐ6V«‰³û0/K¬Lþ×Õpê¼û®Ïêµ`i¥áxÑbÎ{RîëWìÒ¨ýû!ç<ä:¯˜}2¡óAë¾››Ó´Ê\kdý5ò‰üåAëÞŸÓôœç—›©ªâÅx     8|ïîÝ»ß%	½üçßèÔÎ—7z<È£­ùŸ6z9õtt©ÝS@€êÐÙ¼_Ýå³Y¶1––åzVKÎƒ™ïDX¿ÒÞs·êƒ0/³‹od¨¶~÷Cî{r•ù:4Î®yKsýªgŸ—Ü]î{rUö    À&táÂIÒ§Ÿ~ºìmŸ}öYIÒ_ðÝªŽéàõ¨8ÆÆé9#œ‹¨3´™cKìº&ã5ªwVwÆ'tl$¦>åš»‡ÑúÝ¹ïÉUéWãºœ’éc¼z»Ë}O    €‡Á1VEoˆ—I­ºUýØ1àþÁý     ÀfÁËñ        .Ç        ‚c ë®¸®UÁ`PþŠÉ2×©5Tðø:+®SkÐ/fi×©5Øªºâ    àaDcäP!°AESç48¾¸v‡)®SkK•Š¬£ca
Ï¬Ýá–«ÂTCÑ”Î
ŽkÙ³`[b©sªð+ØP¤©sƒZË©^uê¸ïw÷òL$·j,<,³Y±êZ[T•Ú¡ÂíÐü(M,óþ·Æ ©sšIû,ë9Uøl(µ~H¤ÝOyÆàÜ.my…?¨†Ò´}åƒY_û*®kUKrâ$¹æ5ß8·Km“¾¿„ó÷kÞyplë¼~‹ãšˆÕÐâW¬€q    °Ç°•­º½Þ #`
[®ðûU1C ò°[Tx|£G±‹ã\ãWÔ¦ž‰âºVµ4úL«®©JJ$$GÖYáoQ•¦t.<®Åâ:µ¶4È_1“?ŒNYgÆPK>ÓyÏ©¸N­
¥É·ÂTCS¦í±fƒ	Q¥©sá´ßYi!¹C¾1Ô”Úá®	ª›ê¦Rîrƒó
¿clf<
þ
ÍÏ¸î{sMª›Ô¸òÌƒYYY.­$iføœ¼Žc     °ZŽ7;»Ê-:¶îU£µU*JLéœãÀ3ÃÃÖ¿ÜP²2Ï
¹Q©´Ô,ÌY9˜¬Ì³ª§£Q©´Ô/ö²ŒpÊ
\ÕUj	VÉUèÚÎY˜\%
œOm«‚¥E©ý=š^Ñkí;±TÅ¨U¥éü(1¥sƒ1Õ.w¬cnMdÙ&×¸•YiªÜ6cH]"Gåi– 0µm–ùH«‚^öý ôªÐÄûR–mR¦þ U´´Ôœs!äÌp8/ÆRU‘¼ÅÒÌÏgq]“ªŠ¢“ìO+TY*%¦¦Ì1õ¨HRQe…4“ûª¨5×o¢2¨†å¤ÇÅUÚZ”ÐÔe÷¾sÓ×U[U¤¨&f$©XÞ"IE[UU,ÅrŽ¡XU[‹”˜:—ù;«¢ÖÜ•
¦
<÷¼Žk0l¯õµâ	©Ôó¨´ü¿10C0®)3áò˜	W…f²„ÿ	Å¥âºÜó0¾˜
ãÇÔ †Œ},j|"ªª†ÕÏPý    X5ô8ÞÌ¬p41u.Ki”µc…#‰XÖx¦Âo‚á°Âç¦¤ªG?Ü"•ÝÖ¹pXcQ©´¦NÅ2á]CÑ”Î…Ã
‡Ç-mP«£ùgQ©4+l62}AÇ5›ã„Ïi*Qª…43¬°µ%ì}Ún…üV0‡e†gú¹¦ª;Í¸ŸÂ"•jÂ:f‘ªšêT<3­¨Š´µÊ:‡ŠZU%4u-Ua…ßúÓ~û\Õ˜#¬\Ö<$·)ÒísÖ9•6¸¯…&¬mŠTU[!-NévB*­´W2áetb\‹šÑpr\ic°ç=ÿ©.jÊ(ÙK·ÂHæ;†ÜÅujª*RtÌž‹TþÌ°µŸÌ	OV˜&ç®ÕÜ“’¤ÒRiÌš»¢*Õ.£ñoEe©ìpq‰5U[U¤èXZer±Wæ1[4Ï{M\SQIE^åk‹;3¼²–1ÅU[U´Äxçô¨§HJÄõµõ%€çö”*’çÑ|c°ÂXO­é7íì9=3\PŽœóZ\¥­ER"þuê³¢*µXÇi]²™°ó÷Z…üÁÅÍ„Ë[l–×µš}µ8®W¾y0Ï}TcùÎËú]áytÉS     `ToRv…äRýSiÉJ®jÌŒ*×‚û¨Jî*Ý¨ÆÂÓª,•¤ƒ©ú:gkBHéQÇ>ª¶Y!OUÖmS×L¨63¬°ch®JÒô²©¨4çÙTjx	eTw.K*þÚ”<êQëÚTZ¶V©XãzÔUÉ¸Ôî²òÒ
çÁ
c¥˜ªR‘·XŠ9ÇíÔì
H«Ê²¢R¥Šj¬ÐÛ¡Âoõ§]º=Àâø„¢U
2´V@=fÆ³²ûÁœ_iCPÁ†ÂúÙº+LM˜]UåIÝ›v ¾Ü˜Uøeþ €1Ø_˜‚êLÞ:µVIcáqÉ_¥ª,«¬šD\_çZ–vNöP«ü-Úzûœ§ªÔºÔà¬0¼¨(®sáa-Vøl( ýFŽ18vl*{áj©RáW°¡EþX!¡ºWufÂ5.¿ª’ç´¨ñÁ°Æ“ûÊ¯°¦sÎC…üÖ—{¹.-     k…àx“ZT8f‚‹Vo¶à™€#ëvY[¼Îh8¼œÅE™¿÷ªX3kÊê[jKd{1ßRá[ÖÀ:w^q]«ã%ZV€]Ðø3_^%U¨² m·8u[‰ª­ª*®§TŠŽ-¦ÎLGÕÐ
ÝÎ—”å°òyÈ9EL k¥¹ö­.V]Miö6Ù¤éhƒÌ2êeÞÉûØªÆoU³Ö/ˆÌÆ:~a/Æ«°¾hq‡ä
ÁVyÏM˜ ¼Ê“j=’§ÒU™Ð<cÿYÎÉ|IReÂÒñE©Â£"%t;gò,iÑ„ûºm}A33­hC©ù2c©~9çÕ¾çó´ù:®„»L¶Á™ßk¥UòXÇ(6žYÝìwÎyø»JóVµ(uilõ®ì…     ,­*6³™a…Ç¢*ªjIý©·­¸N­ýiö=~:*eýÓ}Ó&£¨ªvv&°I¶X+Ô©¨ÍúR­_Ç•Õ–Á½ÀŒÛú{ñŠÚ•¼\Ì´PtÚ­‹ãšˆ©ªÅT”.Ñ¥BÎà5lµ}(<ô\zŠëjTª„n/Yö<£kS	•VúUYºt{ÔþMŸÞ‰eµ3×¦”(­”¿²4UE|O÷ƒ¬V%¦-EÑÿÿu<‘ìG›¬t¶¯ßJX/ŒKLËWøÝíìööv{’ð Æg4Uª
ØjÅžqìÎ´NHÿ°‹S·•P©*Ó÷•ãœÌú©¿l0ÕÛ·—¨ªw?gæ/ 
¸'óÌk…¿Å´ƒÈÆÚm8œ],2¯…õ{-¹^îûÁ<KæÜsÎÃÿ7œº®v—è˜Âéã´ªú§W|Ó    ‰ŠãÍnfXá¯ëÔÚ²/VšVX¦êÙÝòaQãƒcòÔZ/ƒ²_¼–owçämmQUK0Y-»TÅ¦Ýê !TCbJSÑRW¥íÌµ)Õ´¤¿o\ƒcU½öKÏÆ/Oik‹õy4ªè’Š¶¢Ô¸S:çôÌtT
¥¥JÜ.¤†ilpV(Þû<¨4u®Ñ±°¹O–è§º8u[‰–*xÛO{ž«%„Õ_X*J]÷BZž,Név¢EU¥	M]KÍÐJî‡¬/	6}&\/=´æ#:Öðø Æ<A5ä¸~ËcµK\U¦Y«ïdÏƒ]œ3vŽÂÕ’ÆÜÿaqJ·Uªª©SñŒnæ;'ûY²D56Ûåƒýû!ãžL»~U-AU%¦tnpJU¹Æ«µZ´”:~ß˜{òëœ­yò˜Ö9o«Z²Üéí`R÷cîyXšù²¨ðª~     
ó½»wï~—H$ôòŸ£S;_Þèñ ¶æÚè!`˜ -QP¿]»×tQ2ä³ÏÄrzN»Ž~ÛcÓ±Â[mD‹Mhy¿     ÷£.H’>ýôÓeoûì³ÏJ’þúƒïVuL¯@Å1pß²ú±ÚÕ……BVÏ_WOÔ¨Æ‰”°N’ùµª'Ì\SÅujª’¦Î1Ï    €ÕGpÜ¯f†µ¬÷
&7¯bˆd^’˜¯Ea…÷.–iq\YÞa
    Àªàåx        ‚c       €Á1       À…à       àBpŒL~ƒ~Ulô8       l‚cdš™VT¥j <      6%‚cd1£áð9M%JÕlU]ñF      ÀzúþF k«¸®U-UEÖO	MÔø¢ù©ÂTC©½fTcáaÍ$·\Ôø`X1P
-AyÆÂž      €M€àø!·8>¨ðxöe3ÃaåÎ‚‹U×Ú¢ª"wØ      àáGpŒ,*ä6¨4£
      Àf@cdª¨$4      61*Ž‘ifXac      `Ó¢â       àBp       p!8       ¸       \Žqÿ*®Sk0¨ ¿b£G      l*ßßèà~U!°AESç48¾¸6GðÕPšþiTcáaÍ¬`lÅu­j©*2?$¦tnp\k2ò
¿‚
¥Ž±«®µE[oŸÓà¸T×Ú"{ŠŽ)<œÿlRû³2÷sš:7¨5ºU      °ÎŽa*{[¶êö:3ÃaÍÈ
‹²½‹ã¼¿ÅñA…ÇMˆ[µÚƒM*V]M©¢caMWUSW¬¯Õd…Æ‹ªðU¥)k±¸N­-
òWÌh©ìX²ƒW3þ†Ö:}½VÁ÷ª)v‡äk©Â¯`ƒ¨@     àAFp¼ÙÙÕ®Ñ±ûªZÔUì¨Úu}^Õ¢`•
«..®SkK•LÆ™^k +¨ôÝÚ¤ÝÖ¹ÁEIª,•SSf,zT$©¨²Bš)t¯‹šºPU•GJz4­*;á¨²Î¬ØNW®ùK¯nŽŽ…¡ö2ç¡¢VU‰1…'*lXãôxfZÑ†5ýá1     Àš#8ÞÌ¬1‘µÅ×Š'¤õ(&ÍÆT#›–¥9>/¼F…ü-UJŒ…58cµ´hñ+¶¢ rQãQ‚ÉqM³Bëb¯Š$%b‹fnkâšŠ–ªªÈ«bÍX=\¬ª­ERtÂŒÍªÊ6§áW°¡IuSƒÔïhaæCc&4.®k5Üáq-ZsÕZ÷µÇ•?çõ^™a…g$UTÞû¾–>˜†Ã_›jì`«¼´Å      XSÇ›”ÝØ]qš)s§s®>Â®ÊÝ´·Þ¾ë¥¢ÒŒ«!¨`ƒýaÂ±Â¢ÆÃ*¸)†˜VøƒªQB[[‚
*¡©ÿyÛ,÷Ö©µJKþªÛf©ª%hÖMLéœ=w®Jéôq'ËO­à¹¨J-Áª´­Ì—¥U-
VeëI¼ÌyX¡Ü÷Pzuzå³_ÌTCKPž%î]      ¬Áñ&µ8>¨pÌ¯`CP­Þl¨&¤Ëº]ÖdqFÃáû9Å[å—·UøÕP4¥©D•¶NÓ˜§E5¥UBRi•'õÒ<S‚\@µq¶ñ™Jé";„¯ð§ZB$[7Õ ™°Ù9ý9‚ûñÁ°Æ­0ºª%¨ª
øsßC©¾×ÙÙ­4x     ÀZû/= l ™a…Ç¢*ªjQÐ_á^V\§Ö`P­uÅ3¶Õôu\	©ª¶"Ç
Åªk
*ô+×nò7iêò¸b®Ïç4•”ˆëkI*®ÒÖ"):}oÁl"þµì—ò%G\W£ÒÄ”Î…Ã
‡Ã
'{</*–TZ£œ—nq\ƒásšJH*ò*µÚrça=UÈ´û/     ¬5*Ž7»™a…¿®SkKêŠgî“@Î®,µ~,mP0Øàh«1£kS5jI{9žûEr¦Uƒéç;®Á1‚
f?’
{¡^Î±™þÊÃ‹’¦£jhhQƒ¢^ÔŒÎÉÛÚ’l‘˜:wíÜçšR¢j«$iq|BÑ`ƒ«…]e<3lÆl}!û%xé=£©þÌ+‘ÖF£ª%¨ªÏë**UšÑº      kå{wïÞý.‘Hèå?ÿF§v¾¼ÑãAmÍÿ´ÑCÀ}¢Â4/À³BZÓ78A°
     ð€¹pá‚$éÓO?]ö¶Ï>û¬$é¯?ønUÇtðúT¢™é¨Ü/À‹Ž
     `U¢™aÝ×ï"     À—ã       \Ž       .Ç¸ÕÿR¾õÌ‘Ýè‘€k     °©Ðã´GŽ\Ô?¾¦ÏßüýMÒ_?«'w~¥/^? oì•ê)ß+µúÛ…Ýš>³Œ÷üBo´?¢È±¥×^Ôã“é½C7%I»úÞPS¥µ^<¢ö|¢›öv{õj·OE’¤[ºÜø[]Iîo›µRB‘cïé“¾¥‡±«ï
5yÓŽáüüWÒóÝëË%÷÷¢Jß9¬m_}¢?ýoNÂÊ¤_·Uå‰½úáõãŠœø¨°æ¹ÛO¾ªë‹¬ó­]úÅh“’3~5µ\Ë7âZ      Üß¨8†UMzV¥õ=4WÿE‘×w¯yÈ™Óä7Jdû¼s¯j+oérã»z·ñ²ny|zþäv³¬çz£Û§oÎ¾«wßÕ»vˆÙ¹W¯¶oÓ-ëóËÓEò½¶WÛïax·bYG·6î×kÑó½X/EŽ½«w?R$¾MM}»$m×ÞóMÚ6}Ù\‡³·TTÿ¼öv¦6ÝÕ×¤mñDöý.Óº^     €u@Åñf·ïC=óóréËO½jh*B‹í¿4ªU¤®JÞ´m$éÛ\§©cÈUœúì«ê‹zâq÷ñ3Æœ<Nj,?’$ý½ž8qQ’´xa·¦§­õª?Ô3'ÊSŸT}üæû¤’×õ}¢÷’Õ¤·ôM\ÚæÝ&é¦výt›4}Y¿íuïe»ÿqé–®õJÒv•x%y×SÒÍê_èvéÖô6m«”’ÕÈÕÎ
eŸ^õ)£R96¯›*)äDvªòÄEs­œsëš×ÙdÕö#Gr_Sáý÷{ôñ    IDAT®½/^Ø­¯$I?Ö¶w.ªøï”¼~èÜ×ÎÃzæÄá%î§Ìk±}Û#ÉÏ¥›úãdB¾úÚ%é”˜¼eVì½¡[íMzÜ¿]ê»)õüBM•	EÎ~©ÇÛOí°g½¯     Àý‰àx3³‚ÂÿLkðÈ‘½*Îæ}39+ýü'*®—¢W¥þì'úÑ·×4}&m›}ê™ŸK_¦»«o§¥oÎìÖÒlÉÄ?/O¿&Ì–©ˆ½š«U…ù_ñ¿Òç¯0áåÏ~©ž±ÇZîA2uÄ{ÞÍ>ÜÎ§ôx2 ´áØŽT‹«Å6o‘ÿR·´]{Ï¿¨G&#JÔûôHµ½£mÚ¦Ëz·ñŠi{ðÚ^ýqÏoõnoîö7½'{Tï-§-Âã?Ö·ïïÖtå‡zæçÏ©´^Šê—òýüÇºõþnE¯ZóúÎ/õù›ÿ¢oŽæ¾•;ÿÞº¦
Æ–éãÖu‘ôwåÒ…ÝúÃ´	õ·í“¦ûÊhU±âkñˆJ:%õÉÌsêÊ«È
ôÕY¢G’Ÿn×^ÿ6%®~¤O&ŸÒ«´Ž×     à>Ep¼IÙ•¢Ù*oÿöÍ]éñZ=yâ¢;T>Ó¯[?;¬-?{QÑ«Rqåßë?§/™ÞÂ’ôÕíeÅÿ¡o¿•¶l}Q?|ýe=Yùúü¿K?ÔWúêjî­~ø³ŸèGšÕ­åô*¶,þ¯IÕvæ€þ°‚}Ûµ÷5ŸŠâ}tè¦¤]zÄ#É#Ýh|W¿µz?òºfmñTŸÕŸwø)½êj
’Päw¦3ï­XBª|DVä¹ú¾¼dªË+S™yý{m{å¢¶½b}øm!;3AVß^3×©Ð(+¸7}¬Èùåë~C¾n)·[F\ÑoÏîÐíMzc´Ir´¤Ø~òyù<·tùÐM©ó©,{]Çk     pŸ"8Þ¤þv¢]Ø÷¡žùùEù¶º+?ÿv¢]°_¤¶ó°ž9ÑaUð~¤Åé—µ­ò9ý°^Úòwwµð¿Ìv¦y¯ž9±W’ôŸ×;ê>³ùHÿùÕaI?QqåWZüê'*®üéÛ¯VP¥|òU¹æe*‡}rVŸZm+b7L_ã¾?êË×|òy·Y¤/õR·ž&)¡/'%Uç;ÎzšuWj/åê%-üŸµŽ°yV_ú²»lVt-nê“=ïêë§]}o¨I_ê–$õš*aIÉ~sKzÊ_$©HM£o¨ÉZìë~CT¿«ß®|ô      ‚ãÍìÌýAê™ŸÖ3G~’Ð}¤è›iñõ³zrçõ£zé›«ÒßN\Òâ‰ç´­Eú‘]¹ªUú³Ì–KùÛ7wõ£Êç´å«Kšþæ9Uþì'úÑW—òÇ»ý•dG¿Ô¶ÇU`el+¬8ÞÕ÷¢©Zmt¶,¸©ù˜äó–h»¤ÿŸ½»‹mêÌû~ÿ[Ïl&Î=¡®;Ù` ŠQî¢¤µU*¹#h¦b§´%M¦'¨ƒÒ©Ô QU‚ƒU©jE$‚Ôg3â„'ÁÌÁÝhš§ªhÐn¤¦²ÛDôF8ê‹Ë$ã*›0'fÈsÒ}°Ö²×ò{ÞHB	ÍÄ^ëZ—¯õâú¿þëMZe,’×£LŽo%ð“JšK3`6Î> ÛÕ2¡€£fðù1Çu;FW©J÷á¡16-0Ø\Ê’²¿±&-„äÀ`^vpð%33ü£Ó“LžÎšÍ€rv­â5°/DDDDDDDDÖŽî®¶jÐZµnc9“¡afg'Î;ÃÝ	óý™kv 9ÂÔç/b4[“YÊM@g+I|Ãüç@Cæ¬jV¶ó&kÁ:3“Ùlï0ß×±óÈsÌLÌ±q‹£ÍÞÏ˜ém)<9Þrén'ä0Y«I†÷õíˆ°õ“6kò4HÇ"ÖDyƒ\¨÷n
nµ—w8=™rÌÆ‰tdC•Ñ¿Äi:^dB¶årõ0·`OƒcN2öÎ7%ö…YºÄk 3Ñ]igHÞ|:»­Š'Ç+ÀÊ$öX&z2ûÂÖ~"Skº²r«¼/DDDDDDDDÖ€_ÌÍÍý”N§yõo—ùSÃ««Ý)á·¿þÍjw¡ˆÜÉÎ¬ÀïÝJJ>Ýí„[½ë.™7á¡K46o!y±Õq£aY§ûBDDDDDDDÖ¯k×®ðÕW_-xÝÇ€ýò§eíÓïoþYÇ²Îpw¢…ÎlUnóý[
?Ìæ?ÿ†û
M®Œcwvºˆˆˆˆˆˆˆˆ¬W
Ë²H½s€±ÕîÄzåœÄm=‰#þ°‰×ë¾Yfÿ¶Ú‘µEcqQàøgÎ{rˆÆÞ¶V»'"""²$³ø{‡h<ybµ{"²vt´Ð9&Ü\ížˆˆˆˆ¬;ªq,Ë mïÅØäxéÞ(·Þ:Æü
l-Ø&T'òGxîxï_`° ––OÚðWY&†ééˆ–m¯ö|'mõW’á}ý˜ki	aXï¤c.¼1Y®µÕïCGÇýdZè¡ßQ·7Ø&äËo¯xÓïÅƒ³oÌÆ‰<;ÈdŸ)û~eý¦»pkfT‰gŽ¡Ÿ©»p«—øûÁkmÔWr<,Bà,þ#Ml`ŽäÅÖ›p°è¹”ù¬Ùq)¸ž½lÖ~HåîŸ%³Ž§éÇQ™¾>p9Çªë8^9cWê\ZÌyQÑ5ªÄþ[èÜÜÐ5Àž†Íæ+ø÷ ûà=9ÄÎ-lÇqž÷X˜ö~-³ŸK\Ìã+UÙõ{!Š^Vø˜\÷9Vés¬ cg÷Ñý\âPâzSôû¾L
qÝ’¯¹¥âÿ
*"""òpRÆñÏ\êŒu-S`êÞ(·º0ví6ljÂ8´mœN|=Ø×†Ÿ8‘}=ô¼'íÑÞ]¦±îvÚ¿‡ž}â³¡¾ æ‡Fb˜ž}=ô$ñž£¥£tsk¢/ù!¡g_‘X£µ3Ç¦––O¬<ûzèÙ×“ýqW´‹é÷âÆ¡ö|'!_’á}=ôì&Yåç¹óµ@öãÅ>“õ¹^óÃláã"OG­És†ü¯µP[nÆST¸…¥‰#Þu€[7çV|SÅÎ¥5§;„¿*Mü/¹?âkiÙo@btíüpïä‚u~õ¼'9ŽWIÎØ½>,ê¼¨ðUtÿ-“tnÎ÷¶2ÖuŽä½°±ÅöÁº~Œ½sfå:Ñw‡ÔÊµ¾ŒJ\Vú˜\„É7.˜ç‘unVò}¿ròÇ.Øv¶3Ë½ÿî.þ}_ºÅ˜c!>[dûº¼7	Š~oÎâ×|"""òRÆñC,/“ÈÊdœ¿v€D¢TV£;ƒøþÍsÄ{aÛ»GùUâñÞˆk¹_%þ_þ‘·õ9î%¬ÿ{èÍÛ3¯ÛÛòžbgý·½ÍÛ|ßu¸üÒé;L²ÕñB]>HÇn˜Y&õ^<€ç± ”È_
>fÀlœ} Þ* jÁŽ­ÔUAòº•?kxuûk¡¯XËZèD;z2[›L¦ /[; öRW•&þ~~&NÑ>-Úóâë°¨q0j<0;AÒü|—ªßKmxTÒìõäõ	Ò?»º!zjÏ?‡¿*Éð „Z‹6ŸQ»¿IFOÔ²µ¨ªcoeÇ!Å>ØúZùíÀ	|½-TÛYv&ñÄ ßÓ‚±eŽ›6ÃÄmfê¶SM¹cß:ßîÞ†ºíæ¹;1˜	¹2’©œw.ey_ê$|ÜC&û´Þ™‘ê§mÄo½gfzÚæžÖ0áV2™æÁ¾0!’$}†™•–“ffž¥‹d•ÙÁƒáâÁŸ?F±³Þ(	Çß’ÿ7îlÆîvÂ­ÿÿßl
›\ªf¶Y©¬ÕÚó´ÕO¸>C¡×lö±[R±l_;K3‘Äð™ïg2úr³›!'»?ìŠ]u^Tt*´ÿržH°Ž#7“Ý•¡êÎjt®gniž›Žmç.?sí ‰«¹ß•Å?•¹œõ‡£=ó;f&¶S]W {»æw~„ÒÒ¤ÆÇ
½·+»¯Ãôt$]ûÛu}øËVÇ1ì!4&„•™:ÞBçñ:R	0|æ®LWûø/öD‹ëúà”sLv·n]àõa~ÏÖÿS`JdM—¸F|JÃ<¦K+þt™›$‰QÎ'\Ù¾@îyc×ÑBSMœÈûðÜq¿c=óz7¿¹9ýÉÖy
`kÑïnŠ}ß3™½~æô!7Û¹ô÷F–ë³:k%†¯Àä¬ï:ö
}oÆ>ã¿kÂ82 ¬Ü“B""""šÇ±Ôømh~”ê LÅ`ÃS²ñÞ(‰« ÇˆÇìŠîõ¼'bÜdì­3ÖÚ£ø£X‚Óücàû5ljbOïùâÄ ùÍ³ø›·» ¹ÄýØaRïœ#ùîQŒßeÆ·Å4.PúÂñCwòôX¯^°ÿ¿Ãñ¥»ðþñ„¿f+µPä‘E+82}‡I‚´4‘Š%1^¶þ?à!ÍÄ¸õc¥f‚ø¬Q´µ5Ñ‡ÁÇ iþøì6¸Ù` ýC¨D:€‚?ÈJ¬sf1ã`©òb~:«}¯a­m¢Í NPÀCràQÚ	U0&Ù µùƒÛ;'ðã­¯…’ã0˜=Þží)±ÛÁ¤	_WIo68ä=ÙÂF¾áÖµ-ìiÞÂ½‹ƒpäi6 UæÇæÆº-$/`Êw‰Ææ§Ù€)Îâsš\ãæ&Yìå
žK†éÙg}^
2ØÑOÏé"¥*úz,UªÂgÀ@=V ð¹ó7*{»Ãºá‘ü±ŽïBe—4©î€£m6Í}jØTà­Š‚½¹¦ï0IÎcÓ‰a.”+ÛáÈöÍDŽ·s§/€2jRDöõÃùNÚ!‚³õµlÐ,¸vÐJŒ¸¯ÆK‹8/*¹FèCæfON€mòë$¡V3X=Ùg³gã|t‚}!;Plèìãož›ÅÌ÷¶òýÉ!v6_Â›¸‹QAÐ¬'ˆì xÞ»Û©f±®oÌï×ƒ'˜Š9²’f?3AcWÉK¦4F”þ}ÖžëëÉ’ú¼¤Þï¡¿¾pk-QŸ-~}¸Ð7X¸TE€£&Ndß yì·¶<]Y9‹¢×‡2çEF©ëÃ¿þ¹¹·æ:)+ºV>'l~¯•–}ºgÉŽ:‡è<ŸÌ^[«Ü×Ý¦óµD“!GÀÕ\»¦ycgŸc-ûá±Ïyë¿ƒœ
wSòû¾P&ß¸Àp_˜Pk;ÁñMÁ¾YVàÆ Fþ÷\Ÿcv·ç‹oF˜z+Âý“Cì<2Ä&_åç¼ˆˆˆÈZ¦R³«ÿEòÞf~õTÐFµo3÷Ÿ•©cx‚-u@]½C4f~8F¸6z5³—z/áåQ6mrdÛ¥*.Žr¿®W›¬æ6w­ÿxNß¶°1`¶9õÖ 3›šØÓ¼™kvFW„©·0ÖåüWaö†ÑB§P¸Sñ@m¥åë‡Sî/¾ýíV0æFÅ­­‰>€ãù#ÛÎôNd=ŠNNÉ‡}XL¿8ÑŽa’„FÂ„Gž#ëìä£XO ðH˜ð~oæ±t;˜4¼ˆzº{ûÌ¬ÒþëøL;FüÚm66egÝm¾w>>~÷Gë\¼ËýÀf6ù
¶â6ñYþ¹3Ûªn²ÎÍ,³û_e?f—ù1îÌ~J’šµ
¦hG=ûŠÔS~É§Ð£Ê-fà ÓG³]¯QKíùNÂŸ´PÛ±/)îüïi¼lí0Ëµtž¯5Ï‡é¿q{ÚêKw;á‘v‚x«ì@Na“É”ôÒ>¦½Û¼!‘ž6˜ì#çÃ$}¡²2ÙÙ¾ßYÇqôë$Ù'¬OwÝ’šmggö6):vw}°-ê¼(q*Ô3ÓÙ:×csz˜ø¬•±L-{ë=¤ÇodoNXùe±ÎÍL?
”–H½sŽä½íì<Ò7ÿ¼Ù‹s$?.R¾bS{¬¬çL¦±Ý/ç¿Jë /sé˜Ì±ïz‚†Òåò®YyÇäø"®ß[§Ô1ZâÕ0Éà³=™’Fk¸L‰'ë)'ûé»ÁDÎµ5{ÝÒï,OU*›¹ÄØå‹Ò?_Èü~~Íq—²ÄwwÑïû2}ˆvX¥rŽû!öÑ2g%>§/D¸Õ ‹,¨fê³ÔTuóþ®¶¥vPDDDdÕ)püP‹0“˜c£ïi6žæW›æøÇçå?5Ý¿y./Ð4Ÿ2k®zë·03±…-‡ ûÃÚ!öÿ¸g™Ë	<Â†¼ÛØöî¸Îü+S7Îª¹h¼Œîë'êÊˆ-f’;Ó€Ï÷º™MbWí@“}ÊÊª´Ç,¤Y}°Y½»²d’) ÍÄu³7ÙàT‰>ýQVb‹°Øš·˜ »Ž³öcÏõÒ¤ÆÍÍTùi	[ù„F:KÖ…LN§¡ÊOÝ´õøq½×jo1ãPÞ†G¶,~åŠ!a×g;;{³?X½'sÏ¥!|+T|Ùu´Ðäƒä×E‚?³VùÈ“ì­O‘œ®co=f ]“µ~/uÓIRõ{10Ï%»^eð1/É„×|ŒºÜ>·kêvïÂ›Hâ}Ì~æg)Gù.XÙöËk’ãÙ L[À“	°%Ç®ÐõaQçE¹kT±>œîÏÜ¼2Nö9k}¦ú½ÔZY¡®ë•œj5HÇ†—<‰ÚjŸ›¥=Ê¦B©®+áÞmfîu
ÙÀvà,þœëFã»g|_¯Mù×K¡cr1×‡Å×)®Ä5*wÑÓß‘ÄÎÖ]f§¿smóo¾»¢íõg¿Ÿÿ88ÊSüî†Rß÷¥û`•ÊyI’`^°š÷äP¦ÔLù’/""""kŸÇ¹ùÞÏ˜Ùô(ÆÁGÙX(*Ï7Ü»^ÌËŒšÿñ.lycË7$ÇïRýÔÓl¸w7?)ð4¿Ú÷Sß˜ë°Ý
2ƒ·~;Üû†™@Û~×7Ï1ví6ÕÍvpx1ÇV€ÆþÖ±×¬½éøqìqgð˜ÁÓìc¢{ë=øŽ¨•¹“ù!Ó½Ãt]»} óØ{^–Ì¸äñÖ[}yÌ ë‡YÑ>Øëv·›Gv`ñuÊCYM†æüáifh™5™«-tŽ„ÍÌ.ë¥Éë¤Éþ°]Ð8,Tà,¾H^<À÷ÛÙ¹Ò—«‡ëd†ì›Åg¯îþ‚çE~ÀßÈ(·ƒ?×Ýõ„“Ói<õMÔMÇð4Ôí¯Ã3}‡I’¤f=Ôí¯#õõ0)êhª÷JNš7Tjšhª™`øëÆþ&¼®@Ž™Qèê_ßRxiÚïeâ/ß‘ò5ÑTS KÙê§ë¦I¡cÒÊÀÝe]œÇdqv™–ì9ÐŸü)<v…®‹:/Ê\£ŠöÁí°ÏÛìuiòQ’Uu„^ªsd…šç}ÚšdË5±çb­sÓî‡¿wˆÆ“'\‹{O¶P=1ÈØÅQh8ºÂ7{î’ü_£Üg;;í~,%ãxEX×~çyaŸK¹ýE®Pì˜\Ìõ¡ø:¾7‹_£r>íù&Ü7£òÿûÁzzÃlVø][{¾É,ûbw>[à†S±«Dñs~–Ú}ÖD|ïÇ!ÐV~òá%ùÎÌ¦®x‚S3éÁ¬G®2"""òðPã‡ÞîN˜5Ng®9SuMXÆ‘!Œß™õ§Þz”M½-ì´ëÛõ…w¹ß¼?2õGfš[¨v>Î©q<Ö"Üzd€=ÍC46Üæû®cÌã˜ÏÊÈH>utI“ŠD;"lý¤Íš°‹Ê/<ÝOÄè¤íxÿqÌÉ–¬Ç^ŸÆ;"<bVÎMôTPKoµûPKËkÖDC6Â#dúqáA.Ô{	Û‘dxŸõÃ¬DÓïEC±ÉÁJLþ³(}Ë<Å8&½2çQîibÏ»g™¸[b½¢çægå·•y!çÑûeýKœ¦ãÎÉñ¬}Õ7ÈèK~B9“ãVføŽë1ìä@~ðÀYûÖi2™‚€ãI&¯o…€¦ÁÎôóû`b|’øV­ÍñéVOâ“§ïl
aÌ–ë[’Ôl£*É¾(w^2k†9Ç1•¯öqWè˜,*Êp¬É±d÷E±±[þëCñkT‰ýç¬mQöx°&ÊòAr 3ƒ×“„[³}¶·µGÈ3ynºë…›ßwöä±e·•y¡ü¹™ïÄ ypˆÍCø8ÀÝúâ}pÍ
P×Bco‹Y[¹äÖ,±cÄ}—hln¡ñ$y¥3–E‰ëÃä£$GB9“ã™«:/Š_Š“‹¹>”X§„â×¨ü	ëÊß“™óo!×V{¬íu€Ì¾(5vÎÁæ‡frœývMXYâ»»è÷}ñý—/
}dŽ¥vzøî1çØ™ß5æu
w|æµ*9ÐCéa2Ù×¾@ç‹O˜
XI˜˜VDDDdøÅÜÜÜOétšWÿv™?5¼ºÚý‘~ûëß¬vDD¬àdzed&{Ë[ÇžÌi‘AÃ‡EÞDcæ¸xc>â¹"c÷àß‹‘ýlfàÆ
HM/ñ&’¬m¥&Û,ªøõayÉõ+÷zœ˜ð;v­úµU×wùùºví _}õÕ‚×}üñÇø×/ZÖ>ýþæŸ•q,""ksæz·(ýû,¤ï¯ùñ;3ŽgãDÞ˜d’bc÷àß‹ae!œÇI†ŸÕq ¹Š_–÷˜\¿¢_'	µú]ÇÉDèª_[u}Yk”q¼Ž(ãXDDDDDDDDäá²V3Ž59žˆˆˆˆˆˆˆˆˆˆ¸(p,"""""""""".
Ëªóž¢±w€mÕî‰ˆ<<‚´tÒÒ±BÍw´Ð¹’í¯ªŒÝC=Ë¬£…Î‘v‚«Ý
Õžï$üIµ«ÝY5šOÖ¾C—hlÞBòb+S±Ë9f`ÿî±0!†ééx°“¬äÎVîÒÝN¸Õ°þHÿƒ} µ´|Ò†z˜ž¯wn…á}ý,¶çºØÓ°ÙüãÞ(·Þ:Æü"ÛZ´5¾/2ïýž;^ÇDf_”æ=9ÄÎ-«4¦ml{÷(Æ&ó¯û7Ïï<¸Íw·nõÿ#x­ºñÞÈ;Ú—Î:†<€û|©Dö‘Fb˜þ¾¯Ï9G‹µÖ&äËéCß £/…	oçNßâÏ×Š8Î§þÓ•®d~Vol¡û§ðØÕžï¤-à±þJf¯Q‹³½Ô’®uKáú<9µ/²ë‹d>¯{L!³¯Ìã®ð{¥¶‘ÙKvs^w½gÿTYo8ÆbòQ’#!Úúîä\¿—÷;KDDDDDÖ.eË"À×;„ïÐÒ[J½s€±®2AáJôÝ!µôî¬ŒŽ:[
’=ôìëa8áÁÿšÉ5ÉéåÛÔ|o+c]çHÞ[¾6l-ï 9^í.,Þ¡16Í‘¼x€±®6h0žâŒ^ß öõ‰-|kÁ>+8ìvu´Ð9Â(¾Zµ´|’
ÞåŠvDˆÏ„úÖKiyÇ®»¶ Äßï¡g_þg^ã0ùÆë³<ˆ­ÕÒòšObØü5û`~'Dbi<ç¬Ìmë¸«‰±Þ/üÒn¦íöŒVgvsÚÚæ?;èìkÃ½a’U~ž;oçGé?NÚ¢½Û¹­ßY‡.ÑØ{	ï‚ÆGDDDDDÖ*eËÂÎâ?ÒÄÆ{£Üºj¿x_oÕÎåÊe»Úí 0—“QœÛÞ\…K“Ëy¹@Æ‰azþ²ÕÌK$1|fHÉÎìrf{9_7Ûª#• Ãg¶˜teŸy	}Æ¨"“½Åþ:<$µ2¼¶Ö Uuìí€I+«/=vUø9!7ó”‰AÆÞ9Sbùü1uŽ¹+SÙõ^Îze·c[›û"~™¾Ã$[+øXYïÛ­?šØÓ;DvŒÌñÙ0qê¶›Ç³5Fî1Í¾nû2?Õuæû3×°Î§âû6<²¸ËýÜ-®>f×1ÛºËÌÄvªë²ïÝ?8„±eŽ›6ÃÄmfê¶SÍm¾ï:\AÐ?Å>ØúZÎË®¬úœ}Q0ãÞÊnÍ¬Qif±;KÒd—’îÒàKf–èècaB5e? Õç™Uy}áÖB¡°I¯'ñ·6ÑÒ-Ûo;Ë6™00|àú¼ÇÇý9=­aÂ­˜çKG´èyáz=ÐFx×ñïz?á| ÈØ=fÀlœ} Þ* jA¢V–éÆÁuþ{„	a+V–t"	>Ã\Æî_ÞuÃÎz6Ç¨nºÀ:äfõVr|;&Kï‹’ÇdÇ^êªÒÄÿX.'×<¯2Ë¿_yV<[ñ©¤¹Æäõ	Ò?»º!:^fÝ*/d¶e·Xå~Bû[¨=íîOÁï¬«7™inagï¥
¯%"""""²–)p,c{s‚‡Þ“-TÛâC—hl†ïË=Î;F<Ør¾ÑÆ¶w[¨¶·a•ªpmß¹x&@¥ŸõÃ¼¯ÇñØl6Û«§#jê'ÌŒºŽ Œš‘}ýp¾“¶@ˆ ýD;mt·n}Ž–ŽàÁ¨‰Ù7h®ÓÚNðt¿¹l•=ôŒ›ŽP÷ ßÕx`v‚¤\ðŽÇIüxëÍU²Ûê§§¢ÇŸ­ 1£Üêª´lÂ]Î}6ÄÎße&vŒùÀY|
›]ÁËìrŽ}ë|cî‹þÓV¦ŸÕÜ…JÊ\=ÌØÕÒ¥*6ÖÁ÷]HºDcóÓlÀTo+c®ñjÁwè‰Àfª·˜ûoÃÉ!v>u–
¡‡˜Í    IDATWKì×xofgïØÞÀYüÍÛ3ëxO±óÈ%îÇ[ýÜÎ†Ô9Æº0›ƒ'øØÈ7Üº¶…=Í[¸wqŽ<ÍÆ ¤|Î ´Å>û³cölc í­FáGê­ h2ïñ~Çq‚Ð|­…}¥fÁ>ë1ùgí€bíÝVÛÝ»0HÏ	–ÙÇP°ârÀé~ó8é.qCçôw$[C™s¹<ït„žÌ@ãKAÙšy"¡ÿ´5Vé‡Ág{,R¡èyÑÑC´H©ŠÚóV&ë “Ö2ç“æ2ÇÎºÑ5}ÇZ¾‰T,‰ð²µ°Ç³ÒqèäBß`ÉRïë!ÚÝN8Œ6×³ûÔòI¡¾ ÑŽ¤µŽ—øû=Ö;Ö¡…çžÇ])ÅÉRû¢Ô1Y»¿vq›“Ì±¨÷â¼/u>^è†Xq^£˜Ì´‘
Üzðã?Žë&B´c˜]#¡L ŸÄpÞwPôë$¡Vwp¹øwÖ]ß°íÝ£ìì(_bJDDDDDÖ4Ž¥rVFãý›ç+ôxüÝ—§îkài~µ	f>/Õj›ÃÌŽ*,yÝ
T9ŠùnéÂë$S€D¹0gø4P`²¨½}VMØë{é\Êd€ö][X­Ý¼X»œEìGæ@uóÍî¬ÓùÔÔ™Y¶®zºë|_,·û7ÿË3+ÈlÊÏÄwî¯™ÏÍý·ÁÙP±}áºÑr×µ6<õ(¹MÒÚnjü6ÔmacÀÞÞm’Ö~›z+Âæ
óœÍf0o:²™M¾ÜÏP©$©Y0m„GÜ™vÆêpÀWnWÊ–0³b!Dx$”yÕÙX(H·V$µ¹ƒÏö0ˆ9Ù'¬@/'0[H™ó"_-{ë=På§mÄ_d­bc·•–Oü0ÐÃ íø-²LÒ±a3(yÚ”ÌÍ°ÆY.!1jen;^ë»Cê¸£5L¸5YqÞ9&gSä_õ&3Ç€øÓNÃ†ðX7¬rë†XÑþ÷
òÑþ:Ú2æéì~uÝÍ›™ºÅV¦r†¯²ìùÒ"L½áþÉ!vb“/ÿ†¤ˆˆˆˆˆ¬
Kå®f,qÿ‘£4ž|Ô•qœ¿
Í-4öšY£÷ož[™GTKf¹3Éñ4~û5ùbç3ëEÚ™±ö„`‹•œNƒÏŸH¬;„‡4å!^N‡.±Ç‘ÉjfÏÚoZÙÈÖÍŽ ñ|o+cv†sÃQ{_Ìf¹®Ã}ñàX™óö˜XãU^ñ}ñÀ*‘q\Ô¤+#Ó<Œÿ¥2“"v·ÓæÈ5'-¬¬‹¥'« èºî-á¼H”Ú/¹cgÖ³õûüx­ýT{ÞËƒÎ×žïtLPheê–]ËÊ¶2ÞC#ašÊM2·RÇdN9ˆ<§¿#Ùjà5j™Lšßž×Í¥+½‘à|’ÂüÌøŽ±nð ¹O€ØAeÿKAû–2Õ]F)·•ˆˆˆˆˆ¬7
ËÂÄŽÇ|ä¾ñÝG¬ aÛžÚ¾|Á-+ãrÃ#m l{j;™Ç‹Êr
ZðãÊ&33¶––ý…³ù¬÷¬úŸÆK…Û±ëMÚµ#Ý5C!öÿø]†]Þ âç¸— g1êÈfÛ®fìª•%ë}Ôñ†™A6Ó5Àž3“5µN÷Ågeâ{šAöŠ÷UÑ}‘oþÇ»Ð°-‡ u¼õÛáÞ(31à©EôyQÇ–¾A.ôÝ0{5[©Å~Ô=[*ÄÍª…ÝÑB“
²;íÌf«ŒIîÛVÉ„ºýµÐWq…ØÅëÞ…A²`6u¥Ì@¡aÖ£=½°ëCùóÂµ%+\$«´ÈØÙËÔ8d²–£î±_†q(Ï
Vw‡Ìò•N*zºŸ«~²QS2|kYÞcÒUo¸ÈøÔžoÂ ’ÉIkJ#SöcáßÖñÎßÇ{©«‚ô¸#ÿÙ:OíQÉ}"$ø˜ÙVe¡dû)‹Jë¥‹ˆˆˆˆÈZ¦À±,\ìqkB0ã$®F˜úüEŒæ£4öÍ,V¨^®KNV£qdãwfvfâZÍGiì…û·¹¿iK‰†Ê‰2k¢ÍžÌÈLxTn+36‹“Ô¹–02í%ÞgfÍ…š3˜Vï%\`Å‰0õÖ£lêm±&j#“ê=9ÄÎLW%&þ‹äSGÍqæ6É›sÖ]Èä¾Í÷Vv©»=3›|ñdk`_,AêãQîÉ¯ØÒöyafâß¿9Êd—ØE]=Ì­GØÓ<Dc³µNW2+ªÐ¤bÖ1~ºŸˆÑéØïÖ>?=L|›™L’x,ß®‘›3ÑžÿxÿkfmÖÁg‡ñ:ë²º&=‹ò]"D('ˆç.?`–j(µL^)gÌµ²º¥ägæOÎõÁž ,gB¶Òç…û}»®m´#ÂÖOÚ²õnqÖÏ-<v™þ9käº2–>“oŒ’tìÃr7“\ËÏÆ‰'ŒòÇ…&Ô³úí.{á<J“Pt_”<&ûn0ñšÎs¹¥7²c°˜ïw½dWVyÎ88ûÁ?Æ©;î(]2'â<'¬àyr Â={¨AAc‘‡È/æææ~J§Ó¼ú·Ëü©áÕÕî”ðÛ_ÿfµ»P„DÞÉ8¶S½[îÑö$o2£Â“F-¾=©˜ö…<V»dI†¥+5ÁÛúµð±{8Ça™Y×*{­[V0zzeÏ#k×®ðÕW_-xÝÇ€ýò§eíÓïoþ™[Öågêw'`cÃQ{‡hì=Š±©‚,É¥ï³VVêH˜ðHc6ÎGëæÇûCDûBˆ(ýïÇIûšhY©‰;Zx. ñ÷¶`éÇî¡‡eÖ7È…$ž@ˆàj÷¥BµçŸÃOnv¹ˆˆˆˆˆüœ(ãxY»Ç"""""""""²Ê8‘uAcqQàXÖ®ÀYü½C4ž<±Ú=Y]yÀ8–ÕeE}‡²Ò	|½Cø»Ú\¯nè°&ç¢ñÝ³lXRÇN‰F‰F£DN™¯¼òÁ§D?ý€W NEˆZïG£ŸòÁ+kÝ{2§kvDDDDDDDDäçHcy€Ì@gÅÁÑØ1â]{çLE‹Ï÷¶2ÖuŽä½…ô©mïæ__ùà ¾Ä‡?Là;ð¯¼ò¨ç½g^çò+ðé>	ƒ|˜¨"ð+ ì°¡k pà6p£f>?Æ|%]\Åq‘Ÿ§ÿ±ÚŸ‰ÀYüGšØxo”[WÁTÅØd¾½±yˆÆf`b±wÎà=9ÄÎ:k]ë5ÀýzÃQ{Â½Qn½U&ko€9’[™ŠD˜I¼ŠÑpÄ{#V®çoÂø{Ïpxå@=U$zàþ£¨ªçÀ+pù2®~Î\Ëï—÷ 9‰u7""""""""òs¡ŒcYyv°rb±L`3ÂÔ[»8Ê}`æÚÆYµ©w0Ö5ÈLNSÎ×ïß<g®S.XÊ	|Gš˜·¶që&G.áµÞïmeìÚm66ÍÔ¾üú	ßD_ðAUÄþ'¯[Aáúš*˜fœWøàÓ7©1K5õæûfPwŽäÅVpØÝ—-®lãµ=""""""""òó¤À±¬¬C—h<Ò7ÏU\jaùûÐ@5PÝlÖýÝÓ°9™«‡Íàm]‹U^âmÚ‚A‚&`6Átý›D£Q>u3>y“úñ÷h²_1Ë=ì¬»Í÷]v&¯Û†®§©¾7J2/ ü ,jDDDDDDDDäçH¥*de]=ÌXâ,þ#Gi<ùèê]e
8t‰Ææí®rpŠÈ5ÄbÓêc¼÷a
o8ÀæñYð¨g^¿§QÅ,ãã¦.G¸rˆ½¶w£a3÷o~VYmã±˜q‘ŸeËÊ‹#¾šY¬‰»Üg3ÆÁÂå6t
ÐØ¼Ý,ùà–žŠ¼@MìòúßÝË94Î,0ýw³vÅ©½>˜gÈ*e‘zç ßOlÆ8âžpC×ÓTs›äjÕ^ä8ˆˆˆˆˆˆˆˆÈÏÏ/æææ~J§Ó¼ú·Ëü©áÕÕî”ðÛ_ÿfµ»°D'ðõ¶À5wíßü	à¾qMg›q¬·¡k [jÁšnƒ³Ëý›çÌ‰ÞìLZ[f"9srº_%Î¹&„{åƒOy³~œ÷žyËœ"}ø0HÛÛÀ©ˆYÿ€Ûx;çÓnè`ï›’ÛqZ‹ã """"""""+ëÚµk |õÕW^÷ñÇà_¿üiYûôû›Vàx=YÿãŸ±C—hl†ï»“Zí¾ˆˆˆˆˆˆˆˆÈš±VÇªq,ò \=ÌØjLˆ'""""""""²ªq,"""""""""".
‹ˆˆˆˆˆˆˆˆˆˆ‹Ç""""""""""â¢À±È´¡k€ÆÞ!|‡V»'"²d³ø{‡h<ybµ{"""""""²ì49ž¬3'ðõ¶Pmý5sí ‰58éœ÷ä;ë¬?&{çLñ…gñib# s$/¶2[D;¶Ž:ûI
ôðÝcaBÓÓu¼çet_?ô…išŽpáÉìºÝí„[
ë$Ãûú1×¬¥å“6üUæ;é˜c=k{óâï_`°Ï|+Ø&ä³šKäö£ð:ûÐÝN¸ÕKüýàµ6êÆsú½`æq´áæ9â½‘%´CfÿÍ/Û±hõô0=_ï"ÜŠc?XcZ'òì Kõ®Ø8d^ÿ#<w¼Ž	ç±µlè`OÃ]¾ï:Lj©-â¼¨=ßI[À“ùÛu.ã>gsß+ÄuŽÉúO~¿’öŠr]3€Ùœ}ï¼nä¾·@î1r\sû€óói	a_¹\×»
?“sì\ãZèódÖMº®çîwvå|ÜûÏ=F9×ð‚Üß!Å¿ò¡l_*ÙN¹cÒÝümU®Ü¹´ÐcrQçf©ï{§C—hlÞâúï‘J(p,¬cI¶3$ºÎX?‚¶/gç–Oà,F]á ö|o+c¹ËÇŽÙ%÷[©w0–,/«ï©ãþÂïÕ{­çµl­Ô×ÎŸ±µ´ì7
<ºCø«
ÿh¾äÇS$°Ñä+üÃ¼è:Åú0ž"·ìG8LrgŠìA)#9†š´1ëÜ]5‹8/&ß¸@õÿÍ@Õs´t\`°Ï
¨'²¯ò k´£Ç}S£µàé~¢,®½¢ú¹Ð7hþ+XöÜù\xcÒú¿gé7	ºÛm™Ÿ!Ô$š¹ºÖÒòIÃ¾nu´Ðy<D{w´dP2ø’bzìÏ`]GM>; lMíÏšÙÞk~˜MCUñöËËéww;áVûx0—(Xu‘µß_káF_‰ýÜÊ9ãStìqêaÌ¦IWøY‹“V :1LÏ³‹µÛŠŸK,ê˜\Ô¹Yêû>£mOm‡‰A+hÜÆ¶wò«Ä2Ü8‘‡žÇò`ØYµ÷F¹eS]¢±f&¶S]îl[w°ô~¹ÌÐYŸÞ“CìÜ2Ê­·ŽA× {6»V±»\ïÝ¶2­VwoCÝv3¸ÒŒ_ß62Ç?Ît¦tšÔ8ðXög6Sh¤Í|±5L;v`ÀÀ[éñd^kµ†Hq'ï°€fúN~À Þ‹‡4ãX§Dìío}­Ðç-ÄÜ‡Æ&ëÏ{æ±°Á™ÅÝp”ÆÞ£™÷æíãhâ6Õuæ‰ì±WÉ1i/s;“Qº¨¬q =ve_pebûiñ“
b™o"	>Ã¼9`ƒr³Øp·êH%Àð™ï;ƒD…3
Í FÝtþvò3³6³­É„ás¿W4û¼»p+ùëÔ—ëåé;L²µ¢q6¯2?ÕuæuÀy~¾>”Ø¯ÅÚK8Ÿ,ØÌÎÞ!÷¶rn†U~XèyQx}:öRW•&þþƒ¼³)’,c{%¤’“@-{ë=¤c‘eÉ,w_ë&¹1žÆØEhù¬Þš­Ô‚õy­kp	Î çd2xÙÚ$·—J’š£ÆÈ´\{þ9üUI† ÔºÐOè”s½=ýÉÖuûk¡ìXzðÖ;þ,x=w8ÝO€¶‚^Ã­âã t·ò¥‰LP×ZW¨åòìc²{I†Ëe‚/š}Ü,×1Yé¹™ÿ}ïrèEŒMs$ÿ—ýÝa&ñ*FÃQü](x,""""%)p,+Ïšm§šAÆºÎ˜˜ße&öÕï¶Pm/èÍGñŠ¤Ä>ã¿kÂ¨?œqdýZÁÀ†ÍV &›ickö4@òâ¦bæ{;ß=Ë­·>`cÝó=ß%›Ÿf[€yº‹Æ‘!Œ#v0|™3¥]å-,vð“(ýû¬Æ}Žäo\ r¾“¶šQz: }¤‰”ls=Úh#<b=
{}¯#¨ç!4&d=t«B„GBVW Ñ<Œÿ¸Ø»±¿Ø:Ñâ}xcÒHyÖÎÉ*mC×«›nç•˜wdq+UQ½å.·º[7^Äl,vL:nxOºƒÆºÌ›]Ç˜·¶éïú†øçO—ØÎ€’#Øb^J•ªðø`x_UÚ£‰–Ž(ƒŽ,6W&ä8€£ÆÌb3úÂ„ö·P{ÚÌ|.à)ú·Çç53épf:Ž;ÜYˆ&ït„žÌì¹—‚öA»õ˜õ…ÓV€ùx;wúìlCƒazö%³ët”gÖÞ…Šƒ6›©¶ö]ìi¾„÷êaRE¯ÇÊ<
moÃÉ!v>u–
WOä–ª8¯y{á›…®öq¸ˆó"ÿQýæX[O#x_ê$|<ÿFBqÎŽàÖ¢Û+Ñsç5'1ÌÇ
/jBtŽäÞÌX¬làÒ¨ñ€ë
â±®i8ÊL2øÇ8uÇí,8h|Ì ’ù7ç:öRçº™$ðXû­Ðb?¢óÙAéŽ­yùëFk˜p+¸Jvœîgø±0!×{ïî]@2™uƒùJ:ap|/o ð1ißØ•ù®©¬ôEqEÎ¥E“‹97ß;yëÙÆ¦ùÞVÆ¬ï±Æ“V|CSDDDD~~8–•e=îß<ÇXÁ¬–9’›?XæSsP·…
§ùÕ&˜ùÜú!sõ&3ÍÛÙðHP,3&ÂÔç/b47àæŸz”Ü&y˜Û¹—È_Ë[¿î23Û0³p¶°Á^`â3óÇ–/Ý|Îàð
×\ê#òV€À‡˜J+kÕUWq’}ƒ™ŒQW-Í7.Ðã¬ÇëøQÜ¿/ê¨¿êøaÞW|â}XœùïBÃv3³s™¾ 3Ÿ›\ìÒ"³ÅŽIë¸ªn¢š9’í€`Õ¾Í°©‰=Vv)À}X±éØp&°“	8¨Uêƒ%¯›AçûvF 4*PC51jíSwæ`^vó¬s¥$£Ö>|¶‡A€îvs»™ TnïÒÄÿj+ÅËìóïBÃ6€×‡ù
ÛÛPf9Ó7Ü»Õ
Giì}Õ}í¸z˜±E<P¼í¤küÃÖSÃ†ðXÁýÉœGüKÉ®ÌÀ'p‹l¯TíÜìMó˜÷AÏ_Ìk™§&Ed_?“Ýí„[Ë—‰(V“xòˆÒ–	§gÓÙUœå2¬õÛúî˜×±L “'"H…µ‡»Û	ù 9»¼Y’Â3'b;fÙ†8‘Ó@w%[½uÕýµÏé(ý»·Z7ñfÓd?­óFU²ã“’Ï2i?5’aÐt¾–hE×ì í­f9¢B%0œãÉ¬~c:öVþa‹“wj<€¾î¡§Ãú*Wbƒ…ŸKýã‹=&—ûÜÄº‰>Gòbï¿«‡KœÅ¤…ÆwÉÜ¸qRàXVVæ‡ÉÈj¹z“™æ¶jãžo3÷oþÙAÙÙÈG†0Ž ÜæûõþhfÉŒãBœ™L!ÂÇÍWý®ìÎ‡Œp3K
´ÐØûôŠóg¬ò¿zª©˜ãø*´^ðþ[,«†©i•…(/êþ„FÂ4Å"\x£Ä*Ýí´9²”ÍŒàJú¸Ô¬¿‡A„©·"LYÇ…qdã 3»½HÆq	ÎÌë¢NG²ÕÀkÔZ%`âºB‹~$äs”¨Àäõ	Ò?ÞzÝ^Eý&Êw‰FÍVjí¯ã7ÌàŸã3Q2èÎwô ¼Ã:Ž™ ¿xŽUBÂ\ŠöV#oÂ²Š‚©Ö9–Ÿí¨k›Éª²ËÙ-¦ÐH'[ËœCÎr.Î›LöDky™ÀVÝuë|Ît­JÁ¾0¡ŠåŽÃyuôsÇÁ,÷}ÒÅä?Æ[_yæºó˜¼1_ŠïN›ŸÉ,Câ%[¤H<—8½Øc²p{K97½Ía3…¾÷ìkËo¬ŠˆˆˆÈÏ‹Ç²òbÇˆS.«åFÃf˜øŒT¶j»ìÄ¡3“óórÁÞ3$o>Ížæ£f¹ ;8|èÅ‚%ÀÎr~”ê LÅ¬Ñ‰ÏH;¨·Ö,8cu’Ág#ðIÞë=ôÓNxªì,ïƒÔ;¬Gr·³É,&pû‘ù¢ÇäÓæ2ã‡ùž!v6¼Ê¶@„©X„ûwB]'zR5«þhð%³ìHîyPÔé~zN[Ážór§ÚóM¤‰_Ÿ„zÈÔÚ´&Ftg0ž"a•­X·/¬I¤ì@ËSÅ¯+"vŒ¸UÃØòˆ™Ù¼ÈŒãJ˜ûÏ*`í»nmð1fãÜÈ¦ì›OÅýæñe×5/×ÞØÇWâ“¹5€»weÉ
û]n;É×IW		3|ì©q‡ ó°ùíwZç¼	DûÚ¬à¬sÛ9Án«¸ë‰ »ú"ÊuØ“–~””µÖ	ó:bæÿç.í:ÂE9nbåö«à8¸øvMö	×>\Ø19‰³~²˜NŒ.ËS×¹K>&vná,Ù•ó–]»½ìü""""ò³§À±<±cÄcf=PãŽZÅ›³™À÷F¹ee½$.>bš{[ s¢¨©y™šÕÍC46gƒÂóŸÃý†&6NÜÌw®þÉ§Žf&£²Ù½­|rˆy}h[ÞÏ_ªß9…Æ‘!Œßrë­Ï¨vNîVgŽÇÊO¬÷pØ;!âÄ cÜ¬›¹“ãmíL‰c2»Tês$ß=Šqd he*ó·í¾ô‰£‰Ót¼È¤py&¼žÄo=ŠžŽÅIú*È8vMXd&”²JFø¬GÛ1kmšÛ&¾ßzÄŸ$ñX}^Ën}ƒ\¨÷f•GÝØÒ6å™ç$˜àeK•»>l+vn(‰ã4ßû3½-9“ãåÖJž#yqew—,pÖJµ÷…³n­s?XY§UÎIÑÜ5YÝû¡\{äšW`tðÙa¼#…ŽÉbý.!çØweç¼—É0fÒ]òÁêß…’Y±V
ÈÔtÏ´™YûÈpdÛ(Sˆdô¸&ê+Îu<Ìº³›•ò òÊy¸j[û´çŸ³ŽG¶ôlœÈ³7Ø[lÊ–¾Xè1ÙOÄè¤ÍY£z	µ°‹ŸK“‹:&n¶á©GÙxo´À÷yLAc©Ä/æææ~J§Ó¼ú·Ëü©áÕÕî”ðÛ_ÿfµ»°¼V¢p6ó&£z5ˆEJ…ëS¯kÖMyÝ)¯PÝòõ`½ö{QÂs´”õºoW¼ßæÍ(t]Y7®]»ÀW_}µàuüq þõËŸ–µO¿¿ùgeËC"“Ñ;—¶³Ç÷ožSÐXD¤"vöéz«G½^û½8™IÜQ¦býY¯ûöAõÛš¬WDDDDd‰”q¼Ž<tÇ"""""""""?sk5ãøß–µEY÷8ŽEDDDDDDDDDÄE“ãÉª«~âyîNóÅ•ëüð ¶·cÿË<éù–ÿú%3Ë¸lEÛÝfý‘v·iŽÇúk*;;öórv%¾ýø¯|9“ÛfîëÕ<ñüA²Í}Á•ë?ä¬cwãcþêh°p{;Øÿò“Ø½Èm¯°Ò}‘µMÇò í`ÿË/³Çj÷cT?Án›â‹+W¸rå¦<»	=Qm¾·c?wÃ·_áÊ•ù6½'÷ï ªyâ?·1õÅ®\¹ÂSv‡žÀ\«š'žw¢vì?Èn¾åã+W¸òñ·¤·=i¹µŽÇzïÊGÐ¸X{Õ<ñü“l›ú‚+yíW¼ËÍì÷óöXŠˆˆˆˆˆˆˆÈ²PÆ±<ÕOðüÁÝxÒßòñj$žº2wtN¿2oXÙ¾®åwsðåÝ¸2~]ëågç™ù’¿^±ÿø'³iØVõïÀ;|Û ý-ßÎ ü;UÀãc×ù2»ÿ4Wâß™MìNÁ•ÿöñò“Ç†v`6÷­™ÍüïU˜Íí€Öðˆ'Í·Èž.ÚžÅSC5?Xë¥™ýg‰ÏZª?,÷ÎŸáÛÓìÞ}çqgO‹ˆˆˆˆˆˆˆÈâ)p,+Ï²)W03†Ý+¼ý'ÍÌÝë?Øå'ìÉ_¯|i/ÈÏäÉý;øáúu®üP¬TÅöÜMú‹+üõ«ÌÄÁýL_¹ûó³víífû³›G<þñŸ@55 =Í;Øÿò2ûíÛv{¨©†å'v›+ñO€Ìþ±Ã—óYk0››1ƒåÿ9Ë·SÛØí©¡Ú
àV5=ÏËÛ<î¾k¾þ–GÚÁs³¼EÉøl©>d‚ÏËgæË¿rez?/?y—«TCDDDDDDDd9(p,+ËÊÜMû1WJEÓ³¸’Xs2µxÝõ€¯Í.Õ    IDATËgûVï~Süw‘xâŽÜ`oºðrÙ|f½ß'_æå'Ý+ýpýJ™:ÍÕ<²2¯ÍÔeëõžx~7|q…/ÙÏîœ@zõ!vË.¤æ	Ìæ¾„ý»Ù
TÕx žÙ¹r}ÆüÜOîgÇejK[g›gw;¾¬ u>”ãÞŽZÏ%ŽÀ|ÿó	ž?ø$/?_³,5©EDDDDDDD~Î8–••	è•Èµ³]\™À¹oý•"o-XõÏ;&ƒ³&t«hÍÂë¼ 4ÎŒc»}góÓiØ½m7UÖrÕOx€4Ó3Ù>š5Ë”Ã ˜™&Ín¶í®²‚®Õ<ae4OLWÁnøÑ¬‰Á‰)žÜ–›Ùœkû­Àÿ_¿œÉpÿó‰j~(Ö™}(×ý¢÷ÇƒÙM«´ˆ&áY
ËÊ›ù’¿~LÑlP3ØêÈ.]îÍO§Á.ýÀüç6r²Š­ íŽ&v{rß+àŸ³¤ÙÆî¦|™¤,•q¼cÿAv{¦øâŠûóÛ\³n°U’bê¿ÍvvìçànS_\)46[#1õ$Û<V·Ucê¿€ÖfViåœÚÊ¥yì•,ééR+•èÃ
°3Ðó²EDDDDDDDdÑ~177÷S:æÕ¿]æO
¯®v¤„ßþú7«Ý…%ÚÁþ—Ÿ„œš¿+8În ÍÔlóüh°Í>™o}Ë·éÝìÆ‘µZl¼¼Éörë çuÀ½<à,Åà*¿‘iËÑ7çZ_\áú?s'õs®ge6gšsT]ý(^
ÂÕ^nß+Êê-Ñ‡eenç‘4‘õéÚµk |õÕW^÷ñÇà_¿üiYûôû›Vàx=YÿcqZ«c•ª‘…+”¡lQÉ‘õOcY¸r“Õ‰ˆˆˆˆˆˆˆÈºöo«ÝY[8•ªuiC× {63sí ‰««Ý‘¥±'º[+”q,§ÀYü½Cø•[°––OÂ„û‚ÐÝNx¤àrõ¡£…Î‘0íÝ•-ìé¤¥Ãñbw»õšÙÏÎóµKê’÷ä½Ö¿“'–ÔÖ¢-ógr
ö…	ÒBÙW°""""""""Žå:¯¢`nyó½­Œu-G¶ñ$w¦—ÞŸ¥1ƒ—!_·ÆS¤—qK©w0Ö5ÈÌ2¶¹`Ëü™–·ml{wWÛîˆˆˆˆˆˆˆÈÚ¢Rò`Îâ?ÒÄÆ{£Ür{½'‡ØYç\pŽäÅV¦bÅ:¯·…jë/w©Š6¶½{cSvéù
»—žN»¯ÔÒòIuÓIðx ÃôtDÍ·»Û	·öÚÄß¿À`_v=U¶¥TN›ö{éX„oLBwÿô0=×wnõè]Š;}°õµ
?À¡K46o·þ(7¦d÷Oæ…Û|ßuØê»{Ì™dì3¶“»?J)ð™ºÛ	·B2a`øÀ=®AÚGBdFÜ»ÌzF¶Ùìÿ
ö9òÎýW¬D˜I¼ŠÑpÄ{#•|‘‡ŽÇ²òì ¤3àpè;ëì ¦œäZ™ 'gHtÉXxOÅ`”[]Ç˜·¶iÊ(;ƒ©ÑŽÌpb?=§Ý[óø¼Äßïa°¾pk-Qi¡³Õ 9ÐCÿi+8y¼;}ýÐ×†Ÿ8‘}ƒLv´ÐyÜŸi+Ø×fˆŸše,Ž·ÑÞÝCÿé~z ºw‘§o}Öÿ¶§ÔÀdYc³ úÏ±cÄ3ãnŽ×Î“'{çÞ“-TßåÖ[Çrñ'ð5oçþÍsyÖüŽ rÉÏd`0LÏ¾¤d)È`_’–OBvà·»p«5vãöEÙRíùNB5Ö¾°Ïç“fÀ¹Dæ{[;t‰Ææ£4ž|Ô}ÌŠˆˆˆˆˆˆˆüL(p,+Ë
bÞ¿yŽ±‚Ù›w¹_2P\©l©ƒû7?+eaê­S‹i61jf¼:ê×î¯ÃC’Q+Èý:IÈçekG¯Ò±Læ5d— Dx$”y5•·ÜÒyë·Ã½Q’,ã‘ì½kþÏ|jêšØÓ;”$þ†{÷ ºá(½¯º²šSï`lQ½OÿKœUŠ;öRWÉëV¶ðéïH¶xZj
÷¾Èªeo½ªü´dƒ÷—È¸z˜±ÄYüGZh|÷‘As‘‡›Ç²²2¸Ù›Wo2ÓÜÂÎÞ!óïœ2Ë§tÆñƒä*±°†lèpd[ãe½7ßÛÊ˜=†
Giì}Ñ*caä­ìnãÈÆÁA+K¹DÆñƒ”Wž¢BvF{n–¼ˆˆˆˆˆˆˆÈÏ„Ç²òbÇˆ“Ÿ½¹¡ëé"%ÃÊ~õ>
€÷ Y¯×lw	ÇL&S€Á®nˆž†àcÌÆ¹Ñ—dïk`ÔÀ$Á—üx°³Š“¤fÁ„ÒÏ"B™Kß†æ&ŒC,0PkezÑ²ßu¾gŽáL× {¶°1 );è;FÜ6oy„
,%ã¸€¾;¤Žû1QèÞ…AšøõI&ëS€—­ -4ù°j›“ú}Vy‘¾íçØÐ5Àž†ÍKpˆˆˆˆˆˆˆˆü\(p,Fìq«Ž±ÐœïýŒ™ÞöØÇP>Ã3g·êæ!›Í‰Ü¦þ×ÓüêH½-0q›¶og)N÷1:ik
nH2¼oI`òqêŽ[å(I’™¼ÝIŸÆ;"4Æ,VaMþ†YÙc-é?ÆÿZœÈ³ƒJ^Tàêan=2Àžæ!›!›]“y]gŽÕÌµ$¬}±³wÈ,s1±=ÓóÜìáû7ÏY™Ú9“æ1GòâJ”tˆÒÿþV:gË|$z¬`p?Ã…	ã'M2‘ÆcÕ8ŽvDØúI›9žÇÉ¬×ŸWÖÂ©jŸ‚Æ""""""""¿˜››û)Nóêß.ó§†WW»?RÂoý›ÕîÂ²òžbç–QGò {îZeDDDDDDDDD~×®][rÿúåOËÐ“¬ßßü³2ŽeõØ%œÇ3×Z4Ye
Ëê¹z˜±=Yšˆˆˆˆˆˆˆˆˆ”õo«ÝY[8Žå!s_ïïžeÃjwE>³ø{‡h<ybµ{""""""""²¢8–uÈû»Ú–¾Žì¢±w€meìæ+ði4JäÔ2/[a[QëŸ«ÍS‘ÌëÑè§|ðJf%>ø4»N4·#v›¹¯m/·N¹Þú4¿oŽ×¶Wôã:×qo§Þ“97¬cÂwhYgC×€uléf†ˆˆˆˆˆˆˆ¬/
Ëšç=¹Ï3$º0öÖ1æ+Y<vŒx×nÝœ[Á>=X§ öÁ`÷b³ø^°‚©¯|À§/øH|$òa¢ŠÀ>às%Äx/$ø^ŒYßÙ î©Ñ7Tån¨d{æ:ÓÖ{Á`ogš‹òf ¯58áÍ ÄÞ+Ð^Ñë\ç=b³>^(}ßÐ5P8p8‹Q3Ÿ/ìx{çL%K3ßÛÊX×9’÷*ZÜÒÆ¶wzcDDDDDDDDdyýÕî€Hqml{÷(Æ¦9’Í@÷ä;ë¬·ŽÒØ{îrë­cÐ5Àž†Íæ{ÖkóeÖ),´·oþuÿæ9â½ Rã·¡¹…Æ“ä_áƒOßÄà‘èø2¯Î{ï^¿ì^¾ê…(Ñ€Ä‡ÛÞÎko6öÏ¼~¹d¯ßnf‚´—ÿ>Í›þãxå@=U$zÛìçÔ Uõx.¿ÝF0»Óo¨ù3dûÁbï½xgBv©öê÷ú ñ!moãöÊ¨‰a6W(½»ŠšzÇŸÓ§Ô§=µ×³1†.ÔSSTíådÆÀÞÿ3×ò÷·÷`ï’¸
¹û{cóÍÀÄ cïœqGÖkåÖ))pÿ‘&60Gòb+S1€3‰W1Žâï"sÌ‰ˆˆˆˆˆˆˆ<HÊ8–5ÊÈÝæû.; ©w0Ö5Èf wÌ‘]\,»³Ô:¥xOÅ¸;h.qŽfK\=ÌØÅQî×µ¸2YOEÞtgîfZ{›¶ }ëÌ¦½ÌëÏd—µ³wƒVÄõTäMÓš¯½ƒÀ›f&pN9Šh4JôÓüìÜS{}À4¿õ5U0;Í¸Œ®1›¨5WÂLÿý2p™×Ÿy†B±êâíYAdöÉíÛå×yæ™×ƒßnãÃø^0×yÁ—àÃ¼È³“µé¿s™SD¢˜Ž% 3PnîÃ!vÖÍ‘¼xÀ
;`‹+Û8ÂÔ[æ¾¾Ì\;`î{+ ì<Ž²J¯SÜ	|Gš˜·–¿uŒ#—ðZïÎ÷¶2ví6Ž®ÙÌvy¸)p,kÐ	|½G1åV×aR«Ô‡-u@]‹YŸ6“ê;F¼k™MMìé½„—SìõÁìøPÁÀ¨³ï¾ä1ÛÃ÷‚¹ž³\Äå×yÆˆƒs²§"¼àƒÄ‡Ù2 "oR?þmC…·y¡H¶pùíY™¿>¸aÐ«ü¡lÁb;àlóq ’"Çü|ú|ø¯ÿÝ~Í,÷°³Î}ãÁiC×ÓTß%™P~ 5P
T7›õ3™òNEnNˆˆˆˆˆˆˆˆ<
Ët†D×9’ØÙÕ“ÉP¶þ¹²Vgñ÷¶P}¯‚ ÷©oªõ€+ïÃ¬U¯ØþgV°(“q|*BÔª?l€Ç§g¡*@ý´Uî¢¾†*f™Ï¬d–ÓÈ”É(­x{ãLÏ‰fÀúòã³P•—ÚìöÊ P•àÃ`vŒª‡JLvw™¿O¾ 5Cæç|ÅLAæï—ÍLàï'¶³³à¤‡'06s?ñYeµW„™	=¾rŽ¡C—Ìƒ•×ìY&
Ëaê­s$ïü­´o¸w66¼X8p]0¨÷ÿ³÷¾¡Meûþÿëþø]*­M™¶ˆ{$Š4Ò«ßöÞ*Ä‹^™¹uLC3ò™[:G°B¤"ØEÄ#Š©à÷ÈÜƒO$%žg
§ßƒhå;…)$ 8ˆ)2¼íÉ ¶CÓÆÛ>:¿kídïdïükúGÏzÁ0vï¬µ×^{íµÖþ¬÷ú|„ÁT7^éÏ('´§ïÐS–âXæge<-¦8–AëVâ7LªáûÓs¬ » ÐýÏIÿÀ§¹óø®•87Ê”Ûç'
º-CöéÚ!ù¼œ|sn& é
Ãž«Ï“dë•ÓôˆeÖé¯{øe~7ÚàtÎÍRmÌkRÛå?8¹Ä»Ñ>µvCQ7<Igï>±pQf >…B¡P(
…B¡P(ŠZò«««Ëd2|ùß÷ù¯Ž/·»<Š"üÇ¿þÛva[pŒN³s°±:‹@xuÆàec@;«4ëý÷èìÝgN”
œw×¸Ÿ¦ì‰\ 3«2Âh«»”H&Iº\ð½—ÀUc»$ñxžö9nÜK\‰\XdU¿vAõìj«08‚êI%²¼ß{…‹Óws±07>9K{´ÐµFVÉl“Ÿ}P¿üû1¦Ë/{©{•wl,»,s~’ºáI¹^Éç*üg”üÖ6ð\a ¼W¦ x:Ër*t«àyŽbm2¿íeÛ]éò)
…B¡P(
…B¡øpxôèÑ†óøŸü[
J’ã?_üAŽß'þ^
Ç
EMé¿Gg/ü²mþ³
…B¡P(
…B¡P(rìTÃñÿ[Ó
…¢Æ\±P<Œ
ç
xp†gÛO¡P(
…B¡P(
…â=BŽ
ÅŽæjÀ[¹qX¡P(
…B¡P(
…B±!Tp<…B¡P(
…B¡P(
…B¡P˜P†c…B¡P(
…B¡P(
…B¡P˜P†c…b§ã¹…{|šÎÑËÛ]…B±a.ãŸ¦ó›[ÔmwQ
…B¡P(
…B¡(‚òq¬ø;à2®q?Mò¯åG=$wbp´þ{töî“¼æ—á3¤mlOuÃ“êØ-þx÷”——.°^òâmøp/Îþé ¡>˜éž f8çxf‚BÇÓDOL± '
úqÓ @†ÄÍ»LEÄ)o$„Ol—œ!üÇV†FÜ¤'ÃL\+RŽFñWÊöwfÄuÌ×ÖË•žóóá>fc¥3+‚ctšýÍåÖi<·pv±^Ã¶è„ðµ$ˆþNŽ8™7ÔEÛí!ž´á™þ}bWÅênGPËöRâ½uÔPö»W=/Aª OÑßs’5(ƒÞ%7þžW[îêÊàe`Ö‡¶’0÷«c„ú´ì¯ôº0—M’Ÿ¶"äõå_™x”»çDN¦þÛâ–ýn©«Y¦É«WýZyu Hm¨³¿§¿§6Yl¼7°	ã”B¡P(
…âýC)Ž;ÇèFÕ¶×I÷ðìÑëš•©öØstÌOñl¸‡gF£qü‰áž}}Ýð{û{ZïãÙð·¤ÞUrýÞ.ÚÓpÈÒ6Í‹oÍÆƒÏÝ4¬$ˆv‡	w›
·].aðw‡Ëøpö20+?f»EšÒèmøF"o‹Þ?<R‹™í.Â{ËÖÖ|w7ºøP-EÞo$Th”¬–±HÜîŽ’XÑðE¼ò:ÜÈ>ãf‚ŒËÇÀØÊ06@(»xµyåfÌg[îªÊô3d0ÚšŽ÷iÙ¾3Ï õ
àÎÝÍöá›	2@fîy•Fã6ü}hIÙçN¦hðœÄDöß)fºÃ„»gH5º9y»ÍÎ¦ß-z-ë4¦ö`¼Öµ‰Ü½vÏHþ\µÑ¸íö>›{z_Ûd±rÛ—¡ØxŸÃñi»Þ=%%ÆŸ‹)
…B¡P(ÞG”âX±ƒ	°ç›óhõ«¤¾“FSÏ-ÜƒYŸ‡&§PÕæÔ¶úïeòù©<c«MþK†ßõß£³·™Ôw}¼A¨mv“èyšÔÁ«â÷q©Hå5ËÎ}B
\¶â÷ õõ°–|e:êf¿³ÜûÙ8™Åp wÀ¨&î ÀG(‚4·ÑÚB1€v
d˜Ÿ³¸ÐáB³Â\’Up@#ÅŒÙRq5æ†æ'õ9¬îˆôp¸¬ÛòÛú³uŸw‡Æ§sçâBý]7ÿœûD{É>«rÚ¤®7¨Ì+RŸX|Ë­¹¿Mjð|³!|èu.”†Žd
\šø®J3¥ƒœÂM(Õœ‹iÀV%é„ð‘"åÒ„‘,«ô3«MŠu]›L¡¹Ä/rjH³Ê.{|l€P¤’šËÅêÁ¦îŠ"žëGKVÏÛþÁv7€m¿fn?»z§éì5^Ë¼ó ü>Ââ½úéjI½	'GÜeÖƒ=mšHó6°Àó¹nÏ¼ÀdâÒØÙî h8ì…`kehÃÜAâf¾
°Ñ’Û—;FìÚa½½DÞ’qãÐ„á±š2x?Êï§‡CøZ
Ï‹¼eÏº’†ScY;i ÅÌ¹êÌÆú¢`fNæ|ígR}>œÇÛàÜw³ŠàéÐZ4Qž’ý®¥Ò4:¹NåÝÓØ42$þX½rWki€•yY1~Núðµ¡
í=m“EÞ%R%ËP0ÞñÜBsÂò£Üü%=÷zýtŽ²és…B¡P(
ÅÎAŽ;Ý`be4ÛMSóS^_€áIõÞÃñàŒžGC_÷ÜÂ=èÇ=üŠÄxÔæQ–“_¢ut >Ërªß7ñ {¾éb—4ÄÔ
OrÈõŠ—__FžÞ}Yƒµctšýƒ÷X‹ŸÙ:÷Á£ž%…áYë§è6O“q¸ã<ãçY{ñ-‰ñ(é¯{x–oª…!Ü`¼ŠÃRÉe4ŽLqqð´{"!º…‘ÎdÈmôšõI#"&c {$„{D7à	´–4Ñî	¸=D o ïµ	Ròãø@v+qÎˆ(®%W¦-Ñ×&ŒY}üÆ˜è–F†H¸<•šç®ŽÝ…îLâgxö ¸«Š]Nøe¸‡tÿ=:{±ÇkŸÚ´Ésé£yFcÏ-Ü½Í¤¾ëÉ-F|s‹——~ Éh„ŒFÉ…swE]€Áà3ÅÝÈTQW
.˜é Ô×…?c*"Ò	„‘Öñ¦d‡xíÆ4^ú4ÓVw.
&Ã„¥ÁúäíçÜ=gxFHóW~žGr[âMmÅãÃËD¤2ý„nä00fB¤@c†pwJ—?÷2,^ÖuWš]NùœÏÖÕdÒ¾H÷ñLïÛ
rËõku£Óì?z‹ºxs)Ê›-ãŽQ?MV‹SEßu›÷""
…AùP­A "v¤!Ø*úÛ”4ôO“Hj¸[Zi«ªL¸´áÿjËÏØ4 %
œÕ”Aïs½ùm.2ÅŸ;	x„fAô…ù®(¼ø<
|ºa÷3
ºAX>›‚GpšÌÅú]Š¤‰g80ëË.èœÉA€0Äj°’àùF]Èd
ÔrÑÞß6Y¬ÜÄŠ–Ár¼7Pwô »Þ=5ƒÎÈyŸÎoönÜe“B¡P(
…â½@Ž;i(}'
n¿XþQÿu	:šÙå¹L½Ö^ü ŽÇà·/ºÐ‹^i}ü–Çý4÷C:yŒêaùG¡XK¿*HSwô »xÝ¾™ž{
Îfvy`
@ßÚé)ïnÆá:i0ÞâHÄ7’®.	c›ÁW¢A)<Ñ“êOGžßañ¿ÔiI¥É~·4 
ðS˜pPæû•Ÿç‘çio€äÌæûÿÊú 4õNÓÙ[ÒX{ñ'ñÛÂÈ—q
o“M½Ó4±Jê»ÜuDûÚ686(¾ˆ
#b-îÓ@&>#×Ì“/PÈ>w ’OÅ³3ÓU‰ž ¡Y¿§+	f®~'U>[WÌåË¶•¬q×Ë€@.VHrÏIW%¶±éÌÿÀ›8€h7u{ÔíµïÒ%Þ?½_+7hÞzzœB¿fì;6ü®W@ž:]_8X8÷grá2+yî@4?C˜éž‚ˆ{ÃªÌÊÉS»Kå|Érëiû4HÎlØ´Â8¨Ó @"q…
\óû¬ï ˆ11y€PŸ|—V2Þmþ¯¤;¢ª•Í%È7X»ôÅ(ý¼0\§&ËôãlÓ&Íê™¼¾æ½m“5/÷e´ŽÝ&µq–ør—Í¡ñ{‘
…B¡P(Š÷e8Vì@®“~ÅžoÎoÁ‡Éu–æýìo¿,>Y…®F
`ÈmÙ,×¨³ã(¡8¶ÂhÔóÍd>RÝYcƒIj1®4?_ƒÜv\‡…2s3¹Nr8çŠd¾A®Æ,Ï¿¦É¹Žx7^ÃÊhçö0*Žk‰ðª¥¿dª¦N„™’F÷H÷ç%‚B
˜N‰ uå•ÑRÙ<fýÛ•u£‚¹ã<ãŸ‰vSÅ»^5&uºÙä_Â]É<©È[Œ¸Ñ<Žœû;w7›ŠYížÃ¦ÜÙóÒ¸Wƒ€g¶Œ
˜È‰~ØhL­\›S˜æa\0ÒÝÃdÝDèïþF‚ï•B¦³õ)ê×h(÷~î¦OËslÛ¤ñ™ë‹žoYˆ@ú}l“›ô.Õ
»`¬vJé}Ëfõ'
…B¡P(Š‡
Ž§Ø¡Dysé[Rïö±|’=–ê]éZâÝ+–ã¯x÷v¹Ž	Ã®Gª‡çJûáKÿå)kN?‡:vç”ÌYÅMV—Û"¾þë°æ~ñ·£]/C
n{3Ñƒìÿ+ñá·pî.ÑxF(ŸºgH‘!q³VFcÝø1Ïó,ÕÇ´I•ñÏÄ¤Y¨ÐjqÝ2xp†gÃS,»J¨Öí)£MÎá—yØÕñe¶ëíKäååÍ¥¼ç7\{£qéSsÌ—õ%\‘)îvGI¬ -­…º_™_ê'Ý@"ýíÊ`Š¥ŠåoÅÚL„¡e•ß~ŒnCÿ ÚÅË«€P6Wó®—F7ÍUþê2ŸL±@ŒŸ“ä|öêjÒŸ6É[³rëyùÐVD7Ëhœ¥G»ñoÝÇ-¹wè‰…1wl€ÐlˆP¤ò·Ct:#ûwo$€»1ÅÌ¦
äõÂÿ.ÙgÝa$ègh6Dè¡¿òýc>Üºbû}m“›Qn1÷Éî 1ÒÎAéÂK
…B¡P(þnPŠcÅFlÍ_fÿ§—yÏÜšô Q¼æéÎâÍ¥ƒÔûeà2X{ñ­0öæ©ï
Üè.ê_³”UØ\'õâ‡²×¬ºóÁ^î4œË•¡¶jä<…©ÓOç¸_øNMÚßFŸÉXlcßh}!B} ¶LK£Äµ	¢Ú¹ƒqfáÜ]f"!|ú9}«uÞ–d÷H÷WPÇ(5_ó‹!Pú/OYÌŽg—Y´H›Ìý*ýõ·¤¾968	Ú—Aí¾ÑÀˆçž’2ø5…+õû•„ð›Yò*VîÄsÐ ÝfE.™xT^†Äq¹›‰xw»EÖæÒ1ub‡Ñ'*fÚeÝ¥ë¡$òÌîMˆÛ÷»wóGËÜsÄ/útšýyÁñÌù‰öUýB‚ùù5ô…õ¥þ x»îÆ|ƒ¦
yï¦±®cÁ(­í¡TlJntÃ ý­ç®W»r·Ý>)QrmYô¨-ƒ5f7-"O¡¤Ÿ`æp_¶Ÿ„ÔäÝlxk@JîÎÈc.Miˆ-ÕšênÅÐwŽ
Èãšá=Û@¿[$ÍÔï8GòêTî& 3$žXä,6äÖ³Å¼ÓìNç}m“öå.Uú;'´×á    IDAT„ÚØb¾àhß·%Az
…B¡P(;‹X]]ý[&“áËÿ¾Ïu|¹ÝåQá?þõß¶»ÛM¨aá_¸à:[àƒX¡ø@.(6s»ûV#u–þÎŒ(V~ËßÞ×rW…µßù•÷¶oÙ‘mRôk%Õ<G¡P(
…b;xôèÑ†óøŸü[
J’ã?_üA)ŽÏä½Š\]…lT¿{ÊKõ1¥P(þîÐU—Aw4ïk¹«#«`ÞLÿË;]=¼ò¾wr›Üœ ¬
…B¡P(Š÷¥8~PŠc…B¡P(
…B¡P(
…âÃb§*ŽUp<…B¡P(
…B¡P(
…B¡P˜P†c…B¡P(
…B¡P(
…B¡P˜P†c…B¡P([Ìe\ãÓt~s‹ºí.Šm·‡Í†Ûî’Ôo$Dhvp»K¢°ÇËÀlˆÐC?m›}%Õ pŒNÓ9>ÉÏv—äÃBÕ«B¡P(*8žâ=ä2®q?uùíªÅs÷`ëzH>xŸÊPCúïÑÙÛLê»>ÞÄ7÷RÞH_K‚èïáäˆ“ù2eÓÕ$’PäˆG¹{Î˜[þ‡Ü‹3„:@¨fº'ØŒ0S¶õô34â¦ÁðÛÔd˜‰k¹rkòx¦ ü…dfY¤1ŸKîUÖC£<e
¶e.ƒñ\µÏ¶bÆõ9HÜü3|À9WºŠÖhKœÉ­Ê¯; ‚`\A°ä³MO†ùùp1ë¿Ggï>ùÇk~>Cº¼”Ô
Or¨c©ò<jXkD¿Ú$ÿZ®AhÝ&óÚ°ÎßCP9¼‘>—üCÖCõïs.ð,XŸ­ˆík·ªM–Le3f•¸NÞ3Ýd{Ø*JŒYâYYL¬4è¥ý¸n7n`Þ#ß§] ¬–œC:F§Ùï”ÌOñìëëUå£S´MŽ
:ž&zâ9Gp<)=ªjNd3(žß&<É•hŒS-qn|r–û5ümY×Õû›sž§ï<æ¢'[y|ï
pU$"–KDüÆ'œ½ŸŸgþñÓÜy|‘\vßã
\µ,ÇJüŸ2´Îï
ÑØ)ôRäçW’‚1e»Ç,…B¡Ø”âX±ãqŒNÓ9zy»‹¡¨©ÅÌv¡¼]Üš+¯‡‰›aÂÝâ?ñ±Ó†ÿ¡-9#ŽO¦hðœ,©[8w7›O4žÉ¥ àA^'JbEÃñŠDc>Ü$ˆv‡	ßLqù¤ò2¯¦s[ølçÒTv¥"uô3Ô§‘šu4“lÀý•Pûë.|3AÈÌ=/káÂñ¡­dÌåŒ¼­ÒÐ`ÏÑ}âC{¸‡g57ØnG®“îáÙ¥¬ç{ôz£…ÍbÝ&cLt‡	wÏB|´‡»Ã&£ŒþìÅ»÷a†	w[û‚~º\dß½ª~Ÿû?C«_%õ]Ï†{Þ/_[Õ&udÛ¬Á©xÞ¢ÛŸ/qïCmé¯{x6¼É‹æ¶cVþ‡>A?'=Y)ó:¶ãz±ùCõóÇ§]ìz÷”—Ã…uhU¯âØËùÅ/îáå‹ÕŠ®_¬M¶iù/
Gc†ô­‡"s"o$`='*2¨ù³ðÜÂ½SÜ§ïÐãJò½×‹×û=ÉF¿»sZœ»å¢â7¼x½7ˆ¯¸8½œæN‹ä÷^¼^/ß'ñüî"Õiî<6¢
\‰^ÄCœ^/ÞqV\§ˆ^1¤i‘ç¼^ƒÑØ.¿ÓÜy|
Wò{¼ù(R÷ú;Új£îNn
…âƒD)Ž;]¥²Jê;¡J0©:ÎÓ9~Þ=å¥4>X©„ºnwV)$~³Jê»?À9Ì®Þi:{1« ,Ø	eÈWAŽÑiöóšeç>qÞP¶|åOþuê?¤sp7fÅ‡ùZYµ¾
>ÿš&ç>ó¹R,¾eÖ‚Ãfu†Tn´Õn³îÜ9òÕ¹9E‡È+M*©¡¹rù½ýÜð‘æ	š¥@EšYLJßy¶e|ˆÚÔƒ%Á#8!õDê_4Ð€óxD*11¤y¶ÛŽì¿açsÜžx‰»6AX7˜EÞ’qãÐ§[Z…a ýƒ¬ò{rŒN³¿ÙÐ>+RVˆ²·~UÎ•4™“&”k?“êóá<ÞFNHñTç[[€F'G‚°`0¨´¿›)Gí76 Ôc“ó8ûœy'e}.§Ü:©¯‡µä«¼ãÅÞÍƒ¬ÏC“s7 •’I£ªk7ûÇ§sçJÖ·uLý¡ŽÑi´æUvÕï†y½?*åuùÎ yý“²ßZ2ôW•ì’¨ä=ËS‚åÔþB	æ$CCc™d
\
Ù¾Ã¬H³W´ó,B±4¦s¹>O¨ïR¤ÐÐ
çL»,TíÈ0o|u*ª;AÝÞf`‰µüçbR¬—³êJŒµöäóS<ûú•iì3µÙ[ÐïôMvT«Â·¨WÓøg“LÊáü1«`‡Jª´B±T{(¢ ¬e{¨3ö†ºÛšöp½¨ÊÕ\6sùªUÇZŽYc>¡.}r€PŸ#ï÷mø¿rÓœa¾2®à=¬ÁJ‚çÐÇ=à
¶–œ?T2ïØÕ,ýj®ÿªë§J,ÚdîÑçŒ Á?ÏÛÖƒ·Å¦î€.ÈÄå¢q»ƒ á°—6Í~þ ÕúYÄà·/ºÐ'¼:5)w}¡áô_ôÐ˜=!Õ¾¦ß{¸‹qÑ¨ø57(„í¸–O²
Þ9WÀÕÒ.ŠvÄ+q¦ï´ÓÒ4á
W9›KÄœHD;À•~<‹ßã>BìT‹ñFÙM5s{"»+púcÚWˆß°POÛæ'iù˜Ó Ó­°hõ>~~ª°{n¡9aù‘Å÷ŸUe5^èï‹Þ/Éß¬½ø¿üæúWûïÃbíA¡P(6e8VìPt§ùC,ýuÏl¶Õ
OŠ½á¬Ëß¸‡_‘ïã—Ñiö÷ÞÃ‘\B3õâQÞT¸
h'”A¨ r_Çè4û¿¸Årü‚8àÜzx&
EZ?$È:E/_>»ibŠgÃòûÓË¼‰¿bÏ7~šLšó¸ú£$“"USó/‡ÏÀð$‡:>ÃAòŒI3N-œ»KX»küX
ú9éi°0ª#¦µ«Š)îF¦ä¿…áÆñË*5‹QÂA„Qçs/SÁ0±"Û~cÁ°üè6O‹°^äÙæÕÊª p„p3Œ;m·‡´Ì“XqãnÑ ¨6ÍlÐJMÞ†u ´h-
`eò;€¤RâS¿OàÉ}ŒeâÑ¬Q¡ø=’ž{
½iò êK*7’È›`Kôv™Êå"œŸ­-
z][Éj‘Z`ež”¬'Ç\‚ŒÇ£Ý˜Ò‹ÏÓ É§elmÃ\õ2w„!Ó¹Ý2‡H¸¬í§V"Â8K‰ws7M²/ªfÿÑ[Ô=¸@"^¹«
û2De(é¿Ggï—ìñDYvñŠ—š9ÔÛÌ»ï¦`ð»<ïã™ÞÇ—q}ˆ²œü­£±Ü‘S?¿‰ç-†FcE¥m2ûŒò·:
‹O‰ÎuðÀÌÍ]#4@‹ÈíÅ'bÒ0``,ÌÄ5/}ZYnerIô3Ôç q3ÌTDö‹ý¤NÈ~°QƒÉ0ák¢ëºÝFìœè'…a2ï:#¹èsr†ÂŠëÎcµ0aø8îÝg^`¼ÇZüŒHk5fk‹áõÓdaP|sÉn¬
ˆðöËÀõc@Ñûím&õ]O®¿ÿæ//ý@SmR—ýµ!e¬Ø˜)5Z±kdÛ½ÕâFMÛCÿ=u ëN¼Ã¢îŠÌajÜˆûCsšõñ>Ù¯é×û“ì+/ã’í'ñ@¦•í8]Í˜umBÔé˜…ÁvÌ‡»1ÅÌ‰DÊ1KÃåâ[ð20ÛE:žBó8hýwŠÎ*÷˜ëõ~:Çýƒ–}½VC5ó¨X0‘]‹Qî>9ÂÐˆƒ§ÝÄÆYÖƒÛ¾î®‹ùB:µu‘Hj¸[Zqc7hƒš?‹(o.EYfÿà4õ.Ù‡¾ÃãSB¹¸ª»ŸIL]áâáTô
W¼Wm\Uœ¾ÃãS-Äox9{_þæñæ>9K{´Pµ«_7ËéÚaen8ÍÇ-Àâ_¹Ï¢±ãI\ž>ÎYjÓôˆDÌ\
à¸’÷ŽŸþXTë_ïãvÏ"ñ¤OËÇœ–Fä–þÇÄ.6šËf—÷9û¿{x|Q7ž÷Y¡rÖˆkÝßÔ=˜›³RüûÐ~¼¸@ÂuÎ^?®þW¼;j¾žý÷¡M{P(ŠMBŽ;©yggà´"@“k7ÔwqHªè ÖäÿÓ_Kê›óìòæ¬ÌnBL^fEo"æ!¾mÊøQè9ÆGõÅ>†WIýå:(Ló£4R?xÁrï>êö@Ž—”ùe?´ £1©\¤²Uëê+C5%1©± LÛüR<•ÙS'ÂL±9Ø=ÛtUõ`4cA ò–ðOòÐñíóÒoŸÛ.¹{ Ôb€0çþLâa k Î¬Xmù,’39#‚TÛè4x|x©Òôƒ?‘:zžŽx?H³Ö^ü ÚÓƒ3<«bl©ZÄ˜˜<@¨ÏGhÖù.$€#éwòÉ†
Œ)„¯â?–ã_ò¤øØ?· Á#•ß@¶"ž[e¿›åŸ3÷)9CWÉ!C†­ÆK¿²NNmX?¸›zPEÿ»>þËã~šû!4÷Ko.EySy–U!”`]°’FüËAkÐ‹Ã Û—DšR¤W@óÍZû0-Ä>P¾– §.XI0s
L‹¶äŽ2ËV„¸ýÂDÝÑƒìâuv;ozî58›Ùå‘c¤Õ˜U³A)·È¼ž^§‡ËÛåÍŸ¡õŠ…‰õ¼²Ú!îi7Úà4Ú <øNæ·…m²øXa^R%9S-EÚƒ£}¼{ÊrrCÍ¹¾j[Ûƒ1O9ÕÓôwå²®þ`Iü¯Ê1ËšÜâQðV”¶ÿC7L†™bÀ´QùüÁšuãâßR©r£ªy”‘¼9P¤ŠÔægÈ3ÝSq›ÎÙÏjÿ,Ò_÷ðrx’C½Ó¸÷~Ë¿ü¯vI2m#	¾’oì-Ñ?œîi§‘F<cÄ.ÊƒrŒ¹ðWsš;¿óÐ¸çÆÙû OÀÇÜyìï½œ%J,ï½>}çwxìÔÂV||‘ÝYˆÆð ÿòqÐHËâ
¼ûâ¾OE¹rµ„ZZœu=ý\á>×óvr­cwéF‰ýx<8ÃË½“ê=oîoÊ ¿=ì4W@
…âÃAŽ;ë$¥êõÐø½Ê0ÙºxÛ¬·„Z–A~xÐ¯Ð=BseÝ$Š)Dì1+ý|³!ºJ¨ôÚnÊ*µ¶ëg[]=‘$>5ÜíóRuíÅgt¿P×~&Õ§I·&cº7ÂÇ¼Á¦T#æÆ3*!å–g¡j¬Æ#§4¸ŽQ×ß,\d?Ð‹¨·Š`T ™ïÝ ÞÑƒÔ¥H‘—;¬hÌ—·m_(ˆs[N‹ÑÆ‘ö ßl(»µØ=ÂÑ¾óýå®ÊB¨ïÌ[,7«#ºÎÒ¼Ÿýí—©ÛkTùWo%ÖªbùžÉ6ç	áþ¼T«Ri¬ÖÊSo8Ø”LF­ŽótŽVzñàË½~šû¼sífíÅÊœwX¹§Øº6¹sÆÀí§¦í¤ò|•Ôwù†!›gYå˜e‰Üé“uM€ÐÃÖ"ÁY…\·ËC*Æ³.©þOç?mpþ°MT>2ì¤pÉ£¾‡~R¿·›G%xËëº»üÇ¬Íãýn~©&N,:9b9XàíáÍyz}èuð/w†m{úÎcC08T®¬«X»§(0BcTëùÌ÷ùëâE<.-òw§ï´ ‹üõ~®ŒÂ²90ž%÷ÿÊâE.O‹,ßiîHEó¥¿¶óÀœð‰ÁÕçIN¹ò•Íù\!zÊ•¢']{ôÜ9ÍÕ³}<ë¿G§A¶nø˜˜³V´XdïÎ¨Î±ÛâhiòÛƒB¡Pl*8žb‡åÍ¥oI½ÛÇþ²œÿGY[œÇ¬ƒŒÊ-Ýß=…Žó¸ú7¡È[^†UÞ%Én«-Iü~{MGo•­@$.|×5µËà„ý4±Êo?_ÑPÌÿ•=¡¹6‘
è#\”Búéóå"^o1vÏvCõ Y¿Æ™ÅDž3¿‚ÜúHV;ÿÄ™=4Ê«Ë§ívrË¥é:28ÖýƒToYIµ0på?—‚ü*`}ü–ë»8Ô»µìv`„z+¯îj¥jò~î¦AªêžÌ“!wBq7Ÿ3Ëv•«c„fC„ô ‚Òàg¨'ÖÜh\å»¹¬¥_‘
ž·‰¤ÿò”5§_,šé;ˆòæRþ{¶ÕFc±À#Ô÷6D¦¸Û%±BÖG8 1fC„úi+#ÍB*
htÝ.øõŽfý×%`Í²oŠÓWRqºˆv!‚m	esq®“z±JS¯p‘•*Cµ¥ß“6È;³Õm²vc`ì§4ºñÙŒ!µb=½
õÂMQv·Öü‹MúYi{°ç‹.vÍÿ`~nÉ%ÖØö©EÀæZŽY×&rãHw˜™$œ1M´ïc?¥ÈÅ™ÉŸ‰•1Ø©T>Š1Ñ=CJŽ½Ñx&WwEêÁ¶îˆñs’ì.“l¼‰ŸbEçµö|£ÇÐÈÕÁý¿.Ò@zú=à¤‘öJ?ž2ú‘Ÿ‹=¸«tÎøŸî¦âJô"žÆ$ßbV
_}ž$ç7Xº¤H>Fé+Q.zI~_†ÑXä†ÈnQ¸´n1’Ï¯ÂÜ"+4"]+KßÊsÒ·rq[L¾É„+ïô£×ìê8Ÿ¤]¨MsÖØ@ÿ=ö;_óËð·¤èâPYá­ÛƒB¡PlJq¬ØÁü7}z™7q}~Ô‹cÊ< »0nZ~ÔÃR»>°^‡8¤>fï4.ä@¿=V^`ºP¹Å_œFã5©«2 \©ú<Hý¸?çJ£ä½^'ùÝ^ÜƒÒ‡¼Ÿ7q*ÚBZVA~FËØtäÇ;÷”Ô¬O¨;WÂï\Y‹1ï"`¯rÁðlžm¥äÕƒQÅ8ubÇln;|j2\rkyþ6æ¬ïÊ¼ë}Z
w`,£×‘Éå@r†»2Š
%i“ssž¦z0>ïÈwÛ„úB„ú@¨9
ç‡5 ÅÏ;N-\ý»©»}¨,8žurý ,¿xÊZÇÁ’©Ì
2Ãò™Ü^4õNÓÙkPèèÁ`ê_³´YIyïEÎuÎL‘DÙw3§4×U f?Ââ¸¡¯‘.z…¯di~°Osm‚¨6”ë»@EŠ)˜óü5»GB¸¿ª¾Ï«ŠìV\}‹ÿk~.Ç•ŠõX[lk°UÀÆ¬ñ¯ÈX»þã+Ö:ºØe4`æ¹b1µIýžô²Aõ
SòûjÑ÷æú›1Ëv4û¶Ç%úìÔd˜	Š´½}eûÃrÝ«TF66€>Wz÷”—eÕ[
ÛCžBXœFûBäÇð—B1^oî_“rþHõãåè³!¯¿Ùð»©??cŒÙ7T3¨
ÛzÍóýíu¸ü¨‡$öÏ¢ªzµe¡H=Ø×],¥õaÀÛAÌ—ŠÌjý,<Çø¨ÞBí~5À÷Gbœº#Æ
Éä
ÒÇñý³ÓôÇNq*ãÔJ\ø6&}§çb^p¼«n|ü˜‹ž‹Ät_ÉïñŠ8|¸•Jd—¸–H$TÁz~ºë‹•87WÑÕ¾ ®S1b§ôKy	Ì™ƒúy.ÆˆýN(™¯nðñã‹&ŸÄ¢hgù¤=J,›W’ï½Òˆ}Ú>¿À÷Gˆ:E,W >1Þêƒ3Ò×º‰¾£Ã¼CÎ„Me7^Ìudý(§‰’þñ3´^?£d}†[ŽYvíA¡P(6‰X]]ý[&“áËÿ¾Ïu|¹ÝåQá?þõß¶»
…BQc¶ÆO¢âC òÀXïÖ?[Žtµ¢>Ä
…Ba˜³~”ü°æ!
…bçðèÑ£
çñ?ÿø·”$Ç¾øƒR+
…b{È*Á6 ÒSü=ó[ip«®ÞÀŽE
ÈªŠ•zK¡P(ÅØÚà§
…B±SPŠã÷¥8V(
…B¡P(
…B¡P(>,vªâXÇS(
…B¡P(
…B¡P(
…	e8V(
…B¡P(
…B¡P(
…	e8V(
…B±Å\Æ5>Mç7·¨Ûî¢XÐv{ˆÐlˆ±í.IíðFB„f‡ð·»$Û‹ctšÎñIöx¶»$ª^
…B¡P(>LTp<Å{Èe\ã~êj$IÆYÔCòÁûT†²…Ñä½‘¾–ÑßÃÉ'ó7ï2© ]M‚Hy˜õáˆG¹{Î˜[þ‡Ü‹3„:@¨fº'ˆmøz%°«‡ Ÿ¡7
†ß¦&ÃL\“èµ ü Z¦<S¹{2æeºŽ¬‡Fy"9C8Ë•Ûe]¶jŸmÅŒ
ês¸ùgø*€s.ÿ9Z‘wOÆº³­‡ÂtæsÅmL#C"ïÙ¦'Ãü|8„\½–¤ÿ½ûä¯ùeøéòRP7<É¡Ž¥Êó¨a¬ýj“ük¹ý¡u›ÔŸMÉ
žÇ†é½–õPýûœf
hXã±v«(ÑGµÝ"ài°ìOôså¶ÇìïSÿŽ¹g²ãÝÆ¹l A Œ`‚Ù ¨`‚Za>:EÛäØ ¡ãi¢'žsäa Ç½níê¡XÝÙæñÂÐ¿Í¯ÖÏâ
ÑØ)Zâ7øäìýÒ·)TZ†ÓÜy|O£ñØ
ñŸ`N.·ø=ÞÀÕš–¸&yÌ×?°ï…B¡P(,P†cÅŽÇ1:Í~Š÷šÔbZ¶»v,ðvÜ[p¥âõ`þÕ¥¸.ß +?rS“aî
A?CòøÄ5™wß ÞkÄÆ|¸Iížb!èghÄÇÀXŒ‰k†³µÞHŸž¦ä=Õ¹4%ñF¹{’ñ'o?çî“#öõ ì'gŸ¨Ì èøÐV2dŒÉ‘·¤Gªi]öÝg6¼l9µ.Ãu’ÃùùÈc&õÆ°n“1&ºcØ/ ÁÂ¹»„kR‚ƒñÝ5ôÓå*\©ú}îÿ­¾|càV“þº‡g›}‘"}Tþâ›‰ Ÿ“È¬`Z<´elÀ0&#¤/â%Lá(û®`LŽ'ñï2©~œs|ÚÅ®wOyyéëyç¬êU3/¿@"®/b•ýbm²Ms i@ÃÑ˜!=Â0kSívu3Æ1pÎ<nz#!|_ùy™b¡ÖÏÂs÷àA~Û¡ïQåÜçì'÷áô_ô°ø½—šÛ…kE‘º×ß-7ê~píA¡P(ïÊp¬ØÁèª¥URß	ƒI½ÒqžÎñó`øˆ±R·ˆ“ÝYõšøÍ*©ïþ _äTQ»z§éì¥¤ad'”!_™gTìCûk–ûÄyÓGžY	–úO'éÜYd¾VV=¦«"æ_ÓäÜg>WŠÅ·,ÐZpØ¬Ö‘ÆÓv£ºÇM`Ö;G¾:7§ðy¥I%54W.¿·Ÿ>Ú=B³(w3‹)à@éû€"Ï¶ŒÉ½M=XÓÆ‘ö2ñhE*^ïa
’3¶*Y‡Öú¯¤I\› ¬ÿ^;M¿3¢§Ñ©àž£Óìo6´ÏŠ”6iÞF õ«².%ht ‘»‹tj8"ÊbUcÐH1S©
ul Ÿ+CbrgŸ3ï¤4h®$ÃƒÔ×ÃZòUÞñbïæAÖç¡É¹êÝ¤Qå·›ýãÓ¹s%ëÛº¦þÎPÇè4Zó*»êwÃ¼Þ	•òº|g€¼þÉÙo-ú«JvITôž™•ù*|'È$SàÒhÈöf…¢QÕX\ÑnC±4¦s¹>O¨1S¤ÐÐ
çL;,¥Ú4a~Î¢Õ no3°ÄZþs1-”³êJŒµöäú8WDåZgl“€IQ_¥:Ö²
úéjI½	'‘Úðå¦!9Ã>|e\Á{Xƒ•Ï# ¦@ã¼ÁVœz"õ³šhÀy¼
"¢]V2Î	ìj–~5×ÕõS%m2gŒ×ç Á?ÏÛÖƒ·Å¦î€.ÈÄŸ‹¡ÝAÐpØK›æ¤OeŸÐÚ4:9­ÖÏ"þ¿}Ñ…68	äêôJ4Æ©ìæ"±ØEX‰sã“³Ü×²É$.—øÑJVlVü®”Â§ï<æbV
œS›I¡Ô-§¹TI¾÷(e#.¸Öb‰¢2ˆÊ­Â$ucô•(±S-ò>Œ*c½“;B4Ãe¸§,z?5?UØŽ=·Ðœ°üÈb¾oÕGYíÒÑß½_’¿Y{ñùÍõ¯öß6íA¡P(Š­@Ž;ÝÀiÞmT¯äo«žF¨á¬Ëß¸‡_‘ïã—Ñiö÷ÞÃ‘\B3õâQÞT¸-l'”!_­çfÿ·XŽ_œûàQÏ¤¡Hë‡äY§èåËg7MLñlø•øÝ§—yÅžoü4™&¸çqõGI&Eª¦æ%^ŸáIu|†ƒ(ä“ gœ2*ùîA?'-·î
#¦µ«Š)îF¦ä¿ÍŠ!†c1J8ˆ0ê|îe*Î*I­”†9UžÁxZ„õ"Ï6ß¨VV= Ð€{$„{ƒQ[~ˆ¶øšÕ„¨äVfùa»x gÓó‹LñçãNºñœ‰›n/Æ ©”~ÆhX3§)~O…¤ç^CïAš<ˆú2*y¬T§z;ŒLåò?Qž.4œáCó¥    IDATÀ¬ßlHd’3òùÚ×ƒ®`;5JX+ÁÍ´á?®	ÿÜ†Ì¥JW b£þÌÃêÃTg)ñnî¦IöEu£Óì?z‹ºF•_ù®*ìË5«ûïÑÙû%{<QÖ€]¼âå£fõ6óî»)<Æ.¤Çûx¦÷ñe\¢,'¿Dëè@<‘œúùM<o10¯*m“Ùg”g¸ÕiX|Jt®‹€fn&è‹ZDn7?“.IŒ…™¸æe O3’KR$MÐÏPŸ#»ëÀ	á{è'uBöƒL†	_ïi×í6bçD?©ïX0]Ç`$}N®W\w«…	ƒ±¤wŸymðkñ3"­Õ˜Ud¬-†cÔO“•¹ˆÊu}¼O¶cýz’ïÆe\rlN<ie¹ÓÕôQúñ ¿°àc>Ü)fNÄ RŽÙXïßßÊ]]¤ã)4ƒÖ'»Ðv{ˆ@Ë<‰7î±tVé8g2¬×ûé÷ZÕ©‡í¨fÜŒÃ	Ñµ»HF<íž 66@È²Üöuw½Uô3©…¬û‹DRÃÝÒŠ›X™'%çŽ¹G{›PB×ôYDys)ÊÚè4û§©w‰:¸ðrµ„›WË"7¼¸ó˜‹ž~®p¢ÒxúÉU©ú½HôÊ}swø§1gt5pÿì'ds?}‡ÇO½r•@±2Ü?Ë'¹DÜy|‘SÑ+\-&/¾å¢â7¼9C¯ý¯õDDO¹Lð²qµ°xÃK Ã=]Å`ÄµîoêŽ4©‹}à¹…»·™Ôw=¹ùà7·xyé	×=:{ý¸ú_ñî¨ùzößÖíA¡P(Š­@Ž;©zggà´"@“k7ÔwqHªè ÖäÿÓ_Kê›óì´ÍY©ß„2˜>ÄÍŠÞ…Ô;CºwOI= ÓÌÛsŒêsJ‰BVIýå:(Ló£4R?xÁrï>êö@Ž—”ùe?¼j¶Ke«Ö"Ô—*ÛçbÁ¶_“J%ÅSix™:fŠÍÁîÙVµ%:b4†ÃN ò–ðÅÇlCKšh÷c„úr.$¬ÑUOðsw˜	©<<yû9wÏ- µ7C7ÃzÄXëÂ€eV,çŒŸm·‡ŒUú2~ð'RGÏóÑÑ oâivÂÚ‹D{zp†gU|YªÖ#@°Õ¼qÜÕ…?c*‚m=ˆã
ðS˜pP*JõmÉ¶×?)Œ?ç x¤òÈÃöÃÔs«ìw³Üàsæ>%g|-ùqlè£`5wnéWÖÉ©OëwSïªè×Ç`yÜOs?¤“æ~éÍ¥(o*Ï²*„2°+«JïÂAkÐ‹Ãà#4›3ø	ÃcŠô
hž ¡ÙrŠ§i;î¤Á¸°°bHº’`æ˜)l1Ée–­qû…‰º£ÙÅk1.!œÍìòÈ1ÒjÌ*ÙÀ˜[d^O¯‚SŒÃ•úWÎõ4ýB¹¬«ÿ Xÿ«²²&·X œ¨TB+þ‡n˜3Å€ÙíÁñíóÒïoõN˜Ö‹=K›ë2gÃ®D¤BØ„m=©;ÍÏfº§ â6;‘~«ŸaÈÔfkÿ,Ò_÷ðrx’C½Ó¸÷–×ž“Óg…Á7kø½BÔpŠXìTöw‹ ÷ÿÊâE®S1b§òÕÁÂ8l;Å²Á¤H.#Ñ•#.X‰3]‘ýwŽÅpy.‹ýÎÂWr’Óò·âÞ[>>MÝðÿgÚ=VÈe´ŽÝEæÐfDŸ·mpmPÔçéÎðrï$‡zÏ›û›2¨¦=(
…B±Q”áX±¹NRª^ß«, “­‹±ÍzK¨eä‡xý÷
Ý#4WQÖM¢˜bÈ³ÒÏ7¢«„J¯íöp	pónÖ§àVø'.ÄúÙVWF¤	rþqçäöÙk?“êÓì]HÓ/þ,Œð‘çÌ%•Nc>CÝé×œ1£_UóÂ“y©¶*÷~ò‘JR×1êú›…+ƒ¬Á¦ˆš¯Ö¾is[ÀÅ½ˆ{sîeªý€m=<_Ì€+ÍÏ× x>—Áí1»»È¿Î‘valÎ*›JNG{¹Aõ¶uãâOY5¦yËífuD×Yš÷³¿ý2u{ª¯âŠã­ÄZU¼ ­ä¢{$„ûóR;J¥±^X+O½ýá`g`49;ÎÓ9þYyóÏ-¹c$ß0dÓžªì£,‘;;²î“ ðzØZ$ ªôërãÈúhšü·ÿ'óŸ4Üíó2½_#dæR–9í$*7
ÊyW€<ê{è'õû4¬ê!Á[ŽX×Ýå·8fÝh‡|ÏÚðK5qbÑÉ—;ìpÌ'ÕÄ¼=¼9ÏB¯ZµVç^%à½šuûp*£'~ƒOÎÂÇ§på¹ (Åé;9åZ1»‰ØX±m0ûLö\Œë¯>èÝúxÏúïÑic­>&æ(=û ²uŽÝGKSËö P(
E¹ü?Û] …Âš(o.}KêÝ>öO²§ä¬3ÊÚà<fù[Ç¨ÜÒýÝSè8«Š¼åeXå]’¬Ïµ’Äà·wÐtôVÙ
DâÂ—aSûeñwM¬òÛÅé¯{x6lþ¯ì	îµ	ÂÝ3¤€†–rL!Â¤Øæ[æ5jŒÝ³ÝP= àlÔUŽÂœ­“±hd˜’3)x#!B³!Æô#Â°@K+m†üR?é&§†<£¯¬K= ÐJ‚h—÷s7
ºÏÞ*Yÿåú.õîc-»=¡æË«»
«Üôzˆz»zXH¥­AÈ…“?çvc„fC„"º>PüÂÝò¿›	2dHÜÜ£q•ïæf°–~E6xÞ&’þËSÖœ~±h¦ït Ê›KùïÙVå»éñÙ+E#SÜíŽ’XÁÜƒ~†fC„úMmÓ.h“]·~½£Yÿu	ØG³ìíûàÝ+–7í9‰vñòÅ* ”ÍÅ	°ç‹.vÍÿ`n;É%ÖØöéåÂ$µì£®Mäúî03I„;ƒÑ¸°‡ØO)²~Ó}Tä9ó+H×	XŽ;•ÊÇÍÝ3¤d_gruW¤lëŽ?'Éùº7Œ›OæÉ ûÇ×}LÏó<²Ï"Àžoô˜	5
un£§Ÿ+v?¹Àëýž$ÐØbÿÊ}àJ¿Ñoq)ù«H„§ŒDs‹+ÐØB;å§Érÿ,Ÿxo_Z>ætþù"ù¾Óƒ‹æt©óƒ3<{ôš]çé5¾óBmlš£”@ïó´á@áÉþ{ìw¾æ—áoIÑÅ¡Q‹þ¥€Z¶…B¡P(*C)Ž;ƒ?¯O/ó&®]'õâ‡òQèîŒÛÂ–õ°Ô®O´®CRŸN³¿wrâ¿=V^`ºP¹Å_œFã5©«2 \©ú<Hý¸?çJ£ä½^'ùÝ^ÜƒÒ§¡¼Ÿ7q*ÚR\A‹@w£eì	ºFò‚ã{JJ÷[»’~ËºXŒ™xWÎ¯íJ¾ïäòÉÃ³y¶•’WFãÔ‰³¹íð©ÉpÉ­å±`”Ö‡lÀ L<*˜ÌáëêCæwW<)ð¹@C¢ŽžsÄ ¬<Ÿ¿¥JÒ&çf=˜ú}çHÞýœ[ X=pm‚¨6DÀèoºÒ@y›Fõï¦îö¡²àxÖeÈõƒ°üâ)kK¦2+

.~<fr{ÑÔ;Mg¯A±¥ªÍÒf}4ç½9×93E-dßÍœÒ\7Ì~„|‰Ë
¦ÀEÒèmÒ¨L-åë<Ï_³{$„û«êû¼ªÈnÍÖ]>¼æ—ár\©XµÅ¶Š[l|§@!¬
N£}!òcøK¡Z¯7¿OÉ9¤úñòôÙa~¶
ºf* HUÍxQ¶õúMÆÝ NQ‡ËzHbÿ,ª«W;ŠÔƒ}ÝÙ›SÜmwÊŽ)fºóÞÍZ=Ï1>ª·Û=q•ñ.æ¦³Íì>g?i';Å©Xá¬Bª‚±f'U»g§û‰î-Vâq’.ãàbS†³Óôë×Y‰OºädÎ×x*Fì”,ÃÙÿMÏã‹²lI’I(9¥-p£±Bü†¬ƒ«ˆ÷\*d«ü\9—Éï½fÎH_ëB"úŽóŽ(6}”ÞçéÇAÌ¹ç:²~”ÓDIÿøZ¯ŸÎQ²>Ã-¿Š¶…B¡P(6—X]]ý[&“áËÿ¾Ïu|¹ÝåQá?þõß¶»
…BQc¶Æo¦âC ò@iïÖ?
…B±ýˆ9ÊGÉkÜQ(
ÅÎäÑ£GÎãþño5(IŽÿ|ñ¥8V(
ÅöUVëTñwBÎq¥ÁÎv4ºx;
…âCåôÇ\´ô3±RY0¼
ÝÒ ¬
…B¡PìD”âø=B)Ž
…B¡P(
…B¡P(Š‹ª8VÁñ
…B¡P(
…B¡P(
…BaBŽ
…B¡P(
…B¡P(
…BaBŽ
…B¡Pl1—qOÓùÍ-ê¶»(´Ý"4b`l»KR;¼‘¡Ù!üÁí.Éöâ¦s|’=ží.É‡…ª×÷€Ówx‹‹^Ùî’(
…B¡xPÁñï!—qû©«U$Ï-Üƒ]¬?ê!ùà}*C
é¿Ggo3©ïúxßÜKy#!|-	¢¿‡“#NæoÞe*RAºš‘ò20ëÃr÷œ1·6ü¸gÿt€PÌtOÛðõ,JP¤Únð4È_fHë(èghÄMCr†p°Ü’‰ûÕŒA¸ôÀ\&R¦ûõFBø\y×/R†jŸmÅŒ
ês¸ùgø*€s.ÿ9Z!Ÿ­g'/ ™¸WñïŒ©]˜Ó¥&ÃL\+§²ÎÏOÖ[z2ÌÏ‡Cø¨àöß£³wŸüã5¿Ÿ!]^Êê†'9Ô±Ty5,ƒ5¢_m’-× ?´n“ú³É£¢wêÃÂØþõz¨þ}Î3„4¬ñX»U”è£ô>Þª?Éöÿe¶GóxaìÃÍí<×¯m`œ“s•] ¬–œ3d ‚9j…ùèm“c„Ž§‰žxÎ‘‡Oôºµ«‡bu—7^Ÿ…iì4[÷,®BeWâ7ø¤&‘âNsçñE<‹ßã
\-;•ctšýÍOyyéëPó9mÕc–B¡P(Šš ÇŠctšý>8ï5©Å´lw)ìXàí"¸·àJ¶õ06@À‰›a¦"òCù+?Ï#S,X{K yó_› œ5XÈÚäÏÖÍyå³+Ã–=Û¹4%ñF¸IížbAÞïÉÛÏ¹{q¯Ùs¦T²^fŸ¨Ì èøÐV2dŒuyKz¤šÖ`ÏÑ}fÃË–Së2\'9œŸ<f2Poë6c¢;†ý,œ»K¸&%Ø9Ä‚akƒTÐO—«pQ¤ê÷¹ÿ3´úò[MúëžmöEŠôQ&#}>A?'=Y¡°Ï¶Â4^ˆ~Ûñ¦ð?”}W0&ûí“øƒw™ŠT?Î9>íb×;ƒÐ€U½Šcæ! âHÄuƒ`ù×/Ö&Û44Òs Æ2›zh·«»˜y¼úñ10cbÎÏPŸ–}WòÇçš>Ï-Üƒù­à=’FãdÎ¸{úN”;§ïSÒv|ÿ,ŸTi_®žäëUá³÷ÜBsÂò£Â6±Ù¨ï…B¡P(¶e8Vì`tÕÒ*©ïÄ¤Ð¤^é8Oçøy0|ÄX©[Ä‡Éî¬zMüf•Ôw€/rª¨]½ÓtöRÒ0²Ê¯Ì3*vÄDú5ËÎ}â¼é#Ï¬Ë¿Ný§“tîÆ¬ 2_+«Ó%ó¯irî3Ÿ+Åâ[h-8l©´m7*ÝfÝ¹säEs
‘WšTRCsåò{û¹á£Ý 4Kú4³˜”¾(òlË0šØÔ4àhÏÿ]þã7£ðU ì~ïçBáúôpŸhì€PÆþQWTù„êÉB}FãGe°½§B6¦RJó6­_•u)A£
²Ï9Z€ gc†ÄM%ûØ4RÌTªBJíÉyœ}Î¼“Ò q¸’R_kÉWyÇ‹½›YŸ‡&çn@ªw“F•ßnöOçÎ•¬oë2˜ú;C£ÓhÍ«ìªß
óz$TÊëòòú';d¿µdè¯*Ù%QA›ÌWæŒ©Âä$CCc™d
\
Ù¾Ã¼ØbR­ç-¶”¥Z/–Æt.×ç	5fŠZ£áœiñÈbA»ƒ2ÌÏY”£¢ºÔím–XË.¦ÒcV]‰±Öž¼ñQçŠ¨\ëŒm0)ê«TÇZöQA?]-	¢7ádÁ"Rþ¯ÄNŽ|øÊ¸‚÷°+	žG@LÆxƒ­8!õD.j çñ6ˆˆvYÉ8'°«XúµÀpX]ýT‰E›Ìãõ9h#CðÏó¶õàm±©;à€2ñçbLhwÐ 4öÒ¦9i ÅSÙ'´¶ NŽA«õ³ˆÿÀo_t¡
N¹:=}§I¾7(‚ïŸ
p_œäñE‹É$.—˜èèjä+Ñ§²»
ÌŠâÓwsÑcXå\4Eïç­ŒÃúb‚CÌsÌÂ9­õnó¼IÿÍk~ùn	­È˜•ž{
½~:GQÆc…B¡P(6e8VìPGÃÖ4£z%ëjÝð¤0B
_`]þÆ=üŠÄx¿ŒN³¿÷ŽäšÑ¨ò¦Â-u;¡ùj=Çè4û¿¸Årü‚8àÜzx&
EZ?$È:E/_>»ibŠgÃ¯Äï>½Ì›ø+ö|ã§IŸô÷ß£³÷<®þ(É¤HÕÔ¼ÄËá30<É¡ŽÏp…<cä&úF%ßÝ<÷'-·î
e¬µ«Š)îF¦ä¿ÍŠ!†c1J8(U¥Ÿ{™
†‰QæTyFE®=ëEžm¾Q­¬z¸6ÁÌá¾¾¡>ÆQ¢©wÅ}V`,ÕïÇk»Å¼
ÿqã¯(C`,ß¨°P´¶÷dƒøè;H“Q_ÆP+Õ©Þ#S¹üO”§g80ëÃ7™äŒx¾cÂ(àø|ˆÐˆ0­émPW°È%,ŒnˆúÌÄ£LÍaÈ\
©t"6êÏ<¬ªÄÇ6%ÞÍÝ4É¾¨ntšýGoQ÷À¨ò+Û¯}¢f•aÿ=:{¿d'Ê°‹W¼|ÔÌ¡ÞfÞ}7ƒÇØåôxÏô>¾ŒëC”åä—hˆ'’S?çŒÆßçÞÁJÛdöÙ(ëŸë"à™›	ºFÄb„‘ÛÍOÄ¤Ê?ÀÀX˜‰k^ú´<÷'¥(’&èg¨ÏaÞ‘ðÐOê„ì5˜¾&ú¸®ÛmÄÎ‰~R,¦å]Ç`$w„päÚxÅuç±Z˜c¸çîÞ}æ¶Á{¬ÅÏˆ´VcV‘±¶ŽQ?MVæ"*×õñ>ÙŽõëýI¾—qÉ±9ñ@¦•åNWÓGéÇƒþÂ‚ùp7¦˜9ƒH9fci¸\|+wQt‘Ž§Ð<Zÿìb@Ûí!-ó$VÜ¸[ÄÒY¥ãœÉ°^ï§sÜŸ»×*ÕÃvT3nÆ‚aˆ„èZŒr÷É†F<íž 66@È²Üöuw½Uô3©…¬û‹DRÃÝÒŠ›X™'%çŽ¹G{›PB×ôYDys)ÊÚè4û§©w‰:hoi„•9¬Öyt\-‹ÜðàÎc.zú¹Â}®¼\ÍsqÀ•(=¿áåì}éª¢àyØ-\¦ÙdPe¶›Ó:Fåà%}!GŽY_Kê›óh_ÜbÙÕlšû§‹YÎÈ>ÃOç7{ËXTR(
…BQ
Êp¬ØHµÐ;;§š\»¡¾‹CR‘ °&ÿŸ–“ÒýƒûX{ñí&©a6¡¦q³¢·@!õÎîÝSRÀ4û÷ã£úbÛ	WIýE(B
Òü(Ô^°Ü»º½†ãåe~Ùo š­Àr¿Ö"Ô—*ÛçbÁ¶_“R&ÅSix™:fŠÍÁîÙV·%Z²hÒø³qÏÎ–5Ôd-|GWÈƒ?‘:zžŽx?H³Ö^ü ÚÓƒ3<«Â7¢­è`«yã¸«0Æs©þ¢=õ
à½6-
@ü&”ŠR}[²íõO
ãÏ¹©üò°]¨òÜ*ûÝ,7øœ¹OÉ
Š-–å÷Q°š;·ô+ëäÔ§õƒ»©wUô¿ëã?°<î§¹ÒIs¿ôæR”7•gYBØ+iÄ¿´½8\ >B³9ƒŸ0p¤H¯€æ	š-gá¡xš¶ãNhF^ùóCÒ•3×À´Ha‹ÑHî(³lEˆÛ/LÔ=È.^‹q	¹hälf—GŽ‘VcV	ÌÆœ¡i=½
N1Wê_9ktÖÓôwå²®œ`Iü¯Ê>ÊšÜbp¢R	­øºa2Ìæ Ç´ÏK¿¿Õ;aZ7.ö,m®k€
»‘
a¶õP¤î4?C˜éž‚ˆÛtîHDú­~r„!S›­ý³HÝÃËáIõNãÞû­é\NE¼BüÆ'œ•Ç“Óg…ùì'”òLqåˆVâLüÐZÀa¤nø˜x_Êz„‘äÂƒ$gp>Hý¸ŸC½b¡ l_Æñ$âb|:4~OùAV(
…bP†cÅä:I©z­xhëâAl³ÞjYù!^@ÿ½B÷ÍU”u“(¦²Ç¬ôóÍ†è*¡Òk»=dÞ&
{5¹ƒJ±~¶ÕÔCÖðhÜ~îñáe“‚ô}î6l½Ýj¤’ÔuŒºþfáÊ k°)¢æ+‚µoÚÜpàH(-ÝŸ{™úIô.óOD;‹ý”ÂçrÐ„ç‹p¥ùùÀÏç2¸=fwù×9Ò.ŒÍYe3BÉéh/7¨Þö±n\ü)¡ÆÜeR=oVGt¥y?ûÛ/S·÷ íÖhÁöø×µV/ˆE+é.Â=Âýy© g¥ÒX/¬Uèýü½ÇÎÀh2rvœ§sü³òæž[rÇHþâªM{ª²²dì€x~ºû$ |„¶	+ýãºÜ8ô]·…&ÿíÿIãü'
wû¼LïÅ×™¹TåeÛb*7
ÊyW€<ê{è'õû4¬ê!Á[ŽX×Ýå·8fÝh‡|ÏÚðK5qbÑÉ—;ìpÌ'ÕÄ¼=¼9Ï"ç&BÔÁÜÿWí TÄW¢ÄNmFpƒây|Òâ¸ŒÖ±;·Ø[&¶‹9ž½e/ršÓÉÅË²ÜØ(
…B¡¨e8VìP¢¼¹|sÞfÂZøûµ¥óà<Æ¹íÝˆcTnéþËÞÜÖ¸š)…¶««¼K’
LbR[¡ûË“[ÖËš\Çe}šÚ/×¥új•ÔQà˜m²
)†®Md·Yk-ö&:ÃÕxAnó¥À7ßV`÷l«¯a¸DWÿIuc)tõuY>T!+ŸÙ£t9èJÒC½âƒ2kÜ©©šOÒÒJ˜}YÏµ’AËú”6ú]hO“{Ò(œ|š«+ÝAÖ ½`V¶ý8™ß¨’ÓŠ*ßÍÍ`-ýŠlð<£â¸Æ¤ÿò”µA?‡°Ø½iW-]!\d'2ÅÝÈs±¸el‡ºÿá•|7<6iR"ø×¦îBØÖ]‚Ž}B1þ íûàÝS–ãP÷éf\Q´‹åáIuesºè"Àž/Ä"ˆiìN.±Æ>éº)Ï \Ë>êšÙM7Â‡yÁª×ºô@pÙ>*’¢õ+7îÅ·¢Mé~ìŸìü6Sù¸c¢áâæ]ž"ÐòTÖ]ó6õk·©;bô¡µÈqWß•ó$ÆÂ\+[¸± ¼¨õ³0ÆùÈÍïOÏñ;‡ž;§¹Z2^iæW²†h®ôãÉ›G¥¿îî¸î2@ª‹½%yÅ»wÐ$]š™rÄûÇ‹oyöëgtöN²'YÆâŸ¾x³­c
…B¡øðQ†cÅÆ v0}´]'õâ‡ò‚åèî´Ái´AñËåG=,µëþÙ®CRŸN³¿wr¿=V^`ºP¹Å_œFã5©«2 \©ú”[uW%ïõ:Éïö
ÿqrkáò£1™¯`KqY-Ý>šcLÐ5’ïÜSRÿ?{oÛÆ¹çû}²»9rD“:‘Œ ©¾´aˆ†×‚´% ¬hÝ\ú®”?"BŒÞ kÈ'…e”®Ôl­Þ«u}Ým|7µa‘ï1¼F[—µ8Ú…ë0XP²°áÀ0Uß„ðJajXò)*Òy‰ûÇ3CÎP3|³Þì< ˆ53ÏÌÃßó6ó{¾ÏïÑâÖf"aY‹1oÃo±9^%äãÿY”m…Ìû5‰›~ÝRôüÆm†°v±,¾”“ØºAØOSFŠeï&°eáâ:*l¤T‘‡â%i]ÓO¿,IyeÌ0þ‹Mù“È$ˆ›f¸Üì hˆ)­Ö…3×‰(}øµ²È$ˆTºQÞšQ}ÛÔœõ•mŽgž‡|?ó÷ï°´gWÉTFE¡.¤À—û
a/ê:£´vê–Ik“_µ˜[õ‰?•‚ºŸ3Q$Ñã'pèchçÂ¤ãëÛ3Ñc3lÜX$V'õÊÔd	sA¼f}{^77âè<xS,·!ñM9¡TÌÇÚbŸf6>Ž³B!¬‰¢¼/îGÿ‡Bµ^klOÉÑ$œWiíÔ-¯.e£±lm†fZA‘>J«“Zø”ÔXhõ'° ˆ]oS§_
Ð$l8«ƒ$Öe±ºŠÑ™"v°¶],aÛMn¼ÈÆ#ê7^ÕxQUY¸÷óz­‰ÚýÚG¼Í%>$TfÌî C]¬íçì&ë&yÃƒÿ£¿£ãóAºc1ºI’LBáëd.\FNx B³-Ýÿ¥¹’ßâV{Ý‘ç¦ß$:ï„ï·ùM­Æ,G³tK$‰D²¼²°°ð,›Íòá¿\ãï÷|¸Ñù‘á/~öçÏ^_k    IDAT‰D"YeÖ'n¦äe òÒ^Ì7þ”H$’MJÏUZ;‘ñ„%‰D"YenÝºõÜ÷øþÕg«“<yÿ—Rq,‘H$’!§”Š!IQòqŒ+ÝìlS£)ŸcÅƒD"‘¬;kJJ"‘H$É¦E:Ž%‰D²!<W,lÉˆÍÇx
(ˆk+‘H$‰D"‘H$›?ÚèH$‰D"‘H$‰D"‘H$‰ds!Ç‰D"‘H$‰D"‘H$‰D"1 Ç‰D"‘HÖ„šþ1ZG¢8{6:'fxè¼é£q£³²Z|ôM	†=“Å}×H”Ö¡““—ŠÍÝž%‰D"‘H$kŒq,y9‰sÄGÍjm’ä¾€ëHË·:H–½ÙÇfÈÃ*Òs•ÖÎzRWºx_ÛGyÂA¼
	"¿€CMLŸ¿Ìx¸‚t«²‰”‡ÞI/Žx„ËÇôwkÄwÓkv‚ÐW;	vÁDûubÏý<“µƒš»ø+5âz©X¨ÚF[¦¿U;“-øÍžp¯så9ýqÃæ]Ã½»$ÎÿŽúiš*´ájQeYXÚA½ëÅ>ün$'òw³²C)´t+lWE×ú- ,<g{¬²ZÕ<˜SÓ?Æî=[Å‹wxðñ	–Ÿç†u2WÖ²$Ê-—
CÛH‰öðÑ7à"=âë½A¼ÛEQz®ÒÚ¹]ýãßô@ºÊ¬‰:1÷\÷XJôQªmmI›jç´r(õ(CÙë°±žëî÷}unãR(½yi‘>£¢ûh«“}î´_‡p¶Ùüo²´C‘1Ð:q6ŒëR§ˆÄºqNÞÀs¯…X·þL’?§_âóA7vÝÙLüot
qúsÝvÈÄ9÷öG\NEbt¯|zÏÃ\ú|·½ðx)
òŸ‰sîí(†{åóf™‡ÐÝí$yÃƒ_}è©HŒî†|þËÉƒ>½ÁÚ“nx}ËxLo#
í¼Ç:wŸœ_âóÁf¦ÎEiìÆ©^§fœXwqíœzÔ{æ±(+¾^²o‰D"‘l:¤âX²éqIÕÐËDj6»ÑY(ÂOf×çIÖvðÐ;©:#ÚC„ÚËp|ôu)¤ÆÄõ‘x¥«ønzQ’ê½ÆRØÜ‡ð@|«Nõ9úi¯3ÅD{ˆPû)»‹CUMæTšõ)Á*ÊÂÒùó‡ÜÍèYÛ¡$Ã½xÙ‚ûU_Çï´±eñú;¸Û¿ö“8ë‘‡å‘.îö?>Å±ÏH->ß½sXÔÉ™c—sõ@8qB„ÚõNã×ÛC„Ve2j“çr{ÈÄùÛˆï€"`í!BšC+ü¤JG­Ÿ7ömÎÀþîn6‡oü‰þŽò•US¤î%8à¢pÚBÐˆï¨2eöýÚDÒ†ë¨ª’îÅï†Äù¡ö‰Œ‚WS›WÛW»/ 4Áü­Q¶:šµgÍÖî/¬¸Uú“îö3_Éó‹ÕÉf‡jÓF¶5@:¥¶\K;‹ØÎöãBÎ'È:½ô³eáçO£¸úýÇOã÷xðxnD8X=OÞ	‰pvŠóNº#§©Å9ñŸæ4†Ãt4ÛIÆãdìÍtVŸä×ÝâœÇƒGuŸŠâF;–?^Õa›¼‘ËƒGïäÕŽßHbw9U$§ýÜH‚³ã‡_¢Ã	Éh)§1pªg&N<	Î–¼}„³âçò6Ê›5#ŽŸ‹“±»ùù%a$ƒÎÅÉ8»Ñ›ÜîîÁX§ñ‹Œ#nq˜K"ãäŠÃÞ@3ÐÜ`Ç÷\#c¼á^yJ§SëíÔ-’'‰D"‘¼ÜHÅ±dãçO£Ô.º">\ê•=Çi9nP¬™©[4uÛ¼:s.®Y uå—ðþq”Zqù–Î(­”TÅl†<hê‚ºÜßy•c(Ê1ß´]œ7(ú4›ó§QûÎ­G¶bT
Ÿµ¤)4EÂô#êš¶Ï•bö	3l[qØ¨ÖQ•<Ízuÿ¤+Mµ¥‘Wøˆ{¥I%gþ~OÞÓ)iÝ~‚“µ@v6ì,ý; HÙ–át3³ÃðNRL”«úÓáPAû™4)vÚ!;•ÇÎ|MªËKÓF …&{–Äù•N3¥Á™iDª_'½x›[hdF½6Í“0l;ZF¦L”+Ž¡(;êËSšVR+í š³Æ–œ`/^íâ€µŠã¡·K!Ÿ`ºÙKSái‹:nŸ-õÀÜw+lbPèæ”¢-¿>÷š¶µŸÚžKõQçÁ (Ôå¡ç*­ûêYªÝÊ1?½:Õá”5öóe(—VÔ‹ŠTOÔI
ú]û÷„ƒ´5d±ÙmL‘r*¢=”ƒª] PÕX¨h·È…QÕ¨ï‡ú¾M§jÔÔ˜ÉŠS<MSPV	¬x¾‚CßÈ’žö–¶[ž]ÔÖÂRòaÁq‹ñ¢ç*­äêHnŒA_·¶²c$
”W_Œí¢`4S¹®¨ÇÆçT¥ŽÅ¬jÄwÀAâ|Žúq\ßxñ.{Š‰1ðv•¾ã&l¤¸sFÜ{[`o¢% Ê^2	î…A+cì;ñSëeeí g=[XàiR°òöü|¬¬“ú6ëT­]Az	ñµ•Ûh²CêUG¬8 Mñ4XÙv:!¿'Ú¢ê¬¶íõÐ¨¬vYD˜O~ˆ²ç8®~ªP‹N1›a¥2Ù”fìf£ß‚ÛMCs©ëóVC…Ù_êÀI†øh	óé{$»4¼uŠ¸OÆétÓs
š[ÜØ3qþ®eîá·`öÑÙfÜÍo!žrŠ·’7ò\3®}Ëì ›ñƒ„³ú†ê¬¾eêçnÜ-§`ÈdÈØt\:Ìé¨!ãÄ;q‹Œã¶gˆÿÝi8|‰’$“
¼uø
Î$Éd´ÕÓã+ß#s;&ßfã½ÙÊ­/Ôú9õš¥ûÿÌSçÏ¬¿Iâ·yú~Ê‘1`c&·%‰D²1HÇ±d“¢98Ë_ÓŸtp×bIVMÿ˜p:ôŸ`Y½ÆÕÿÄHßEÙÑyGrEïÔ‹Gx\á’¬Í8K²?ÿQëŠ²ãýÌÇOˆMÛáVw“â¾J$GU›¢å¯­Ô1ÎÝþ‡âºwNò8þ7>õQgx¹<Ž³'BRý¨¬«ŸãAÿÐ?Æî=ïâ úYíCsæØeBê±Ëúåâ‡Ü6“°×	±
U1Îåð¸úoá„ñ†=ÄrÇl„P á yÏÃx DÌ2TÄ!õ#O<·ËEÊÖQ…Ä‡mš9'PKëÃãüú@~ÍŽæj'[ƒÌ@`-ú1ìx¯à€ø7ØÞî@¤R?ŽuÏÊå÷`ˆ’hÍ'³ÆGŽþƒ§Ò²°¶0ìÎšƒ1{óiJÙÁ‚Æ‹m(™‘c)ZnÏYÖq°Z­#¾ü‡ZÏUvïÔ•ÇEÞñé||€-Mõâœó*­ûyÃ
‹ôQUå!~‚DîQÍÃÐIîNµðôÊ8µG|Ô¤?ã›éã(oúÉõQ†Öâ¤§Aç.êÜˆö£ªª’£˜ßGË_¥u­ŒTÇmÁ9ÓDÆø»¤ÏOÀ@Û >úº$Î‡«}ÒM©ƒã(a¯¨¨—sÄ¡
<ôªKõ/ŸQf½<	ç¯SÒDÚ¯ÃÅ>ün/®«í¥ÀMAØµmä—ëÇ¸Þ®Þ5*+,™£B8ˆ±/ Ø¾rŒùDÔ­ŠCU¸/àÔMØéÑÑuúºz¬MRhŠ=Ë±ûËýUôQ3Œ¼Œ˜¬*Ì¸¯ÛFjì21zñž6!?‘'ê«c*AÖíÂÑÜ
¨“Tz'ÛHÇS(n‡¨¯·£Í”#Q”#ÚxVy{.J±ölQ'gŽ]&r±ÃBÄï=™ñp#¾›˜Ûá_ƒ,ÓSj;j˜&‘qájp‰qÍ,ÍY1N¦S3b¢è@šDRÁÕ°
«_Ë#]ÜUÛJëÐ®
UòÍ4Ø!35e8êìŽëÿÎ…@8Õ‚33ÅèµÓ4÷tÓÝr
Šê‡¯ñQ´‡X·›ÁXŒÁ2ÃTm’oKI‚Oµs´Ä…×>"Ú£»ãsì:nQTuuô4×¦Þâçn¡°¾Æ[4 ™Ù©ÉÅu³ß^:
3Ä·³ƒ¸Þâ?Ÿ˜b*éÆÝÜÁá¨ñ:a¿>oÐ9«U¥÷ì,4t¼ECòQœù§äœ¸æcwÍ¾]ùq‘âß$¸/àêTß´wÒO/ðàã$œWiíôáìyÈâ>ãó¬¿I"<þ8ÂÒP”G¢Ô:e(‰D"ù± Ç’Mˆúñ²håà4ÃOs+Ô¶±{$ÿæ¶¤þ?ýÉg¤>=ÎŽ#âåhmfÉ× Ž5ý‹Qmè—}kKØôËÉÜûy½6¯RXÉ©:øW¦ùRý½Ï|çvjÞô£z˜ÿR½ßHwµtŸtäÿ].á'¤\(]A‚]eÆ}¤À)B’#ÅÕ1<~0Ä8kƒUÙ¦«°ƒÒ`lðUˆP@ulõq/\Ü!%ÒiØ„“<ãúØN‚]^‚“^ÈdsËe5å•p¬«jÅ®^<g®L°sÒ‹w2ˆ—•¡*#Âã/ßEéÜƒXÞ·‹-<R6z‡dŒJs}ÌJs; ªƒ#Ä ý¶aEíPäùb’cœi©â'èYéâ®6Y6gT::š·ÃâæãW§ÕS£]0}[Ô·ò$g¬X­ :kŠåL&AæòÿXŠCíXþ.Žãlqìªäççý©}Çy}ŸŸÇñ]Ô7ÁÒýÛ¢ý€»ëõ:û„á:âI6Í¨jC® ®õZµm¤f³à+"Ê‘=“JŠhg†ª;…ã·+H0§H5ºSS_¨ýn’ÂŠX‰É²J±tT¸/XßéS+U1ñïX>uQZ;+Œ¯ÜsU]’_‰c9vÇ«ì£,ðhg€áÊÒ¶„ÕØ¸_´ÐgX*¾
ßMŒ…§wÅDHùèÃk¼çÁó¶guÔXæEìp ó4‘ƒ÷h¹é*/â£Ï
íãvÎ­zYŒ~ NôûhýôÍ²VãhÎa}c
³x¹§Zœ0{kÀáÙ¸[(å:æ´Ïi-²“îXŒ–Jbñšgœ˜êÕNÞðWþjÙ¸—¤»ÛY¶Ú˜Ã4Û3LM‘S7w†h©„vÜƒB!ž³ááÒ‹ŽÆitÓÓQÐ`Nß#ÙÝSSëø6:Eó ›ÙA‹°Gá
¶•œDÙ³µÈ{¼‘š}»ØÂVuH=¨}+Œ~Àƒ7ÇØÝy\|oU vOÒÁƒþ1vwFq½¹Jq•%‰D²©‘ŽcÉ&ä,IU‘´{äje„–ËKÅ²Úua5ó`õÑÚsuex„ú*òºFSÚZ£ªŒÔ¥àÞÉ m%œ"¯¦È5W®æe[„*Í×g f¸7•ÅåÖÔ¿¨±v5e²XÒÛ†/cüŒN	§-sOÍ0£¶ªé/Ä]c_¥ð:5u”Nñ•Û êIõq`Gï3ßé£¾ÇÏ¢s+K÷)ž^BqlIX¯4/ÃWÒÂ—S"x	ÞÜFä‹bv0¼X:6½cÏí'®`c±
Ã¸Z¡júÇtáW´•kêwî§¦§ž:ñöAZT¡¸žXLjéÌn?ÁÉ2&¿ÎèVS8½'ÛÔ<ð£ÞÄOÇ²~BÒ€Q»c$Zf¨$›ÙtòÖ¬>UÛG™âa§ò!—ÞÉ>¶)kmR"·¡Ú°WUÑÎðd/¸œ.ê*‰Æ‹ù	MMÅíYÖÅKP¸q©Jü'³vøÇ4MªàjžVWxðÚ!;•à	-æiN>Á1éBq;Ô6ÜˆOU'f›hY‹²Ð…&(·OËoèös.¾VÂ«†°ç¶ %¢Dä8í÷pZÝx¯Th‰©Ù8¬ï­ß0®\´°SÑr²Í
Ø5'ð z¬¡9çDvZÆéÈ?÷6ßöÄèîŽpêt…õì·ü?4ó6äUÑÍÍçÙOs/Ù³aŠœ°º¹Al^xí[f›™mö9¯>7wÈÖôïãbE“.Ök5Ž­&GK£½Û®}È‰D"‘läæx’MJ„ÇFjq;;ÊÚˆ!ÂÒÐ´ß|#‰!uùì•;°ç8Îž5ÈòºçaÅ$¹¥ÿ%‰ßæé"Ôí»W+–L#bÖ5«›öì¡Žž~Yüã\lˆcü¯ì—Ë3×Å†lh!J¡~˜
{ó±B×«²­ÆB…¨:.i¤¥ÙÉ¯ó¨á^‚“A‚aOAJ¡ŠÌ³òƒÕóž[&ÁÄÔÍzòi<{ÈL«ñu{qÙ³$þáy¢gIÝ_ ®S„ŸIiCÚVúÿªrÈè1±Ã‘ë¹Å†Fˆ°Ç™)i±y^p²OÝT0¿éšø/B"#TÏká4^N/@­ßSFNßß€È„²˜žwó1Ò×€å‘ÛÌ×¶±»s;K÷•ÿ£¬hKëí4ÖÂmÚF‘+¯`ü ¶ŸÖ†Á¬é‰Ä¦]¹º«ÖI×{…m|“Såxñ\Œ~Û|­¥{Mÿ‡Æ>(:v¯j¥nÆ¨ý7–BLDèœÆ}“A‚7Õ
×€™/¦É’ßNßGÅ¾J‘‹l6^lV*nÏ3Œ}mjLµ]&ADœ±´CøÓÔU¨jþ,Ó_Ì±]Œ¯“äããZDœä¯bkR5ýc¹Ð•öi×>Š’Ä.Ô´ÅP¸ù
án”—Nêðœ-ƒâZtŠvÛwƒ8ÕâÌoÂçñp.žg§8Í½$ºMëÌ9='ƒ“–Sˆ˜Æ“
úî]Ê§ï%Án§¬×ÐÌ,SœÆïy;çð·kÎìÑ¸{ë[ö/Ø\¨
ãb	–¿›¶£¬Ø|uåÅ#¾éÿŒmì.kr±™£˜H–Nc‰D"ù1!Ç’MŒ.–Ö;'y×^¨Ï’º¿ŸÝ›@háôK²æou0×¬½äœ…8¤Þ‰²£SDKŽñ¹cåmL·	ò .éVŽDQxDêþ‚º\){î¢vÄ—_Ž[ò·ž%yåM±|rÄ—û=ãÃ`¬“îtŽ¸Ø?$h(ØïØRZH…LBÄ!,ëa1&âmùX¸Æ&Õ“ßÏ¢l+åÌu"J~m9|&A¤”CòÌu&öñê°"†fA(ýïs¹ÙA0—&ÅD»X¿Øê(—¿|ÈÒž6¶¬¥Ó³ˆ,)f‡M@.†¶Ö§,ÞáÁ'å,÷7ï£ªqx-Üf~Ä'6.[¼Cjz{iÅqRSRÀ]„È«EÏ27í£®imŽÆ7ùwŠ%ÒÚ¦^¹®†˜(™“GtmfF("íÆI
ãf â^"¶¶V'Õ3PFU°ÑžS¤-'^÷êQd¼(1>êe(ÙÌ6lTÛ…aØ&‘—ù[$“".²~>m´»«uŒêƒý9Ë¢XUÍxQ
EÚsº@=¬‰¢¼‡ß¦Îª,VÛáTÄã'pLæÛRj,¤¶Më4±@„m7ý9ex6)h›«Ub2°ì…W ­ÝšêX=ªqœ‰ŸãïhÆžÑ©^µMõš;8Ì5ïa.}>ˆ[ç	ÍÄÏ•Sqí#ÞæŸêÔÍ™8çÞ.'b•8…ðç3zíÛYÝÂì÷{ £[§FNÞð`¨’Úxªêø£·›‰ÄºÕXÏy;¾¤K£m†·†\èuß‚8êDœnŽ‹ñ^G¡ÑçMíÉMV¤‰þò]”N­Cäö50ý&qïçõÚ27–H$ÉKÅ+Ï²Ù,þË5þ~Ï‡Iþâg¾ÑYH$’êX¸™’— ë8Ë/4Ã½»2ü„D"‘H*DŒ‹¯'e<a‰D"yÙ¹uëÖsßãûWŸ­BNòüåý_JÅ±D"‘HÖœRMªT$ÅÉÅßØÅk…Ø”N‘1‹%ÉKÁ)"±nóEÕÄ/~aó°žˆ˜7:‰D"ùÑ"Ç/Rq,‘H$‰D"‘H$‰D"‘¼\lVÅ±ÜO"‘H$‰D"‘H$‰D"‘H$¤ãX"‘H$‰D"‘H$‰D"‘H$¤ãX"‘H$É:sçH”ÖO/P³ÑY1¡ñbÁÉ ½Ã“ÕÃœìÃØèœl,Ž¡(­#c¼áÞèœ¼\H»J$‰D"‘¼œÈÍñ$/ 'qŽø¨¹¿J»«›w-ßê 9ú"åaé¹Jkgýºl^æ	ñ6$ˆü
41]æ†Q¹tÇ™yþ\Ð;éÅpù˜þnønúqÍNúj'Á.˜h¿Nì¹Ÿg’ƒ"vh¼Ø‡ßmS¯,ØT+à£oÀ…-9A(PNÎ´Í¹Ô»­øÍæ›wU“‡jË¶b†{	v9Hœÿ5õÓ4Uø›ÌPËÖ®þ™É×%O8ˆ×¹ò¸YºÔXˆëgÊÉ¤‰]U»¥ÇB|½7ˆ—rËµnWÿxÄ7ý./å
júÇØ½g®ò{¬bÌýjú×ü*ô‡æuÒØ&r”Ý¦^>m@µCõíÙÏŸG©-=×8¹ÊcízQ¢ÒúW³þ$×÷–Y}uJ7fYõýÏ1Îå6;ÊØð4·á%7½¬ð>Eëäp/Ái"ïÑrÓãÍ¶Öc µí
Æ}Y÷ìÊÝ­È¸¹–eq˜KŸâÖòG’?§OEˆul—¼gô->tcÏÄ9÷öG\SÓ7Oãí®•|`òžú’½K$‰D"±D*Ž%›ÇP”Ö¡“
É*‘šÍntŠ0Ã“Ùõy’¥†{ñ»!q>D¨=ÄDÒ†ë¨Fõ\pÀ…Í<¥	ønzQ’„ÚC„ÆRØÜ‡ŠCOØ‹’ÉbÈM•yX·²JSé“<a?.DÚC„Ú'HÙ]ºØmÎ…ÇE*z'Õúva‹òœÆv
?©ÒÑêç}Û…ã¥¿ƒ»«î°Ýˆ<œ%ÙßÁÝO°\xìÖ£çÍló:ãºVÞ'N¨=dpÒÍ»\Qy¿Ä!Bí&Îß€6§˜ÑÛ¡êöÜó.Jí©+ÜíïØtßô'Üí_ãIÒ"}”'Ô9ø8ä†l¦Ìçúê‰Œ‚7ì¡xß_ý8çx§-‹wxÐ¿Ò†fvÇÆ™/¼Qü‰þÜ_¨èùÅêd£âPÿ¥à°gIOAQ;XÚ®`¼8Ÿ ëôŠÕ}]J®­Ž«Zî¸LÜªÓ˜8ç<<ŸÓ §ýx<n$ŒzÞ:ŸÔî¦çT1‹• Îž•g´²O­·S×Ò‰D"‘HÖ©8–lb4ÕÒ©+B¥bP¯ì9NëÈqX¼ÃÕù`¦nêº­9õš¸fÔ•_ÂûyUÔ–Î(­U1&l†<*óôŠÇP”<b¾i»8¯Ë[¡¬ð9µïŒÑzd+FñY9õ˜¦™~D]Óvã¹RÌ>a†m+›ª\›õêþIWþªò5w‡¼ÂGÜ+M*© 8ó÷{òžNYçöœd…Ê4;›v–þP¤lËpLXØl8š¯kÄwÀAâ|Žúq••;‡²S)ñç™¯Iuyi:ÐáîÅëÌ’›¦©«© m•y°üM+qEÙQ¯«Ÿ)ŽÒ<	Ã¶£e=J`w @®œÓ©Ïp9çHK‘Î€Ò ^5¼…•ªP‹ÚUuhì­ä†»¨­…¥äÃ‚ãÅÚæ.–§¡®i+ ªw“z•ßVvŒDóçJÚÛ<†þN—ÇP¥~-µ[aZë„JyYm3@Aÿd…ÚoÍéú«JVITP'•yE¨P6‘Åf·‘M¦À©`ËõF…¢AÙoP(–©Z/–Æp.ßç	5fŠ
Š]w. ï'V 4;°‘ezÊ$ÙNPóf=0ÇRa¹ë¥Ç¬šc­5ã£6ÎQ¹Öèë$`PÔW©Ž5í£>ÚDÎÃ¡Â´ßQ±’c/Þ2žàÙ«@&Á½0hý=öxÛh²CêU?«8 [¾ï§²qNàgK=0÷ÑþUÛ§JLêd^1¯½#€2Ð6miOƒ…í€NÈÆï‰±¢Ù
°íõÐ¨4a#ÅµOØÖ Ø›h	€²Úe¿ÍÓ÷ÛPŽŒ:›žêÁm‡ä(S+¬’!“±ãì¸ÄáÓÑ•§µr\¼ÃƒÂñÀ}¥	æo™¼çšµM³Õ)Úýµö¨^³tÿŸyêü™õ{°•$‰D"‘¬Òq,Ù¤hNãrèô'ÜµXWÓ?&œPý'XV¯qõ?$1ÒÅ7CQvt^Å‘œCÑ;õâW¸<n3äA(óò_ÇP”ï_`>~BhÚ·:¸«:Š”HŽª6EË_![©cœ»ýÅuïœäqü!o|ê£Îð¢gO„dR¤ª«ŸãAÿÐ?Æî=ïâ Î$È;§fŽ]&¤»¬w^|2]º{Ð«Pã\«ÿŽoØC,çèSpÌFN÷<ŒBÄ,CUU^L÷ÜR,)ÛB§ZYv8s‰½A¼]A‚] œ?"Gã/‹ßY‰³°iŽÐÀ6¹£ø(dãÆ§ZèÓ'¨2–¿É‚ôÔ#èÜEa/UÑ”¥àÃSE«‡áñüý†
okJ,0ÁÎI/ÞÉ pÈ$'V–o …&£]|à§Ù™sJ˜8ÝVPÄ®Ä¸®Ú‘p¨¬¥áfèÂ9K‰¶¹•:µ/ªŠ²cßjFOˆWªÂ:µ?Té¹Jkç‡¼áŽ°lá!nÕ³»³žÅ+ãpd?[Üéâ®ÖÇ—ñ|ˆ0ŸüeÏD‰äÕÏã“a€ÞyUiÌ•QãVÃ6{Ì#&h    IDAT‡ÈT~7LœOÐ6 &#”°ªL?SC’øéqýŒ‡Þ.Å$DL1Š¤	øèër8b<¬ö‹7}¤ªý ]±¡3¢k»ØHì˜è'ÅdZÁstNr×@×@¾ŽWl;·ÙÄ„ÎiÔ¹Ý8Ávä*KñDZ³1«ÈX[Ç:3s\_ÿi–GºÔz¬=ïWjÛ8‰S›£jZ5ßéjú(íxÀ·2ãÃ^\öc.Çm¬:.gŸ0ƒ‡ÞÉ6ÒñŠÛÁ¶Mn2 ñbþ†i.u,¨tœ38Ök}´ŽøtŽ=k»VC5ãf,‚p¶Ù—¿h¡oÀÁöëÄ†{	šÚÁem»³bœL§frá/IWÃ6\Ø 3MJ}ßpL%Èº]8šaÕË"Âã#,
EÙq$J­SØàð[
@†Y³‰žLM%q»›é8\à8.têP³oW~l¦ø{0î¸:ëI]éÈ¿}zŸ á¼Jk§gÏC÷m7ˆ
¬ßƒÍí ‘H$’òøÏ~ÿf—xåÙ3þ·­¯ñŸþDTŽtK6!ªZhÑÊÁi†Ÿ:çV¨mc÷Hþ…xIýú“ÏH}zœGÄ‹êÚ(Ö †q£¢w…BjQ—N[N¨w¸÷ózm^1²’Rÿtð¯Ló¥ú!1zŸùÎíÔ¼éÕq<ÿ¥z¿Ü‡7 w&•Kø	éJW`Wªì˜‹†Øœ †eŸ)î¨Ž—ñƒ!ÆY¬Ê6]4g@EuþTÙ9Æõ±»¼'½ ÐxñpR›@Ëæ¡£¿"µï8¯ïóó8¾‹ú&Xº[Ô§Ñ¸[ÅÇ¡elfƒÓp¶áÄtN`Uí—IQ§Ò`lðUˆP@U”õq/lg»¸]+ÇòÝ}¡ì¶YîæsÆ>%ï|-é$ÐõQ [z>÷ËäÕ§µG¶Rëªè—Gn3?â£¾ÒIc¿ôøã+¿eUe`dÒˆ9Øðàp¨íLE8U»ÛOp²œ‰‡âi4aÃ¦:yÕËõa
2	&Î€a’Â½“ÜQfÞŠ·ž˜¨Ù·‹-<Ê-sOO=‚¦z¶¸Õ1ÒlÌ*ÑÁ˜Ÿd^N/@“‡+¯œs:kizöå²¦‚`Nü¯Ê>ÊœüdAðT”v¾›.1N¯q%È^üÍÓjÜßòÖ©˜±¬Ÿì™+µ"êù¨nÜÔ¡*„
XÚ¡ˆí}n˜h‡°Ëp®%¬Æ­þ¢…>C]ý²HÒÁƒþ1vwFq½ùYÙéL‰ŽoÄÝÓ‘ï†sÊßÏ¸kÚVN¢ìÙZäÝÑˆhë[QŽDQŽ¨µ÷ÓÑxðæ»;ÛYÚa³…À‘H$’ÍÊ_.|Ïþåßðg¿]à¯êmü¿òÇœ+É‹†tK6!gIªª×Ý#W+Û€É2ÄƒXf½.¬fÔñô\]¡¾Š¼®ÅCÖ•~ÞÉ m%TzûDH€ó—«Ž½Uù•b^¶ÕØ!çxÔ/?w{ñPå&}gt*&ms¶´NÑœ¡8t4‡˜PV9–¨JRç~jzêE(ƒœÃ¦ˆš¯zEZžüp¿U(-]ïyÇÈmP„QÑžšÍ‚3Í×g f¸7•Åå6†»(|NK³µ]7{¼ÜeýäOY5¦qéñZuDg™›ö±£ù$5oêÕoÅÇë‰¹ªxFLZ©mÏ5Äõ^©MÏJ¥1ŸX+O½ýò`å`489÷§uäÝòÞ#ÜÔ#…2‹úTeeÊðNQ~Zø$ ¼on+²!¬ˆërºp¨+u/
Mþ“LÓô§
®æi5½¯>lÑ&¦òqS§œwú	ªG½7}¤~‘&‹™<¡ÅÜv'Ÿà˜t¡¸j;kÄ§ª‰³M´8]ùÍ‡½ªšx†'{×¦,4{h6HœzŸA·“†æÒiWr¢=Äº›iÖ&œF?P•þÇiÚµ¢þÖôïcsE“$Ö›§Ö8¶š-M¡$‰DRÏ^y%÷oÛ³gœ}šå¯^ß*•Ç’ŠµE²I‰ðøãÏH-ngGY›bDXššö›^ëR—t_¹{Ž›nüñü¬wXL’‹=W’ømž.BÝ¾e+‰‹X†uÍêæ„={¨c§_Wzˆ
qŒÿ•ý¢æznÓ*b¡"Ž¤Xæ[æ3V«²­Þ¶é6°ÓÔ¥ð„ƒ'ƒb³óï	EíÄá˜Ò6|O%Kâ¼Þ¹Y]*eyä6óµmìîÜÎRny8âc¶ÀvÏ­rkØF£îO¡U7B²§˜(pÐÌ¤Òäí :…“_çvÃ½'ƒÃš>°»®U¶Íµ`)ýÜæykHúŸî°Ôä“fÚJ"<þ¸°­·ÓX(„mn¯µR4<Îåö‰ÆzðÑ7$xÓg¨›ViD+ ^$–¿›¶S¯öŽæí°øù5+'Q/ÄækBÙ\?o¼ßÆ–éÛÆº“œc‰­(ï˜lÐ»š}Ô™ëù~£=ÄDNG×'™õï±¯Räâ¦ëû¨ð=¦3¨¡PÓY¦¿XåU#k@åãfŒëí¤Ô¾6ÏæmWÄ–¶#Æ×IòcžÂ(õUŒ™/¦É¢†±@‹1=Í½ðZ”…Ÿ7>ÕöLÐÙàô=’ bWn^5½»þ})~‚ÄÑ¿¶~ªGjcÃØ\­­+ýþ•'{®²£éßôFŠ6v—µñµ…$‰DRÿ{m
ßç}ÇØxÆÙ§ü«?ü°q™’¼pHÅ±d£‹köÎIÇµ²³¤îïgwÁ†Z¸ ýò¸ù[Ì5k/œg!©w¢ìèŒâD}ŸÈ+ocºMu‰¿r$ŠÂ#R÷Ô
àJÙsµ#¾|(’¿õ,É+oâ:¢Æ4TÏã8-).‹€ÉFw:U^ì´
lŽwì)-nm&!â–õ°ñ6ü›ãUB~3<‹²­™c¿&qÓ¯[Šž%q^äÍ–Ã.–Å—ÚhË¦Ìß¹Úy(ŽP’Ö5­¥Ós†ñ_$hÈoœ„’b¸Wý=ŠN%¬*:Ï\'¢ôá×ìI©t£¼5£ú¶©…}¨ls<ó<äûA˜¿‡¥=»J¦2*
u!¾Üo{Q×¥µS§\Ó6Iª}ÄÜZ9
ú¡|èœ‰"‰f?8CC;&ÅGXß–€\ˆ›aãÆ"i´:©W¦&K(˜â5»‚¸ŽVßçUEn‰ºòáßô—JÅ|¬-¶dÞlÃÆÇqV(„•#Q”÷ÅýèÿP¨Ökí)9šËª/oƒ>+Œek«04Ó
ŠôQZÔÂ§¤ÆBÏŠÄ
K»Þ¦N¿ IØpþVI¬Ë¢:»Z1SÄÖ¶‹"l»éÏÙxDãÆ¹Üì hˆÿ_Ð6W«,Üûy½ÖLí~¿"±nc1HrÃãçô©±îÜî¿â|òžQcúÑxƒî‚™öø	q’Hì‹:!©[	dÀ¢mjm];â]sjO.$Fšé/ßEéôÑ:D.V¶é{°¥$‰DRÿéÕ?æß½nã“§‹Ô<{@ÝÏøÛ¹,¯×2#ÃVHÊà•………gÙl–ÿå¿çÃÎ¤ñ³?ßè,H$É*³>q3%/•o”ö"`¾ñ§D"‘l$bl~=ùrõ·‰Dòc¥í·¿ço~³È«ªóàÉ½Â[¿•oÿX"Ø,Üºuë¹ïñý«ÏJ_Tyÿ—Rq,‘H$’!§¬6.¨äGB>Žq¥›mj4%ðs¬xH$’µ!²®J$‰dm¹ó“?áÔOk9ý4Ë«ê±m?<ãoŸf|ÝÆÿ'Ç’"HÅñ„TK$‰D"‘H$‰D"‘H*eßòïùëßd
ÒÔÿƒ¯Ûx"ÇÎfUËš!‘H$‰D"‘H$‰D"‘¼Ä|Yó'üÍOkùá•üŽyÊ~àÓß,RÿÃê:%/Òq,‘H$‰D"‘H$‰D"‘¼äLÔ¼ÊÙº×øAw¬ñ÷à?Î-ðSé<–˜ Ç‰D"‘HÖ™“8G¢´~zšÎŠ	ûNéÞèœ¬žpàd¾ÀFçdcqEiã
÷FçäåBÚU"‘H$’‡hÍ«üÏŽ×Ð»‰ÿÕ~àìÓ,é<– 7Ç“¼€œÄ9â£fµ6Ir_Àu¤å[$G_¤<¬"=Wií¬'u¥‹Çñµ}”'ÄÛ ò84ÐÄôùËŒ‡+H·*›HyèôâˆG¸|L·F|7ý¸f'}µ“`L´_'öÜÏ3ÉAQ;¨ù°‹¿Rc!®Ÿ!¿™ YeØ®ñb~·Mw$eøMÚùÜ3
óè,xNÀGß€íŽútÕ–mÅ÷ìr8ÿk8ê§iª°Í0ÚÔ°!YQ»Z”EIDSô÷Sm—ñõÞ ^&Ê¬]=WiíÜ®þñˆoú? ]^ÊÔô±{Ï\å÷XÅ<˜#úÕ:õ¯ùUèÍë¤V6$+(—ÑÖÕ?T;Tßžó›Âónh¸ÊcízQ¢*Öïæúì2ë£±×÷ïÆzžÍwÏ1Î©ï*[ X(ùÎÛ Œ› Vx¢ur¸—à4‘ƒ÷h¹éÇñ…f[+;³]Áx¡/‹"ãÅú•Åa.}>ˆ[ËInxüœ>!Öí4^š¼gô->tcÏÄ9÷öG\SÓ7Oãí®•ÿœä
<þÓê§ˆÄºiˆÜãT„XwñsoSôÖ«Œc(ÊŽú;<øøË°êïÕU›‰D²‰¹ùÚOxøoÒßçŽíüý8û›,õº]8É©8–lzCQZ‡Nnt6$«Dj6»ÑY(ÂOf×çIÖvðÐ;©~H¶‡µk¿ø(¤ÆÄ±‰¤
×Qå<,“ ¢Þ+¤û(õ„ƒNeF|7uŽ$}Þ\j‰gQºzñ”üM«ÌTšJŸä	ûq¡Ùa‚”ÝÅ¡‹Â™ÛeeW«²(çy^”LÖ˜Ïð“*?8ý¼±o»p¼ôwpwC>\W;gIöwpWûÈ×»õèy3›Ã¼NÆ¸®Õ„'Ô28éfŽ]®¨¼_b¡vçoÀG›“\ÐìPu{îy¥vÔ•îöwl:‡oú“îö¯ñ$i‘>Êºß>¹!›)ó9Ã½øÝ8"Ô!‘Qð†=ˆ>Ü‹’Tû®±6÷!Um^ý8çx§-‹wxÐ¿Ò†fvÇÆ™/¼Qü‰þÜ_¨èùÅêd£âPÿ¥à°gIOAQ;XÚ®`¼8Ÿ ëôŠÕÅÆ‹Õ.÷\¦
nÕ™KœsÇÏi€Ó~<7’@F=Ÿsôv7=§Ê·÷©ˆî9çâdœÝD*H¿ÚÔô™¯Rq_@i‚ù/õãÉú ¿Q$É‹Î¯_û	Ÿ9^3Ûõ»?ð?=ÍRûL*%©8–lb4ÕÒ©+B¥bP¯ì9NëÈqXÌ+ÌÔ-B%°5§^×,ºòKx?¯ŠÚÒ¥µ£*Æ„Í‡Bež^±ãŠ²ƒGÌ7mçuy+T‚>§ö1ZlÅ¨ 2>+§ÓÔÓ¨kÚn<WŠÙ'Ì°mÅa£ZGUò4ëÕ=.ü“®ü9ŒêW½ÂGÜ+M*© 8ó÷{òžÎ!êöœÄ¨>²³)`géßEÊ¶Ç„™†w¢bb…Òl†ñƒ¡ü/Í‚ÓÕ)°>ÚDÎÃ¡WA¼ÂYúÅN‚]]šm8€tJ<qæ‹i²n;‡!¦9Ø,ÊÖŒçS¥y†mGËz”Àn´W:5CãCØHqGuÎok ìM´`¦Ùª,J0Ü+”ÚcÓ4u5œT{+¹á.jka)ù°àx±¶¹‹åi¨kÚ
¨êÝ¤^å·•#Ñü¹’ö6Ïƒ¡¿ÓåÁ1E©_`KíV˜Öú#¡R^VÛPÐ?Y¡ö[sºþª’UÔÉBe`^*”Md±Ùmd“)p*Ør}‡Q¡¨W5ŠeªÖ‹¥1œË÷yB™"…‚b×3¬0Y©ÐìÀF–é)“|Td;AÍ›õÀK…åbP¬—³jJŒµÖŒÚ8WDåZ£¯“€AQ_¥:Ö´*ÖïÒˆï¨[r‚	¼xËx‚g¯™÷Â ¦€}'žÀ6šìúBÕÏ*ÀFÓF‹zYÉ8'ð³¥˜ûÎhÿªíS%&u2¯˜×Þ@èƒ?›¶´ƒ§ÁÂvÀN'dã÷ÄXÑìÀØözhTš,ÇeµË"~›§ï·¡t6=ÕƒÛÉQ™ 7C&cÇÙq‰Ã§£¥/?|‰§î9×¢LýÜ»å§"Ýä„ÍîAb±Aá¨~;Ÿ§†žÏ‰
ÚŒN}lT0g4µòáK|>èf6™ÄétÏ©hcÍü­•í_›Ðã˜ñ=wå{µùŠã»›vÍ#¾¹2‡RdÜLO=‚N­C”xo—H$’ÍË¯^û	òÃ3þ«…¥Ü±Ý¿ûÿãÓEþÝë6¾—Âã=Òq,Ù¤è^ÚtÊ¶ô'ÜµXºZÓ?&œPý'XV¯qõ?$1ÒÅ7CQvt^Å‘œCÑ;õâW¸œm3äA(óò/¨Ž¡(;Þ¿À|ü„8Ð´nupWu)=UmŠ–¿B¶RÇ8wûŠëÞ9ÉãøCÞøÔGöÂÝs•ÖÎã8{"$“"U]ýú?€þ1vïy(p&Aþ%{æØe4÷çe½ó"àãéÒÝë„ÎX…ªçrx\ý·pÜxÃb9GŸ‚c6B(€pê¼ça<"fªB¨òbºç–b¹HÙ:ÕÊ±ƒø¨L³3÷!l’¢‘–fd¦I•Î"ØóÓ9‡Vx\<7à[yý™ë"oÃæN‡ÒÌä>¨µöiY¶ˆ®]Ô¹öÒüœL*Z=Ôò s¦#˜`ç¤ïdP8d’j½Òì(êc*AÖíÂÑ\nY"”áÙx„ñ©úŒ¹àz»Z7Ã¡²–†›MT‰]J´Í­Ô©}QÍP”û.P3z‚D¼ò%·Öyˆ¨ý¡JÏUZ;?ä
w„%`yp«žÝõ,^‡#ûÙâ†ôHwµ>¾ŒçC„ùä‡({öˆ‰ú9ÿ¯¿>ß+­“¹2*pÜjØfï™jÃï†‰ó	ÚÄd„V•écjH?½Ã!®ŸñÐÛ¥É%)’&à£¯ËAâ|ˆñ°Ú/Þô‘:¨öƒvÆB„Îˆ>®íb#±c¢Ÿ“iÏÑ9É]A\ù:^±íÜfêî¾€«s»q‚íÈU–âˆ´fcV‘±¶Ž!ufæ¸¾þÓ,t©õX{Þ¯Ô¶q§:6'FÕ´j¾ÓÕôQÅúÝa/.{Š‰ƒ1—ã6V—³O˜ÁCïdéx
Åí`Û¿&7Ðx±Ã4‰ŒWƒ˜:«tœ38Ök}´Žøò¿µˆ]«¡šq3A8HÛl„Ë_´Ð7ààNûubÃ½Míà²¶ÝYÝ©þ"‘Tp5lÃ…ÕxÑ«^ai(ÊŽ#QjÂ‡ßj 2ÌšMô”`j*‰ÛÝLÇá2Ç+¸Æ·³ƒ¸Þbêm«P ØqrgJ8Š{NÁµÓBÁ<{ÏÛ§Ugñ ‘S×ð«¿ÅÙ0Ë9.}Î »‡S\ã4¥&äORop(»Y½W;†ÔIÈµÉ$uÜüä3RŸGyÿóÎzÃ÷GºØ¸9úÚoùhýôÍ2&¶$‰dsò¶~Ñ9÷þî÷ü‡ßdù÷?­eY†­øQ#Ç’MˆªZ´rpšá§Î¹jÛØ=’!Öº½´úB¸ãÈv–î¶Fj˜5ÈƒáCÜ¨è]¡ZÔ¥[¼CjÐ;	Üûy½Ö\­!X õOB±"Í—ª“zô>óÛ©yÓªã8·40÷á
èIå~BzÀ…Ò$Ø•*;æ¢!6'€aÙgŠ;ªãeü`ˆqÖ«²MWa¥ÁØà«¡€ªb<êã^8ï0o¼x—=Kâ|éxÏúmáÓZf <Î¯4áÏ)µ³‡Œ00ú+RûŽóú>?ã»¨o‚¥û·E}ý€»UÄ%4U­‡É©¥s8Ûðb<Qÿl	«qH¿h¡Om7å”ÅÊçÎŸc3h©ü`9Qå¾PvÛ,wó9cŸ’ÿH/6YVØGnéùÜw,“WŸÖÙJ­¨¢ÿ]¹ÍüˆúH'ýÒã#<®ü–U!”mI#þå`[ÀƒÃ	à%8™wø	çBŠt·ŸàdyqÉ‹¥i<Ð„
›êäU/×‡5È$˜8†I
KôNrG™y+BÜzb¢fß.¶ðHŒK¨“FMõlq«c¤Ù˜U£ƒ1ïäYN/@“‡+¯œs:kizöå²¦Z`Nü¯Ê>ÊœüdAráÊc¾›.1N/ó^üÍÓjÜßB…sù,ë'{æJ­ˆz>ª7
¨š,íPÄvŠ>7L´CØe8g6^”¼_•e‘þ¤ƒýcìîŒâzó³²Ó™%Þ<ˆ»§£šn¸2ÄGO‡uÇNÑâè&ëÎÕ¿²%£ªbù£·Uå²¹ˆDOMÿ~ÑfËj‹ÂÉêä‡JÞá¼‹Ú»;ÅdEÙá˜â'HÄÅ¹{äªŒƒ,‘H^Xþ[
¯ÿVç<nýíïù~³È_ÿ´–ßIçñé8–lBÎ’TU¯¿€Y†xË¬×…ÕÌƒú!¾‚ž«+Ã#ÔW‘×5¢˜bÈ£ÒÏ;¤­„J¯ñbŸnó6Õ±·*¿ RÌË¶;ˆi¾>0Ã½©,.w>Ä‚¦¬ÊÉ3•&[¦ÆÓŠ•ŽhÌ—¸—…ª$uî§¦§^„2È9lŠ¨ùÊÍ_Žüp¿U(-]ïy¸7›§+¿yÕ°7§K)ÅËb%ª[^ÙŒPr:š7¼ÜeýäOY5æƒêy­:¢³ÌMûØÑ|’š7wY.K¬ÃryÌUÅ"ÄÌ¸.Â5Äõ^©MÏJ¥1ŸX{¾–ýâaå`489÷§uäÝòÞ#ÜÔ#…“«õ©Ê>Ê”á¢ü´I9 ¼on+²!¬ˆërºp¨+u/
Mþ“LÓô§
®æi5½¯²Se­QÙP*7uÊy§Ÿ zÔ{ÓGêbÌ[i‡Oh1·ÝÉ'8&](n‡ÚÎñ©jâÄl-¦ãÅOö®MYäC4$N½Ï ÛICsÆåE{ˆu7Ó\níBf¿­0D†‘Â€Ñ¿l@§º3i‡'QölÍO8—‰å„’ûÍ²'ZéÔ	Ô²BéH$ÉææµÕðê³g¼ŸÍ÷fîßþž¿ž_ä?üÔÆï60o’CnŽ'Ù¤Dxüñg¤·³Ãts•×/ÍMûM¯u©Kº¯Ü=Çqö¬A–×=,&Ém
R’ømž.BÝ>“E,ÓˆX†uÍêÆ={¨c§_Wp‰
qŒÿ•½«õ™ë¹M«l
å¸BDI±Ì·Ìg¬2Ve[fRiÀÁ¶ ä‘É¯…“h¸¿ÛFjÌÜiì		NÅ&>&µ¢¶iÐó"B2¼ó\*Åå‘ÛÌ×¶±»s;K¹åá5_íž[åÖ°Í°™`v6%â4“Û,b†Ns/\¢,@8Î'ƒÃš>P8ü´ôBçdÉ’8¿Nã*ÛæZ°”~Hnó¼5$ýOwXjò‰I³/õË’ÛÙz;…BØæöZ+EÃã\nÈ`¬‡}“A‚7M6º4I#ê¤BÛÅ²¶ÅÜ4,7l§^íÍÛañ!ókVN¢^ˆÍ×„²¹8~Þx¿-Ó·u'9Ç[QÞ1Ùüj5û¨3×óýF{ˆ‰$"œŽÎilÖ¿Ç¾J‘‹›®ï£Â÷˜Î †N@uLg™þ¢ªˆøëJåãfŒëí¤Ô¾6ÏæmWÄ–¶#Æ×Ir«
´ˆÅ_ÅŠŽ«_~ÞøTÑ ³Áé{$AÄ*®Ü¼jz;öRïK×¢LetÏÑbß;]"¡SÌfÀîî¡ÒýõÒŸtðÍôV”#QÃ»sMÿ~êxDªìUY\„-{Þ5®@´>€ûŸq÷Ö#ê:Ëùö@L i¨Òi,‘H^ž¿u£µFAûòïùï³(•§?Rd¹K61:¥Á;'y×>ÈÎ’º¿ŸÝ›åhá”#Q”#âÊù[Ì5k/Þg!©w¢ìèŒâD}ŸÈ+ocºMu‰¿r$ŠÂ#R÷Ô
àJÙS]†§…Ò(ù[Ï’¼ò¦ˆÝ¦.ë›¿Õ!>¬+XR\“îtª¼Ø?$h(ØïØRZÜÚLBÄ!,ëa1&âmº…±“Ë'{Ï¢l+åÌu"J~m)z&ADSÉª1WE8qy©¶,C7Ä7µéC„”…k ˆëhB]b›ß Œd)åd9%i]ÓZ:=gÿE‚¦|¬g2	"Çf€.7;ælšb¢]­–e±¨¾mja*ÛÏ<ù~æïßaiÏ®’©ŒŠB]H/÷Â^ÔuFiíÔ-QÖ6‹ª}ÄÜª…(  îçCçLI4ÃøÁ	úÚ¹¶flgâ¸®¯QCôØ7I£ÕI½2µT;,ˆ×œoÏÕõyU1úÞËíEÈ‡G|Ó_N(ó±¶˜sÆlÃÆÇqV(„•#Q”÷ÅýèÿP¨Ökí)9z‚„ó*­º¥íÏ¥*,ÒïVs»"}”V'µð)©±Ðó…"±ÂÒ®·©Ó¯h6œ¿ÕAë²X]ÇÛL;XÛ.ˆ°í¦ß°7€gÇ«/ª*÷~^¯5S»ŸÆïH¬›ÁXŒA ’Üðø9}*B,¿k8Ÿ¼gÔ˜~4ÞÁ »¤ç˜Þn6<'?‡?ç7Öîc¾9^±ûuÇbˆ`êÆy%rºj¼þe5<ÜÒý_š¯&°x¯ÖÞƒwäBÊé7ªÎ¯zïØù	­ÆMGóöêWH$É'QO&    IDAT&åðwö-¼
¼»˜™½Ë¿ã¯~³È¬«å2jÅŠWže³Y>ü—küýž7:?’"üÅÏþ|£³ ‘H$«ÌúÄÍ”¼T¾QÚ‹€ùÆŸ‰D"±¤ç*­ÈxÂ‰D²†üð_§¿çß|ÿ[ÃñÿóµŸð©}?È˜Ç«Î­[·žûß¿úlr’ç/ïÿR*Ž%‰D²1ä”R­#)J>Žq¥›mj4%ðs¬xH$’ª9|‰ÏÝ˜iMco&VusJ‰D"‘˜ñð¿8^ãUà¿Ð9ÿüûßò;à‚ã5~Ø¨ÌIÖ©8~Šc‰D"‘H$‰D"‘H$ÉzðGÏžñß¥¿çí%ãÖx7^û	Ÿ9^cuõ­?n6«âXnŽ'‘H$‰D"‘H$‰D"‘HüðÊ+ü­£–Û[^5ïþþ·|”ù°âåG:Ž%‰D"‘H$‰D"‘H$É
þð
|RWËÿUcŒvûÞâo9²°$Ç/9Òq,‘H$‰d9‰s$Jë§¨Ùè¬˜Ðx±àdÞáÎÉêá		NöáltN6ÇP”Ö‘1ÞpotN^.¤]%‰D"y¹ùð7?µñÿÄè<d—ù·K“)Éº 7Ç“¼€œÄ9â£fµ6Ir_Àu¤å[$ËÞhc3äaé¹Jkg=©+]<Ž¯í£<á Þ†‘_À¡&¦Ï_f<\AºUÙDÊCï¤G<Âåcú»5â»éÇ5;Aè«»`¢ý:±ç~žIŠØ¡ñb~·M½2K"wNä[ÑÎ¬È¿êoÒv¿IN
¨¿HÛœkÅsŠ¤øèpa+8^mÙVÌp/Á.‰ó¿†£~š¦JÙ¡à÷¨äìg°¤ÆB\?cžÖx®ZYéìªÚ-=âë½A¼Øµ=WiíÜ®þñè¹v’¯éc÷ž¹Êï±Šy0Gô«uê_ó«Ðš×Ic;ÊQXÏDxÂA¼NõÕÕ·çüf†ð¼®òX»^”è£´>Þ¬?ÉõÿeÖGãx‘ÒYVãÅsŒsê»Ê J¾3ä6@ã&¨ÞG£hî%x Mäà=Znúq|¡ÙÖzÜ´¶]5ãæz•Åa.}>ˆ{öÿé•g/}Î ;—qnxüœæ‘X7Ný…Ióô–¬xO}ÉÞƒ%‰DR¿Nÿ´–3¿YäÏ~ûûÜñÿ2»Ìï^y…k¶Í(	‘</Rq,Ùô8†¢´ÜèlHV‰Ôlv£³P„žÌ®Ï“,í0Ü‹ß
‰ó!Bí!&’6\G}4Òˆï¦%9A¨=Dh,…Í}¨¤zÐöã"A¤=Dè|‚¬Ó+T”}]
©±Âç Ã^ó4jþ‚.l&ÏZ·²JSÙ“f?(~g¨=D$ž²L1³Â‘x¥« >öÕz5myNcð„½(™¬1Ÿá'U:Zý¼±o»p¼ôwpwÕ¶‘‡³$û;¸ûñ	–Ýzô¼™Ía^'c\ojŸ …pâ„ÚC'ÝÌ±Ë•÷‹@,"Ônâü
øhs’kšªnÏ=ï¢Ô.ºÒÁÝþŽMçðMÒÁÝþ5ž$-ÒGyÂAs±€€CnÈfÊ|Ža¼ˆÈ(xÃ(:^T?Î9ÞicËâô¯´¡™]Å±qæo?A¢¿ƒ÷*z~±:Ù¨8Ô)8ìYÒSPÔ–¶«vÜ\å²p_ÀU©‚ûT„A7ÄÏyðxÎÏ8éŽœÊŸOÞÀãñp.žg—Þ@¬qö¬¼µVö©õvêVc‰D"‘¬)¿}åNýÔÆ½WÿØpü/–ð/.[¤’¼ÈHÅ±d£©–H]*ƒzeÏqZGŽÃâ¨Î3u‹P×mÍ©×Ä5¤®üÞÏ«¢¶tFiíÄ¨Š1a3ä¡P™§Wì8†¢ìàóMÛÅy]Þ
•`…Ï©}gŒÖ#[1*€ŒÏÊ©Ç4uÈô#êš¶Ï•bö	3l[qØTiÛ¬W÷¸ðOºòçP•¯¹;ä>â^iRIÅ™¿ß“÷tÊ:·Ÿà$1*™³³)`géßEÊ¶Ç„…À†£¹àº@‡ìúBÕC)ÀFÓF[©m=ìtB6~Oü¶f6À¶×C£Ò„wÎ 4²­°7Ñ€™3×	i³ðÒ.J# ¾ç#pÔ«¢ß´ÇP”õºúY‘â(Í“0l;ZÖ£t4ÒÒ,Ô|B¬æEi­dÒ¤ †w¢b¢Rêp/^g–ÄØ4M]M'U‡ÆÞJn¸‹ÚZXJ>,8^¬mîbyêš¶ªz7©WùmeÇH4®¤½Íó`èïtypEQêØR»¦µþH¨”—Õ6ôOV¨ýÖœ®¿ªd•Du²P˜W„
e`YlvÙd
œ
¶\ßaT(VU´[P,á\¾ÏjÌ)»î\@ßO’€Ú/d™ž2ÉGE¶Ô¼YÌ±TX.Åzé1«¦ÄXkMÁø¨sET®5ú:	õUªcMû¨€¶†‘óph °mÄwT¬ä˜À‹·Œ'xö*Ip/Âa
Øwâ	l£©ÄxQÉ8'ð³¥˜ûÎhÿªíS%&u2¯˜×Þ@èƒ?›¶´ƒ§ÁÂvPÕ¸©¬vYÄoóôý6”#c@96=Ì¥'$oðÑ5€kD§~ŽÛÝÂ)î™’o¯éþÔÊqñ
Ç÷”&˜¿eòžkÖ6ÍV§h÷×Ú£zÍÒýæ©ógÖïÁÛA"‘H$ëÁÒ+ðïjã“ßdÙó»?äŽÿ<³Äo_ÕJåñË„tK6)šƒÓ¸:ýIw-–ÇÕô	'Tÿ	–Õk\ýIŒtñÍP”Wq$çPôN½x„Ç.ÛyÊ¼¼Ã×1eÇû˜Ÿš¶Ã­îªŽ"¥’£ªMÑòWÈVêçnÿCqÝ;'yÈŸú¨3¼èÇÙ!™©êêçxÐÿô±{Ï»8ˆ@3	òÎ©™c—	©Ç.ë‡L—î
'¦y¨Šq.‡ÇÕÇ7ì!–sô)8f#„§Î{Æ!b–¡*„*/¦{n)–‹”m¡S­,;œ¹ÎÄÞ Þ® Á.ÎŸ÷æœ;ûð7L“È¸p5(`¼#°
NÍä–ñ&’
®†m¸°Afš”j7ÇT‚¬ÛetXƒê<…TJ<cüàeak‡­åo² =õ:wQçFØKU4%G)øðTÑêax<ÿƒ¡ÂÛgØ‹K÷Oxœ_hÂ¯M"%q^Ô1ñŸfgÎ)aât[A#¾
Ùx„ñ©úçb\o×ž*ki¸ÙºpÎR¢mn¥Ní‹j†¢ìØwšÑ$â•‡ª°ÎCDíUz®ÒÚù!o¸#,[xÈƒ[õìî¬gñÊ8ÙÏ7¤Gº¸«õñe<"Ì'?DÙ³GÔgúùq¼`2Ð;¯*­“¹2*pÜjØfï™jÃï†‰ó	Ú(€V•écjH?½Ã!®ŸñÐÛ¥”VF£Hš€¾.‰ó!ÆÃj¿xÓGê ÚÚ:#ú¸ÿŸ½÷
Šëêóü>²-ƒih,`]jÃj[Z…V4faÒ½+gÑÄˆÑúi×€“5°Þ¸<~T1ªmÄ3ÒÎ²¬VÉXûx¥ˆ”QVóh5O”ªaQ5S©Ç¤†y¢H(e¶Ì¦;‘W.•›ÕÚ=àv)™†Æ`ÙV^œs»ïí¾·ÿ‰’Ï§Ê%soŸ{Ï=çÞsîýžïù†sÕßí¤LK9N$wõøqõ$ïñ¼ËÎm60¡šwØ:/±zK¤5ë³2ôµ™°÷Rn&0‡ô÷¿1ÍÊ`‹¼µóýZ>ÇpÊ¾9<"ÓÊ|Ç
i£´íÞôŒ÷5â*‹2q0Ã¹ÈÆR¸œ½ÇÚ'ˆ…¢8Üvª~FÆþ"ß~Î ¬—x©ôê„=ër-„BúÍ`Ç ûi˜
páz]=vnì»L°¯¿i9¸¬ËîT!ýf5¬z]¸û^€åããìì§Ä™‡¡¯féuWò¢æ,v¶¶°ú3*REÝŠ^Þì›ÉüŒû,®æ
¢›’ïAœåó÷Žv^¢¾Ù‹³í6K/ï0˜
¬ßƒ½
…B±6|ûÔþd›1§öû¤x|da™¶lá{îÙ
Ìb5QÂ±b"ÝBKV§>Ê¥PÒÀé¢ÐB´ÇÞÿèGØÙ)^T×Æ±°y0|ˆ½i©%]:m:¡^$pïg[IÒ1’Î"Ñßœ|éi>‘#·˜oÞAÑvHáxþy¼Ä‡7 “rE:[-~ü-Ñœc.bs¦}F¹ñ®&x0ÆÚ`U·±BÊA8„ø•¾ÒŽ¯vZÆq4õü¦ãðÒå†‰}c0ì28…ë†eüÍëut¥M‘‰µ™²?òk¢/aÛË>î†vSQË·>÷ÓÈ[|ZÀÇ¡u|hæÐ›Ð]£R?mÜ&†ƒr»
>` C:JßñrsØ:Îvõ¹×„øóîtÔå)X~ »Ïæülæ:ÞolS’âkV‘@×FnêùÜ×¬tŸ–t–Râ
hW?f~ÐKEÄ"Ævéî{îæÈ‚ÎÀ†„+½;UìN€Fü“IÁOQbàpûðOæ2ð9Mõ+5Ø°I‘Wþ\Ö qoë),Ñ‹äöó–õÀDÑË»)æNbš{lêÔTPì–}¤YŸ•£À˜d^‰-Bè‡ó¯œµ4m{…sYsA0'þ)°2'9X*'Wªð^qÁè c´g‚Ò_˜°¢ì™Ë6#êÑ(¬ßÔ!Â,Ë!CÙÔo®~]ÄÞoâóîQö4ãÚ.
F‹kÜ ØÚK ßgšó÷C>5}VŽáØ[šáÝÑˆxÖKqtŽãè”µ÷Ó‘·ø|û({šŸ³H/‡ÍG¡P(~ªÄ·láø6¿ø&ÎßÖ9ÿQì[¾þw%?(áX±	9EDº^÷^Êo&Ëbšõº°šyâi´]JPQ@^×ˆLŽ!kŒN¿ÆI?
Y\zÕçºDH€3–ÂÞª\A¾˜×m!åõÓÏÝxÎÄˆãÀU;-]×Ë >µ>˜&Æ»íòxÕx¥+*<[CÓ•\´©¯1eººt#®é‚aÒIêÜOQ[…el2¸ù2 w¤¥!c¹&¦ C2¬„Í„ðÜ€·#ÈÍÙ88c|q`†›Sq\ná05¿+el4NúSÍ]=~ìµ›?^îŠ~ð''„Ó8õx­¢SÌM{ÙY{Œ¢íz÷[fÇñzbî*ñµÇd¸W×Ùž©liÌÖrso?9X	Œ‘sïê_Ïí=Â}VÎIÈ,î§Û(SäÌŽDø$ ñ_©Ê° ¬ˆërº°Ë™:Õç„'ÿÞ_Ç¨ù<û‹MBþý¦Î9ïôá—[¯x‰þÒªßs:ó²;vûd¾ýæ÷^Z›ºÐÊ#Yi‰³ BRTöê6¸I¤ÕIå‹‡àÄ[Òé„úã»Óîß¢îý¢oÎkÄzñÔ"{©ÉÖì¤—ƒB¡P(6OmáØó6þåý8K:· ½±où~Ë®oÝØ*µ8žb“àî{]ÚÁÎœÅ°<Ôì7ý­ý¸œÒ}ñì=bºðÇ£³ÞyXd)B"ö\VBs	Ê_>›³‘ˆeX^+'lÛK9‹Üÿ$³ÓC,ˆcü/çý“—‹VÙ*s‘BDI-ÁF`U·…—ƒ*ý¢w1¢Ã7™^@N…E

r7‰gØÒŸ\ÈŽ _DHÆìí¨±?2s}š8r:.šwZÆg”‹ù,„	¬™h,Xü˜ù’ö4ï`91=áæK)»Gu¹yÞp‰ø”iâ^JLiyOÍDc$ëB‹üER°ëkÇ?éÇ?¬ù‹ð
œ	'NøÌˆÆ>›kÁrì6‰ÅóÖØon°\ãƒfÚLÜ}/õ9[oÑX8„mîFk§èðö/ •Ub1-¡'&ýø¯x“Û2¤÷¤˜…ð8±òõ°ƒ
Ù6ÚkwÀÒmæ×¬žÄ}!_ÎæÌøxáÍŠ§?6Þ;‘9–)ÅñªÉ½«ÙF¼œl7ö
0"èDãôö‚ŸEIÄM×·Q9ô›•üûÍ —÷M•mm O–]†r°,»ûÍÕ¯/| ­™Ë»ÃãSúEï´˜Ç7“!)4úëp³ZãÐQÂEûZÿþQ¸
}s´gÝÑíKßÙv‰5wø²ûC¢4°'§…¯ó-…B¡PlóOmá½m%L?“”Ÿþ8ö-û—l\Æ«‚r+61º¸f¯ãnHû ;EôÖ~ö¤,È¡…ÐO›¿ÚÄ\­öÂy
B}uœÍã8‘/ ¡£‰m¹-L·	ò §ø;:Çqp‡è­E¹ \¶òÜMÉ 7J#ëµž"rq;®NÓP^ÏÝyM)Î‰“…ît¢eð/Ã4ô¤,Ž÷î
¢“ÂÝ¹qs:Y‰PC2®íBjìäÜI.†gQ·y2óî_¾âÓMEOÆÜ98}29>::ujy°#@Õ_bÁ x( EÌ1.ÔÚñb)ËØ¾ç^“"|r¡!­ŒúÐ e"/9-öe‰p’–×¬µè)
4¿`S¢£ÄoN^&àèÂ§ÕÅ:é¹Sø³©…}Èoq<ó<$ÛA˜¿uƒå½»³¦2:
u!>Ùo{QÞ<N}³Î¹¦-’Tr‡¹µRÚ¡dèœ‰‰f“ÏfÒi®¹Øq„õÏ3˜`+Ó;Ù3¤ÑîI½35Û¬€”xÍ®?®w
oó
"1E]ùp‡/»s	¥bÞ×fš2o¶`ãÝiaGç8Ž7Åñè~[¸ÖKŒÏSd$—UÛžÛ}VëÖ–gh¦42´QcôaY®S®Ÿ
P#Êpþj¬ëbu×bŸÉPÖeWH¿¹êuáÞÏ¶’³'tñŠYqúÀa† 6¤µ7H°Wn÷ úÓÒ,„NãÓ+Ê¡£„C"$‘X9 ©›	dÀâÙÔžum;ˆwÍ©½‰1Ä>yG³—úã$be›¾g+…B¡Pl¾yê)þh[)ÿrn‘ø€§>äObKœØRÂ'EÊyü¸²eqqña<çíßñç{ßÞèü(2ð¿÷û…B¡XeÖ'n¦âI ÿ…ÒÌþT(ŠDôÍÛ"OV{«P(Šµç…~ä_Î-²ýÇ‡‰m€¶ÍÆÿõ¬ò®fâêÕ«|Œo·>Ìþ£<øÃ[¿RŽc…B¡Pl	g`¡qA?’qŒó]ìlS£9aÆƒB¡P¬
u]xT¡P(OwŸ~Š?ª(åÌý8UÒy¼è¿§o›ÿG‰ÇÊqü¡Ç
…B¡P(
…B¡P(ŠÍLõ?rzn‘
óø»-[øÇÛlüû­Oo`Î6/›Õq¬ÇS(
…B¡P(
…B¡P(«ÂŒtóÔ–Ä¶g>ääýEö>øas¦È%+
…B¡P(
…B¡P(ŠUãÎÓOñÇÛlÄtâñsáOïÇ©}ðýæL‘J8V(
…B±ÎÃ98Nýg)Úè¬˜P}®ÿ¤Ÿö¾ÎÉêáöãŸìÂÛ±Ñ9ÙXìÇÇ©å÷FçäÉB•ë“J?`àµóÚè¬(
…â±äËgžæØó6·$Åã’‡9u‰¿­œÇ**µâ1äÎA/E«µH’û,®ÎV®6yœò°Š´]¢¾¹‚èÅî†ÖöTža?•a¿„×zj˜>s±á<Ò­Ê"RÚ'±‡\xW´j¼W|¸f'ølþ˜Øw™à#ŸÏ$ÙÊ¡ÃKWÑD<Ã~ÉŸDG¸|2·óUŸëÂç¶Ad‚ý‰²p'œÈƒ,‡2ù]šÔ<èö*´nó¦¯‹ð™¿‚w|ÔL¥Öc*)×#‰ëê_]qÃ}aL›{™›”«¬ÓØè _¼ä§‘ÔºÈ@Û%ê›wÈ?îðe÷[ÄrK™FQ÷({öÎåŒUÌƒ9¢]-—Í¯B{h~Oju“BÚ³ñÓÁð\Ër(üyN.fº á*÷µëE–6JkÍÚë¶ÚœÄïtýE²
$ÛµGèçä»J1 ‹Yß ‚qÔ<£‘ñžìkÇÿJŒÀÁ›Ô]ña¿®•­U9d*;ë>0±¨¥8š®ß\§ºèlu6E>òà;‘½ü¬WIèôxŒU¡Ÿ@°•Ä•-„8}à0k‘¥þ@ÖÊµ;~:²MœK>öããì¬¸Áçïeå‘ÿ˜¶“
…â'Åí­Os|›_|ç9ó¸ôáCþÅ7qþÛm6"Ï¨˜Ç›%+6=öããìD÷Á¡x¬‰ÎÆ¡r£saÅ÷fÁµgÊ\ÕxßqÁBtbg°c ñAéöÓØÒŽçdü^^sC|l)»<Ã8âÄõ¢j_#.Âö1Óá¥«§‘ö¾`Rà°4Ö­n§bÄ±ç‘`†±ƒŒÉ¿ÄÇ=L_×}¸k×kH'?ö#ÌOP4-×á{Äz
¹»|¼ðò£ð²î¬vNéN=ŽÜf¨
ó{2Èå}A¬`æÝ¬J6úöÃ@‡—gú HÁÏsÛë8Jr×›ØûM|ºÖ'ÉÐF¥
¾éÉÐV›Ò×ŽÏ
á3Œ
‹¶¬qØC°#Š÷Šl»:‚Rì|
oÇÆ†ïçì¯6P¼d.v™•«Øf t”pHÄÊýü™îÉj‡ˆìeqbS Úw‹r¨µ*» žaŸy8å¥«Å‘xV<Ã~ßñrsxŒ™Õ®÷Y\»¹oñ	±øç¯õân:Ï¡k%‚žÀç)T•Î)G>ÂS°¾Ñˆû³O­Mü7ëÝÁz[D	Ê
…bsÞú4ÇËK8õMœb¹~›ýÇ‡üâ~œÞm¥üöa³¢„cÅ&Fs--½¨¡×Ü+{P?xt1fîñaRšp¯‰ß,½ø+x3éŠ*n§¾™¬ÂÈfÈCª3OïØBûækvˆý†<£,õ<%¯ŽRßYŠÑd<WÂ=¦¹¤§ïP^³Ã¸/³÷˜¡*m³Ñ­#<µzwß¤+¹Í•«‘tøˆcÅˆF8œÉãÝ{C÷ÑîöáŸÄàšˆÏF]Ù¯2Ôm¢‰e9¼†«,ÊÄ(4¶dH¿#š5‡B„¶E&˜ ‘Fý®¾vqÂ£ÓÔ´Ô$·Ÿ¼Ì€& I±Óî¨†\¼Þ×dFšã&/ç}Œ{ÃPõNN§ÒQM]­pó	p5eqÂgLœì}»pe"_ªU¹ —ò9ànJJ`9r;e{¦gs7+ÓP^S
H÷nDïò+eçàxr_Öò6Ïƒ¡½ÓåÁ~|GÅ"Å%¥0­µGÂ¥¼"Ÿ ¥}²"Ý­•×,‰<îÉTg`RLBP
qle6â‘(8Øm‡Ñ¡hp­Š9ºÖ3¥1ìK™‘P%ŠG™n_‡¾4:$¨µc#Îô”I>ò*;AÑö
`ŽåÔz1dï³Š²ôµÖ¤ôZ?—ÁåZ¤¿'ƒ£¾@w¬iÕá¥¡2Là¼–6ˆ”¡­¶Àó’ÂÜ!˜e»ðtTQSÑëÒ?ë°6j^©†aq_æÓÏ	|W s_Ë¿àò)“{2)Ækïàèé‚ß¶,O¥EÙ»œÝ}B­`{ÉCµ£QnÈ6¡ª(«¡®«]¡¹ÿfŽÎQ K™Î~•¿F¯;a•æ#!Å½¡ÓHµ:Ïµ^7eÒí‹þXzð¡ó\ë­e6N§Ø¯w=÷‚MÑÍ‡Î7ádÐˆ™h,ÅñÄ%IqYæuVž×à"îl…HÄ‰Ó©;­Þ­í¦7¤WÛ‡<^$‚S$e4Þd8OâúôŽeíXºÁçi}irÐõnˆ”v°=ƒãžÓ™=²MÓÚ?í|Óc|‰7C;`>ò6Ž½Gpu£Äc…B±)¸õì3ü“çmüé7K<ûP¨ÇÏÿøî/ÒSQÊWO+ñx3¢„cÅ&E8Ó¡õî•Ô)YEÝ£B„ê>ÊŠü«û6áÁ¾<>ÎÎæKØ#s8ô¢^(ÀÝ<ÃDl†<¤ºõìÇÇÙùæYæCGÅ†špµ‰O¥PähƒÈˆ,S´ü¥RJ9c|Ú}[üîÕcÜ
Ýæ…¼”kÞm—¨o>‚³-@$"R•WÌñy÷[Ð=Êž½¯c' )b$Å)½“ïBJh†×L§î
Ó<TÅ†>RƒcHàÀ>` !ê¼áa¬c€`§aÒ•§O3°’¡nSEµœÊnÑÑiOô¢–…Ø™J_£¡aX´j¼¯8ˆ‡ŒMÕÑe™~ ÕÉÙˆRK__Ö×dNlê4ï¦Ü(/éf‹Œ`î:ÕîÃá±äñæéíkÄ¥ûˆ×Dû]ø{l†kÒl»¢„‰è–F¦rÕœ®À°…û3³*!Î’åÙ,¥\¶EEÇÇÙùòYŠFô.¿ÜCUXç!`t¶]¢¾ùm^pXŠ¹ÍçW+ØÓ\ÁÒÅ1èÜO±bƒ-|ªµñ9œŸÄÇï^Dè?ÄSÃ ýGx¾÷d¢ŽR„[
Ûì
S
øÜ0q&LCà–ÓÍeHí}\>é¡½Å‘þ$Òtxéj±KW£l¯x‰”í`™F8)ÚŠ†sÕßí¤æ´7œG'’»zü¸z’÷xÞeç6˜}¸û,®æÆ¶ÎK,‡ÞiÍú¬}m&ìÇu‹~G—ëÊ`‹¼µóã+ã     IDATýZ>ÇpÊ¾9<"ÓÊ|Ç
i£´íÞôŒ[¶ÕVHárö3xhŸl ŠâpÛ©ú‰Á€ês]ø*§	/¸pU:€™¼û9ƒ°^â¥~Ð›¼ÖÝÃVÒo;`ØOÃl€×ëèê±scße‚}íøMËÁe]v§ªD;I„¿G¸*«paƒ…i¢ò}Ã>&îva¯­NèU­‹ wß°||œã”8ï‡ÎÖ ÁV€B–P4éuCè´‡ÃCBpm½vž©ã4]Ó9zû[{	ôáKñçž‡ `HnÓjªgeˆÓžÃÔ‚´j®çþ ­NM(b5eƒQ[YDøÊä7ý^Üˆó:ÏµÞV®ŸâÀ¸õñd	áä#<ž)‘ÿ¶~ðùð¤ŠÌÉË©*g9íñIÑ¼þÃ#LýÜ»®‚u“"¥ˆÆV†÷~¶éÝÆ#oñéˆE¨
÷Y\ÍD/6%ß!?8Ëçï%rq;®ÎœÝ>¢výùNel'W[øT¾Ôß­fo*ŠMÁ¿öþéó%üóûqž•Û*~|È÷ãôV”òµn!=Åæ@	ÇŠMˆndÝTà4ÃG¹³J´Ñ{Á²ü7öþ‡D?8ÂÎÎ,ßúpÜ0kÃ‡¸ÑÑ›æZÒ¥[ºAtoúîýl+ù«VeºHô7§@÷‘Hó‰öÂ{‹ùæm÷Žç?‘ÇK|x…L–ÎVG‹K4ç˜‹iÓ~gõ{£ÜÂ‹>TÁjcU·…L‰!ÂNis%…Çês]øzº€LBfR€ó“$\ÍïÎ@G]ÆôD&â°~º{õ¹.|-]x§
Œe<òk¢/aÛË>î†vSQË·>÷“ü¸ÊS×º.ošCoB^æþ3† TÚ |6À@‡t”jÓ’-ÏŸK¹æŽå@•ûlÎÏf®‹ÏÛ”¤øši°,µ‚Åä¾¹¯Y!é>-é,¥Ä	Ðþ®~Ìü —Š6ˆEŒíÒÝ÷ÜÍÿ!œ
	·vª:<Ø É@
QbàpûðOæ2ð9Mõ+5Ø°I‘Wþ|A—4qoë),Ñ‹äöó–õÀDÑË»)æŽè—ƒF5»eiÖgeÁ(0&™Wb‹P#úá|ã+'Dg-MÛ^á\Öf0'þ)°2Çº­ÎNÞ+.`ŒvcØƒWÚñÕNË¸¿…aZÑöÌ­mÈœG%"
X–C†²sxérÃÄ¾1vöÕ
Ë¸Õ×ëè2Ü³«_±÷›ø¼{”=Íã¸¶HXnè¶½ú‡|Pç„…ãC CŒOý·»’ÚCMÔ–Ad\
Ì'niuRùâ!ø
 wo/Â¡œ{È‹È¸ømÚžYS8úå%‹<
·²6‡´šƒ9¿%ý´k¢¹d¼`kýÀTS-eD?Ab€{ùÖ‡|jÑÎØ_"o.ïü¢,ÅÑ9Ž£SnÔÞíCG	;… ¼“;|™ê)#oÉA9/õl_¥¸Ê
…BñhüßÏ>Ã?¾„öÍRB”ü?üÈ/fè­(åÿSÎãM…Ž›SD¤ëuÏà¥ü`²ñ ¦Y¯«™ù!žFÛ¥ôðäuÈä²ÆèôkœôÓÅ¥W}®K„8s!Sp=â§c^·ù—ƒ‡])Óm'»¨Juf®OK§S†lI·p"$‡8þ+“ßŠÉ·4Nú®fW{mÊ‚Bhš‰Æ ¯XÃ©H'©s?Em"”AB°ÉàæË@ÆØ´2–kb
râ´xÇü,J£ÓNUÜœƒ3Æ'f¸9ÇåSó»R†ÁÈX®›—ýàON7f±Áõ¼V
Ñ)æ¦½ì¬=FÑöÝIgzjø`]¦Ë›`î*–ñµe¸W×Ù=Ë–Æ|`-7÷ö“ƒ•Àh9÷¡~ðõÜÞ#ÜgåŒ‘TQÅâ~*°2Å²­®Ê° ¬Œëta×fIœžü{£æw¸j§ezeŸÊÜh£)¤ßL8ç>ürkã/Ñ_ÆˆcVaîQg^vÇîaŸtápÛåsVWº‰Ã³5Ô9]ÉÅû¥›x†{/­M]hå‘(ƒþ7
ûOÜŒÐê¬$¡Ä‘8N4cmÁœ¸I¤µ•Ö`aˆq:Ëñ¦f@^Ã:­V—òšêúñbm¡?E”d-Ü¼î³8j`þj>m‚õÂ³"PhmÕ†®“ P(éü»¢­üwÏ—Ð7¿ÄÓ2æñvóxV97
J8VlRÜ}øà;Gs,Ïšý¼ §½ë±—Sº³W§œÎ½jN¡ÊÃ"K/¦Ç±Z¼<9e='·AèkV:¡¼öpJº¯‰~ ö[&{$ÇÐÉË‰iÖŽJk‰Nw6î
“A`t¯Vu›9¤¸ûÚ-WY÷¼áJ‹Kª¹¯á#N§¾z†ý4b"Zuxé2¬P/ZÈ py^r QQþ¢9I÷4G}âciUÝ|QfÒ
¬1%„M€×Ç©ÂxU0¬ÅF¾‘¬-œAB\7.Â—^®«HÏæZ°»M"Ž£Þq¼ÊÄ~sƒåN/{ÐÏœ¬«ãØÍ!Üˆ‹™Ãc\¾)·*«HD×â/¤†á±H‹‰¹†¾ØxV¾žƒ½;„c|ìµ;`éó!(zu-Î(î‹ùîQöìÎæXÆw/¼iâŒÌ±Ìº)EpYÍ6*‡¶:­}'9Ð¥-—h£†£T½ãÂ5{OÜS}»p'|}óß3…õ›ˆðg.pó•.|•7dÙU3mQÁZ‹²#‘F•r
ŽºDŒâ™©*ân—cAj±Úu¡_çÃú¸¿Î‰æaªiœµ4‚¡¡C4	›1'† ®×SS…ûëDLáñ!¨m`väÏ˜ýy/îÖ ý'|kÇ‡Î7á\H	‘…¡ñ)~îv‹pCú3O1» ÎÚ&1ÄÁ9}^Ršœg_¬*'	5ÑÛÚ‹“éãn„ŽÆÜÍk¿•Z;éèöKu0»ÏâÜÑ‹M,¿ša‘í]^›I”ïì…B¡X/þmÑVÞ·—ðç—Ð<Æ/þð#¿¸¿Hï6ß<¥œÇ›%+61ºøn†¶SDoígOÊ"Z¸ ý¯ù«MÌÕj‹•‚D_ggó8N¤{#t4±-·…é6AäGç8î½µ(€ËVž»)ô&Cid½ÖS2®šŒi(¯çnˆ¼¦çD‡ÉBwºæà_†ièIYïÝD'…»s!,âæt² ¡|‹ãåCr1<‹º]5Œ‹oåo·À3{MžGç|–eä0„É=¤ˆ5ÂIZ^³ÈýOÖò£Fº¹#_ó;<Æ…Z;þ?þ×$ï…“—	8ºðia²éëKáÏ¦&Öç·8žy’í ÌßºÁòÞÝYS…ºŸì7„½(o§¾Yç¾Ò¿Jî0·ê’”v(:g"C¢ÆN`×Ú" ù|ã§Å&—!zlez'{†4Ú=©w¦f˜ ¤Åkvõøq½Sx›W#oñùv1Ý^„|¸Ã—Ý¹„R1ïk3‰%f6¦/:…è?ßÇ£ûmáZ/1>O‘mzxr{nôYa¬[[ž¡™ÒÈÐFi÷¤>ýZôÖåú1åúÙ 5¢ç¯6Áº.Vw
ýL†r°.»`G€ª+¾Dÿ¤X_XQP]h±q-DcCŒãÓRè=|@Äî
ìE¸}åŠn¾Ó/r­·• HDä#ˆ;œˆ31Äáµ‚­´àña‘;±˜ÜÏC§3Æ:<N[°U.<'Ñb+['â ç
ùÓãÓò¤o!tZ.Rw˜ñ¶ ­­A‚,‰,PV™±Dœ	ÑÔ›º8^f4q»,r3]T%áœÄš" Ç¨¨±'BSÇÓÚI­½ñžþ›í‰8Êâ^iâ±U;)Bè)ÑX¡PlvþÏâ­l¥„?š_BóÿÍïä÷—xo›yå<Þp¶,..>ŒÇã¼ýÛ!þ|ïÛEþà÷~£³ P(«ÌúÄÍT<	ä¿PÚã€ùÂŸ
…Bñø‘ºðÜ¡ó×èuÏò‘§pó¦ ?@°µR.ú—ýçEÝ£ìqÞVñ„
…"~öíwôÆ¾5lû[Ÿæ¶ÙXØòÓ¯^½úÈÇøvëÃUÈI’?¼õ+å8V(
ÅÆpª¸{ŠŒ$ã?QÎ)Í	ü3
…b3qâf„ÖV·Áqùè ‚MgÆE6·¨|è<×zÝ”iÎäãoä¿f€B¡P(þú¹gÙúþÑBR<þÛ~àýûKüñ¶â?ñx3¢ÇÊq¬P(
…B¡P(
…B¡xù¯–¾ãÝ£óøÖ³Ïp¼¼„oŸð°›Õq¬"M+
…B¡P(
…B¡P(Š
å-y–eÏ¶íýî{NÎ/QôpuEQEn(áX¡P(
…B¡P(
…B¡Pl8—KžåW¥Å†mç»ïùçóKlUâñº£„c…B¡P(ëÌ1œƒãÔp–¢ÎŠ	ÕçºðOúiïÛèœ¬ža?þÉ.¼“Å~|œúÁQ^potNž,T¹*
…B¡XMþÂVÄ_ØŒ_
¿»ò=ÿlþ[žÝ <ýTQ‹ã)CŽáôR´Z‹$¹Ïâêl`åj‘‘Ç)«HÛ%ê›+ˆ^lánhmOåöÓX&ðKx­§†é3Î#Ýª,"å¡}²{(À…wõG«Æ{Å‡kv‚Ïváo‰}—	>òùLr­:¼tõ¸°•yyv¤'::Àå“Öç©>×…ÏmKüO\súñâºò0¦‹ËA[Ô{Z·yÓ×Ž¿ÅNøÌ_Á;>j¦Rë1Y¯eÆ­qCýkå'lÈ·1m¶òNbr<Y§±Ñ¾xÉO#täxwµ]¢¾y‡üã_v¿E,·”iu²gï\þÇXÅ<˜#ÚÕrù×ü*´‡æ÷¤ù³D$úxÂðûiÔ®’åPøóœ\ÌuAÃUîk×‹,m”Ö¾šµ'‰¶7ÇûÑº­6ÞçÉöîú9ù®"ü?‹Yß ‚qÔ<£‘ñžìkÇÿJŒÀÁ›Ô]ña¿®•­U9d*»”>C_úþ/¥¿X¿º8Äùk½¸Ë`!tš¹®Ø¶^Èåf?òàËqÕ»Cç¯ÑëNvÒ‘<ÒnìÇÇÙYqƒÏß;Ê
¬ú»}Á}·B¡P<ÆüÏ¥Å<óð!íKß%¶ýÝ•üÉ7Kœ|¾„ï70o?%”p¬ØôØ³Ý‡â±&:‡ÊÎ…3Ü›×:œ)s9Tã}ÇqH|G¹¼/ù9)„ž(_d1gÞ½À€vÔs]øÜ¯áíH~èš
¡}íøÜ>3ÀØ°ø°möìÊchûò¹¦Ud*F{	f;8À˜üK»†éëI!Ç3Üˆc!NÜ .ËýÈóM7|XO!w—^Þa^ÖÕÎÃ)"Ý©Ç‘Ûõ£a~OjÏ’Õ ’ñ¹yRv˜R^œémAÁÏsÛë8Jr×›ØûM|ºÖ'ÉÐFDúT:¼¼æ†øØ,~bÀ²­Žâ½"Û®Ž ;µ¶¿ð~ÎþjÅK:aL‡Y¹ŠmÆ! BG	‡4!,÷ógº'«v 8°—Å‰Mf-Ê¡ÖºŸóûp&°oŒ™/]=´÷¹<å¥«Å‘xV<Ã~ßñrsxŒ™Õ®÷Y\»¹oöj¢¶,B(T‰»¶‰C±É¤ãüèÐë†Ði›MO¥¨{”=ÎÛéÏ€û,Ž˜¿šþl¬5ê;I¡P<É<þuÙslþ¡N<þÏWp|~‰?µ—ðÃ“½^Þ¦@	ÇŠMŒæZZ$zQ¼Ü+{P?xt1fîñaRšp¯‰ß,½ø+x3éŠ*n§¾™¬ÂÈfÈCª3OïØ/w˜¯Ù!ö>òŒN°Ôó”¼:J}g)Fñ\	÷˜æ¤˜¾CyÍã¾lÌÞc†ª´ÍF·ŽtòÔêÝ=.|“®ä>4W®FÒá#Ž#qàp&wï
ÝG»Û‡ƒk >ve¿ÈP·9ˆ&–åð®²(£ÐØb–ÐÃ.'ÄC¸¡cÜËâô¼ä€…07‡A|„e»ð¥ªÖF<°vZ\“æÎ×QõNN§ÒQM]­póéjÎ8áÑijZj’?íÛ…ƒ(ùºP­Ž€4^Êç€»))åÈí”í™žÍÝ¬LCyM) Ý»½Ë¯”ƒãÉ}YËÛ<†öN—ûñq‹—”Â´Ö	—òŠ|f€”öÉ
ÙnÍéÚ«|fIäqO¦:“bª‚jˆc+³DÁéÀ–h;ŒEƒ›ÝàPÌÑµž)a_²ÍnÌ(Q8Êtû:ôídª£¨µc#Îô”I>ò*;AÑö
`ŽåÔz1dï³Š²ôµÖ¤ôZ?—ÁåZ¤¿'ƒ£¾@w¬iÕá¥¡2Là¼–6ˆ$m‘	&h¤1‡3X¶ÕUÔ”AôºôÏ:ì€šWªaXÜ—ùôsÅÀÜ×i‚YaåS &÷dRŒ×ÞÀÑÓ¿;mYžJ«~Ù¿Þïµvl€í%ÕŽlD¹!Û„ªJ ¬†ºp¬v]„>æþ›
8:G”2­­¤la–ñ¯Àí®¤Ö°Ÿ@°í5GïH6ºz#|äñq"Ãöþ@ÖÊ§fHï"ž:ÏµÞZf#àtŠtÂ!œtB”µ	¶‘ðd°z1Ó•ñ˜‰c¥¸šMó‰àt:s.ú[éÛ%Zg&kƒ*¢/5¾k§¿Û›ÏÊ0¾?j¿¹Ã—çpdè»cSw ÙKýq”x¬P(žHÿJŠÇ-:ñø÷–ðKüÂþ?nQêñZ¢„cÅ&E÷Â¤›’¥w¯¤N]-ê"T÷QVäo\Ý·	¶ðåñqv6_Â™Ã¡õBîæ9•l3ä!Õ­g?>ÎÎ7Ï2:*6Ôì€«M|*…"GDFd™¢å/•RÊãÓîÛâw¯ãnè6/|à¥\{Ùm»D}óœm"‘ª¼bŽÏ»ß‚îQöì};H“ ù‚«wò]H	ÍðšéÔÝËœ´
U1Æ…á„Ôà8°Ïè@ˆ:oxëH„}0s&]yâ¼ÙXÉP·©¢ZNå€‡F·èè‚´›ŠÕçD„ë¹íH
µpÁ 6;Züø[ )@ÉáÙ{Ìà¡}²X(ŠÃm§ªC~W6Ò5éB”n
¯õ5™#>vvSîF”—þÃËÌuªÝ‡ÃcÉãÌÓÚ×ˆK÷Õx_q1|ªŽ.ÝO5Û®„(a"º¥a}<ƒk|ØÂý™‚Ù@•øÈ$Ë³YJ¹l‹ŠŽ³óå³è]~¹OwµÎCÀè2l»D}óÛ¼à°s›Ï¯V°§¹‚¥‹cÐ¹Ÿb7Ä[øTkãs8?˜¼cï^D$ÝÏÉkýï“Ï`¾÷d¢ŽR„[
Ûì
S
øÜ0q&LCà–ÓÍeHí}\>é¡½Å‘%Òtxéj±'ÿža?W¼DÊv°Ì£œm\Ã¹j‚ïŠvRsÚÎ£É]=~\=É{<ï²s›
LÈ>Ü}Wóã [ç%–Co‰´f}V†¾6öã^ÊÍæ.×•Áykçûµ|6Žá”}sxD¦•ùŽÒFiÛ;¼éïk†ƒ0œ‹lœ¡­þ‰Á€ês]ø*§	/¸pU:€™¼û9ƒ°^â¥~Ð›¼ÖÝÃVÒo;`ØOÃl€×ëèê±scße‚}íøMËÁe]v§ªD;I„¿G¸*«paƒ…i¢²_µO…‰»]Øk«…zUë"ÀÝ÷,ggç8%Îäûa“…©†NÔÒÖÚJ]?HåSˆÆ&B­KM\½·¯i[¯gêÀá,5U†³2ÄiÏajAZ›ÎsèÄaÊ;TÅÐáqÚ‚­¸{ƒ{a*ú½¸ç‚p+×ÎOq`<ûq•³œöøàü5zÝmô3Ä”U9:ÏµÖÊÄöþ@0QCd3£Â (‹º³z··—¡ïiZ²ï~ÿC¢ÁñæYæ†o X¦¾{ä-Ùvz©ÿ`{ƒk
…Bñøñø°ì9¶>„Ÿ}››—ð=p¦¼„7,wO>J8VlB¤[hÉJà4ÃG¹³JØ3˜|›\–ÿÆäËØÎÎ,ßúpÜ0kÃ‡¸ÑÑ›æZÒ¥[ºAtÐ‹îýl+É4n‘èo„"-Í'R¤¹Å|óŠ¶û@
ÇóŸÈã%>¼B¦ËiüBÈŒæs1mÚï¬~o”RxÑ‡*Xm¬ê¶)Ñ"ÄA˜ÀIÀta.ÇlFtaúÚñ·øig€Ë'õ¡/¤è~ÅKôàM¹­
ïŒ0F»˜Jû»âƒÚV#°ï23}íø[äÞœâþ¦0òk¢/aÛË>î†vSQË·>÷ÓÈ[|Z@L@S×º®œ4‡ÞÄIí÷ÒÝýîtÔŽå¨´6øl€)ÀkÓ’-Ïo}¼B°¨rŸÍùÙÌuñ9c›’ü@Î4X–ÚFÁbrßÜ×¬tŸ–t–Râ
hW?f~ÐKEÄ"Ævéî{îæÈ‚ÎÀXˆ!þÏNU‡» ÿdRðöQbàpûðOæ2ð9Mõ+5Ø°I‘Wþ|A—4qoCÛ˜£Éí9æ-!ë‰¢—wSÌÑ/!j*(vË>Ò¬ÏÊ‚Q`L
,+±E¨ýp¾ñ•¢³–¦m¯p.kŽA æÄ?¶Qæ$D•|0i«5^iÇW;-ãþ„iE?Ø3·¶Sâ9”ˆt°,‡eçðÒå†‰}c0ì2ì«–q«¯×Ñe¸gW¿.bï7ñy÷({šÇqmÿðàïPç„Ù›CÀ!fÀ­)Çýu8Y 4’ªÖ¢©¶"¥…‚è¯sÂBˆñ!€!Æ§~nâb6'2.DÕþœ¯ÆŠø<'Ž_gk`ÝGx| ²7.Bq3õs7îÊ\r—Ì‡ÈP‡8oQ‡šj)£,!^²m57²è)êÞ/ÚœÚ!2ƒ€‘$çÝ”zÙÓ,LrŽe:J8$úé=ƒ—Td…BñDò#ð?”óôÃ‡\~Øþêò<õ-ÿcÙs<Ü¸ì=Ñ(áX±	9EDº^ó~ù±ñ ¦Y¯«™ù!žFÛ¥ôðäuÈä²ÆèôkœôÓÅ¥W}®K„8s!Sp=â§c^·ù—ƒA¡ŸnÐ8ÙE•&ê¤9fóàäD[ØÕ`>eœÅJÝÿ;]Ø¥û»úœðyÞ;vû¤¦ä^ËãåŠt’:÷SÔV!B$›n¾dŒM+c¹&¦ k"<6'ý	w·«Ç½v€‰Ù88c2Žô7§â¸ÜÂaj~µ™W¸¾Ž¬èrB¸1‹
®çµjˆN17íegí1Š¶ï¶œ,Ø˜øºæ®b9p#ÃE¸zü¸ÞÈ¶èY¶4æk¹¹·Ÿ¬FƒÈ¹÷õƒ¯çöá>+gŒ¤®ZÜO¶Q¦ôíõ§…O ÿ•ªÂfh«ÿ:FÍï8pÕNËôË >Í?oëL!ýfÂ9ïôá—[¯x‰þ2F³rsºŒýœÃmOÌÂñJ7qx¶†:§+¹Øa_£tÏpï¥µ©‹dxY‡þ•èÂ@ ð"‡àñŽspÂ‡GwQù"‡øj3ž Íù=8jÒÃ±·49è#–ƒZîí9öÓÉAÜœÂù(
ÅãË[¶pÚ^Â³,ñ_èÄã?XúŽïÙÂ¹²b%¯Omt
sÜ}ïC¢K;Ø98ÊY]H–ç€šý¦¿µ—Sº/Þ€½Gp¶­A–×=‹,EH,È‘•ÐÇÜ_‚ò—ÏæþR±Ëk‰¿ÛöRÎ"÷?ÉìàŠ½ßÄ§ÝÆÿr^QúäeöMl•¹H!2f¯T7«ºÍ¿‚\Þ7À€ößh!iN@Aï˜ÕãöãŸôÓnêTÖB\È)¸Æ”B°ž½Çü,J"oÂáüAé„LÔKß.Ä
‹ÌåËÊàÇÌ—4°§yË‰éá7_JÙ=ªËÍó†KÄ§Lˆ{B K”÷™0qâ„Ïˆÿ™h°SÕÆrôµãŸôãöät¼U¥Àgs-XŽÝ&±xÞûÍ
–k¼bÐìý”àÔçl½Ecù\¸­¢Ãc\Ø ¼ TVQ­mïðÒ5éÇÅ›Ü–!¸'4œKûõ¦fåë9`²m´×î€¥ÛÌ¯Y=‰ûâó[‹€p6gÆÇo6P<ý±ñÞ‰Ì±L)ŽW¥'YÍ6êäåd»±o€‰"N46kß-Ûêá›L/hÓW£­^/
ë7'ˆÊ¶6Š'Ë.C9X÷sA¾ˆ˜U@GˆQüY™ëÓÄIö¡bË47‡×¢.|¼ð!Y‡šj)[qÚãÁãñàù(eµ4NÜ$Bî¶TðãSàlâü!ãž©Ù…dú„3ùfšxÚßæf}^±j©,f¿bˆ)DöšÙkBd/%w‡ÎÓdµà¤ërújpÒ”ºC{¿‰/§KqtŽÞß‹º÷SÎ¢9Ïl¸ÍÒï}ÝdùLÑqëC>½z‡òæ\¾ƒXÚ ®
ÅO€¶À©òþmÑVÃöÿri…®…e¬¢+×lá¨²SlbtñÝ^=ÆÝöAvŠè­ýìIY,GàèÇÑ)~9µ‰¹ZíÅû„ úê8;›Çq"_ÄC´v    IDATGÛr[˜näANñwtŽãàÑ[‹r¸lå)§Ài¡4²^ë)"·‹¸irJÝüÕ&ñaÇ”âœè0YèNçÊþe˜†ž”ÅñÞ½At²Q¸;Â"aN'2jÀg±8^>$ãÞYÔíj"?`“ŽÙì¤†òHÆ6Æ7ÕÇ*æäeŽ.|Útø…0¹oìàöÉä”üèèÀ£Mo—NÒòšµ=¥8®~³‘¡6žÂŸM-ìC~‹ã™ç!ÙÂü­,ïÝ5•ÑQ¨)ðÉ~CØ‹òæqê›uÓƒµÅ¢Jî0·ÚÏ–FJ;”3‘!ÑLâ¹H:Íµ™)ÏqÂgtmÑc+Ó;Ù3¤ÑîI½35’ÅÁœ¯ÙÕãÇõNám^AŒ¼ÅçÛÅt{òá_vçJÅ¼¯Í$Œ˜-Øx7DšCØÑ9ŽãMq<ºß®õãó9JØy‰úfÝ´òGrôëÖ–gh¦4Öµ­¶À²\?¦\? F”áüÕ&"X×ÅêŠ^3ÊÁºì‚ª®ø3â¡€ì7Ç¸PkÇoX åÙ\­ºpïg[IªÛ]»SãIwñÔ,8©m:C'ð~‘k½­¥Y[nèð‹8ŠAºkS·/„8-Ÿ	ÑÔë¦7„H„9©³0t˜ñ¶ ­¹.ŽgX¬Î˜‡Ãj	[é
é•×#véÎÁ‘Èe™ÖØKdÍ¢Nø8ýâ5zÝ½µX)ùN„
‘k¬ÈuË·~e>£ÁâÝ^{ß™k§_,;9óJ¼ç'G´ê»íµ;
Ÿí P()ßú|	ÿô›%þÞJÒyü_/­ð`üª´ØðûçÂ¡ø2S¶+rcËâââÃx<ÎÛ¿âÏ÷¾½ÑùQdà~ï÷7:
…B±Ê¬OÜLÅ“@þ¥=˜/ü©P(ŠMMÛ%ê›Qñ„
…bÙúð!'¿Yâ?ûî{Ãö_•ó¶¤=áõo¿ãí…e:þF¶Xy’7ž«W¯>ò1¾ÝººÁ:þðÖ¯”ãX¡P(CÂ¨œ2ŠŒ$ãç»ØÙ¦Fs?ÂŒ…B¡xèi55,[Ä~XÕ2
…BQ¶l¡ÿùþûo–ø;:ñøíÅe¾ß²…Ë%Ïòðã+”>|Èß_ùžëÅ[­¨0E9Ž#”ãX¡P(
…B¡P(
…B¡<÷þô›8¿“â<þŸÊžã«§Ÿâä7q þ]ÑVþÉó&«Úo6«ãX-Ž§P(
…B¡P(
…B¡P(;¾Ýò|	á­O¶ÿ7ßâ-%þö¬< âÇÕV
(áX¡P(
…B¡P(
…B¡P<–,mÙÂ?ÞfãvŠx\¥ŠŸ~ù»uÎÙãŽ
…B¡P¬3ÇpŽSÿÁYŠ²ÿxÝ©>×…ÒO{ßFçdõðûñOváíØèœl,öããÔŽò‚{£sòd¡ÊU¡P(
ÅF³°eÇž·ñå3O[þæÕo°y—ÇÛœ¨Åñ!Çpz)Z­E’Ügqu6°rµ‰HÎ‹\l†<¬"m—¨o® z±…»¡µ=•gØOce˜À/áµž¦Ï\`l8t«²ˆ”‡öÉFì¡ ÞÕ­ï®Ù	>Û…¿&ö]&øÈç3ÉE9TŸëÂç¶œX<KäÛ!7ÇÓòoA‡—®â¨QÃ5y†ý4:-Ž—H§OcÌ‘	:‚¯iÕékÇßb'|æ¯à5SÙÊAÖk™q«v½ú2H_¨Ì˜6::Àå“¹dR+§8a­dyÆFøâ%?$Ë.+m—¨oÞ!ÿ¸óH«¸u²gï\þÇXÅ<˜#ÚÕrù×ü*´‡æ÷dÊ=¬É£>ž0Ï€,‡ÂŸçäb†ð¨®r_»^di£´vÞ¬=Iô9ÞÆ>Ãº­N¶ïÐÏÉw•b ³¾3$@ã"¨yG#ã=Ù×Žÿ•ƒ7©»âÃ~]+[ë~ÓºìRú}]h‹ZŠ£%Û÷ŒÇ[ÅºèLYe.ò‘_bu¹~ÁV¿XqúÀa†€Cç¯Ñë.³HgvªôíÌÒô‚´V&Ï“iïOØ{µB¡P(6„í?>äµ¥¶eGñ·¾ÿÝßÿÀÈ .+Œ(áX±é±g'ºÅcMt6•+f¸7®u8“U9Ì¼{í)42u“ªñ^iÄ¡}Àöµãoy
oG1G~äFG¸`(ä+aûÌÄøj¼ï¸`!eú4º<txéêi¤½/Èå“ëX·S1âØóH0ÃØÁÆä_âã¦¯Ï@‡—§ö/>î_;wS~ÔËýÈó=Ã8âÄõbõð=b=…Ü]>^xy‡QxYwV;§ˆt§Gn3Ô†ù=äò¾ ÖH)ÏáB°cÀ\êðÒàL)øyn{GIîbàz{¿‰O×ú$Ú(ƒHŸJ‡—×Ü_ ›ÅOôµãsCøÌ cÃ¢Moöìˆfè/
ïçì¯6P¼tƒÏß;ÊJÊ>³rÛŒB „ŽiƒX¹Ÿ?Ó=Yí°1À½,Nl
Òú,}9ÔZ•]Ï°®oÔ÷sS^ºdzù¤¬Ëw¼ÜcfµëÂ}Wçnî[<GBÀ=Äùk½¸›ÎsèÄa†4Ñ8òžuWˆÆ:íápŽêî	Ÿ‡ò˜•¡ÓÈ5aÖkHö'ëÞF´]¢¾™5øT(
ÅF±Ø·ò€Ö¥ïð|÷}NnâŸ}û€ÿP¦„ã\QÂ±b£¹–‰^ƒÁ½²÷õƒG@÷cæn&¥	÷šøÍ"Ñ‹¿‚7“®¨âæqê›É*Œl†<¤:óôŽ!´ßa¾f‡ØoøÈ3:ÁRÏSòê(õ¥@Æs%Ücš›cúå5;Œû²1{ªÒ6Ý:ÒÉS«w÷¸ðMº’ûÐ;iAïðÇŠ8p8“Ç»÷†î£ÝíÃ?IšË4>ve¿ÈP·9ˆ&å(Wj„Û÷]!pÖ”AôºôC9ì€šWªaØÚmëyÉ‘‰t—lG5eqÂgÌÜÕç^ÃUeb[RvVVQ
2öžÛ5é±gg…îþÌË!ãÞ0T½“Ó©tTSW+Ü|BpãBBx[ G¥˜¾]8ˆ2‘¯µ¯Fgœðè45-5);ey½”ÏwSRË‘Û)Û3=›»Y™†òšR@ºw#z—_);Ç“û²–·yí.öãã8*).)…i­=.åùÌ )í“²ÝšÓµWùÌ’ÈãžLu&ÅT!ÕÇVf#‰‚Ó-ÑvŠ÷¾Á¡˜£k=SÃ¾d›'Ü˜Q¢8p”éöf’ ÔÚ±gZÿkäUv‚¢íÀË©õbÈÞgeék­Iéµ~.ƒËµHOG}îXÓ6ªÃKCe˜Àx-mIÖÙ"LÐHcgð¼ä€…07‡A¦@Ù.<UYû‹|ú9â
`îkcù\>brO&Åxí=]ð»Ó–åà©´(;`—â¡›¢«µcl/y¨vˆ>ù†lª*²ê:À±Úuú˜ûo6àè²”éìWÒQÜ„“B#©6â~ÚÜeù(gÑ8+©Îç…”ýÚón&kƒKÿfÞíGn1ßìeçà%%+
ÅÂCàÿ}æiþãÖ§ùO¾ÿçsXüîÀòwüYY1*Úqn(áX±IÑNãth½{%u:[Q÷¨¡º²"ãê¾Mx°…/³³ùöÈ½¨
p7Ïél›!©n=ûñqv¾y–ùÐQ±¡f\mâS)9Ú 2"Ë-©”RÎŸvß¿{õwC·yá/åÚwÛ%ê›àl‰ˆTås|Þýt²gïëØ	@Š˜IqJïä» /:¼¼f:u÷2'­BUŒqa8á#58†ì³:¢ÎÆ:ÎR3§aÒ•'Î›•u›*ªåT	<4ºm¹!ò£wªÏuá«œ&¼àÂ¥‰œ¦ÈÛÙ]I1LºäÇ°ý.ü=2ˆÅhrjo£ÛFtôAÚuÆc¿SÓ“ü8‡	*û5‰MÝæÝ”»å%Ýl‘Ì]§Ú}8¬{æéíkÄ¥ûˆ7ÐQGMÄ§¢@ÒÁ¶+!J˜ˆniTã}Å!ÊeªŽ.Ã>Íé
[¸?S0û â,YžÍRÊe[Tt|œ/Ÿ¥hDïòË=T…uF—aÛ%ê›ßæw€e ˜Û|~µ‚=Í,]ƒÎý»!6ØÂ§ZŸÃù!À|äm{÷"jDïVKôâU¾÷d¢ŽR„[
Ûì
S
øÜ0q&LCà–ÓÍjN|í}\>é¡½Å‘{X 2¤éðÒÕb—®FÙ.^ñ=(ÛÁ2Œ0pR´q
çª	¾+ÚIÍio8N$wõøqõ$ïñ¼ËÎm60!ûp÷Y\Í;Œ"Oç%–Co‰´f}V†¾6öã^ÊÍæ.×•Áykçûµ|6Žá”}sxD¦•ùŽÒFiÛ;¼éïkƒuƒ0œ‹l¬µï÷d£b¡(·ªŸ‘±¿È·Ÿ3ë%^ê½Ék-Ð=lE!ýf°c †ý4Ì¸p½Ž®;7ö]&Ø×Žß´\ÖewªJ´3Ñ™Dø‹pÄ«²
6X˜&*ß7ìSaânöÚjá„^Õºp÷½ ËÇÇÙÙ9N‰Óø~èl
lX ôgB(®­,"|•*z‘J`aÖlt¨ çZ«3¶B„ªÐí—Ï†•™À^k”×÷½úùž»sptÓÎŒP(
E~DŸ~Š‹¥Åü/¥Åüýå´|ûõß}oùû²ò÷V¾çã"%‰æ‚*%Å&Dº…–¬N3|”;K¡¤=ÒE°,ÿ½ÿ!ÑŽ°³S¼È®ÍKâäÁð!ntô¦9¤–té–nô"{?ÛJ`þªU™.ýÍ)À—žæ)RÜb¾yEÛ} …ãùOäñÞ@!Så4~G‹K4ç˜‹iÓ~gõ{£ÜÂ‹>TÁjcU·4%ºo—ˆû—)¥ðJ;¾ÚiÇ1ÛdcÍõ_ìà²t¾vî&…p=	a]ÆùmiÇsò27âX8	¤.&g
›»Æù5Ñ—°íewC»©¨å[‹ûiä->- .¡©k]'0h½‰4±DºýÂä=ã¨´6øl€é(Õ¦%[ž_:µßŽºü/ Ëj÷ÙœŸÍ\Ÿ3¶)ÉðLõ©m,&÷Í}Í
I÷iIg)%N €öweðcæ½T´A,bl—î¾ànþ‡,ál€…âÿìTux°;ñO&?!<J»Û‡2—‡ÌiÄ,›yåÏõN¿Ä½­¤°D/’ÛsÌ[BÖE/ï¦˜;¢_BÕTPì–}¤YŸ•£À˜d^‰-Bè‡ó¯œµ4m{…sYs-0'þ)°2'9X ‚¨äCÞ+.`ŒvcØƒ¼úkVôƒ=sk2ç‘C‰¤ôQ@†rÈPv/]n˜Ø7Ã.Ã¾ºa·úz]†{võë"ö~Ÿw²§y×ö	ËíÑ¶7@ÿ/ãqV“CMµ”aÜ$>rª8
÷Y)òær­Õ»}fQ^¡P(/€ëÅ[¹^¼•¿ùýüÁòwüƒ¥ï({˜îB~õÛï”pœ#ª”›¤`O¾SÉ,C<ˆiÖëÂjæA~ˆ§Ñv)}Š^Ey]#29†¬1:ý'ý4dqéUŸë!Î\HÄ\øÄé˜×maå šk59í3Ó«v:±P^£ÎkŽ f¿ÂîðM¦ßN§™ÏÄS5}]”oð³(N½–t4NvQuæv½R
ÑÂÕXÈ’…ÒIêÜOQ[…el2¸ù216­Œåš˜‚œ@ïYçhÎÆÁã‹“ 3ÜœŠãr‡©ùÕÊ0Øhœô'œÚ®?öÚ\ÕÛ8Vôƒ?9!Ü˜Å×óZ5D§˜›ö²³öEÛw'é©áw€u™.o‚¹«XÆ×–ÏŠ«Çël‹žeKc>°–›{ûÉÁJ`4ˆœ{P?øznï	A+upÕâ~*°2¥o—¨?-| ø¯TeXVÆÇuº°ËÙ"Õç„'ÿÞ_Ç¨ù|û‹ÍAþý¦Î9ïôá—[¯x‰þÒªßs:ó²;vû¤‡Û.Ÿ³j¼ÒMž­¡ÎéJ.vØ×(ÝÄ3Ü{imêB+Dô¿iØâf„Vg%/‚ñÙÿoX¥nè+f{Ý8+ks:ç£°2ØÂ§m—¨×„î”mfÑ|>íóª¿ÛëCá)Ç±B¡P<©üö™§øW¥Å\´ñ{Ëh]~À^ùï~÷€ç|È7Oåù§ÍS…Âœ wßûèÒvŽòBVR€å9 f¿éoíÇå”î‹7`ïœmkåuÏÃ"KäÇn?}Ìý%(ùlÎDB"–ayí1ñwÛ^ÊYäþ'™\±÷›ø´Ûø_ÎnŽ“—Ø7A°Uæ"…ˆ8’Z‚Àªn.‡D8`0|“éäTXŽdMøá¾öOúiO¸„…° Å$ÖB1D?J!Ú†]~G
'î47‡ƒ\Þ7À€ößh!T%Ýˆ©õ‹"V?f¾¤=Í;XNLG¸ùRÊîQ]nž7\">eŠ¸çöÉ)âFf&ìTu@26òIÁ®¯ÿ¤ÿ°æ‚_¢ìÎ„‰'|f
DãŸÍµ`9v›ÄbGkHì77X®ñŠA3m¦î¾—úœ­· h„ûÞ‚á1.ì^ ù<‚|™ôã¿âMnËFÜ“Î¥ýzS³òõ°ƒ
Ù6ÚkwÀÒíüÄ£¼÷Åç·álÎŒÞl xúcã½™c™R¯KO²šmÔÉËÉvcß  2Á€®MJoßÅ€_2Î¼®Ê¡¿Ø¬äßo¹¼o‚¨lk¡x²ì2”ƒeÙä‹‰Yú~sæú4q’}^²ß\‹ºðñÂZÜ^ë2è¯s³|5CãS,P†»­?åW'¸œMœ?”å´90ôÕ, êCçiJ]ìqä->½z‡â½G¨?®{väûj²ýÎÆZ¼WÃ9¨…ÂS¢±B¡PüønËþçžåè6‡+KùõsÏòíS[xú!4/?Øèì=(Ç±b£›Jöê1î†´²SDoígOÊÚ”5Gç8ŽNñËù«MÌÕj/Þ§ ÑWÇÙÙ<Žù":šØ–ÛÂt› rŠ¿£swˆÞZ”Àe+ÏÝ”z“Sþ²^ë)"·ãê”1
åõÜ
‘×”âœè0YèNçÊþe˜†ž”ÅñÞ½At²Q¸;Â"aN'2jÀg±8^>$d±¨Ûð¼ä ¢Òéª1ÃØÁ	ì“ÉéðÑÑ¬SËƒª®ø1‰…ˆ9Æ…Z;þ?þâp¶2rytþÝ”üÈINÒòšµ==ìrb~A.dàÐ¹„¥£óäeŽ.|ZX€…0|Ê[3
6µ°ù-Žgž‡d;ó·n°¼wwÖTFG¡.¤À'û
a/Ê›Ç©oÖÅ¹×‹*¹ÃÜZM+Ni‡’¡s&2$J>›É{H›	aŒ#,¶ë„Dˆ[™ÞÉž!vOê©‘,æ”xÍ®?®w
oó
bä->ß.¦Û‹wø²;—P*æ}m&ÑÉlÁÆ»!ÒÂŽÎqoŠãÑý¶p­—Ÿ§ÈÈQÂÎKÔ7'·ç¶@ŸÆºµåš)mT!ýEAX–ëÇ”ëgÔˆ2œ¿ÚDëº(¬\­ÈÔoZ—]Aýæj×…{?Û28b
1ŽOû80t˜œçZo+A±Bœ>p˜>‚´ö	öŠ]Z¸+úAëß¹{	{eÕÉc±@$²@YeJâ‘·dÌr!úÞ
É5‰Ù"©¬Ó{uÛÞÄB­ja<…B¡øéñå3Oó¡ý9þõÃçhZþŽÿôÁ¥Ç‚-‹‹‹ãñ8oÿvˆ?ßûöFçG‘?ø½ßßè,(
Å*³>q3Où/”ö8`¾ð§B¡P<Iˆö›‚*
…B¡xò¹zõê#ãÛ­éñœ…?¼õ+å8V(
ÅÆpTñ!Ç8ßÅÎ65šøf<(
EÁ:Ïµ^7fQ¾B§9pxÈdO¡œ"Ò­úy…B¡P(G”ãø1B9Ž
…B¡P(
…B¡P(Š'‹Íê8V‹ã)
…B¡P(
…B¡P(
…Â€Ž
…B¡P(
…B¡P(
…Ba@	Ç
…B¡P(Ö™c8Ç©ÿà,EªÏuáŸôÓÞ·Ñ9Y=<Ã~ü“]x;6:'‹ýø8õƒ£¼àÞèœ<Y¨rU(
…B¡x2Q‹ã)CÄÊÌE«µH’û,®ÎVòZéy3äai»D}sÑ‹-Ü
­í©<Ã~+Ã~ùÿ·÷þÁqœçç'ÖJ` b ÍjÀÐš&(ƒ
•½‚ž2ŒA%+ÌrÄÜ#£ ñN`Õ°€è–¼*„Åp«Ä”V,âJ`–6‹¶X[¡‡5ðÆd#—÷„+17s&C£AxÒ˜4@æ Cöz}¼Ý3Ýƒéù…ÁRÏ§J%¢{Þ~ß~»û}»¿ï÷}^ØÕSËø‰3ûóHW”E¤šÙsµ[(À™WŒG«Á}Ñƒsj”þ÷7ák‡Ñí.:¿4%°ª¯›®'e†ßF‡ú¹pLKã0ìÈyQ-u¾öÔßë‹s'¬•¡æTW™ùZZ{Jô²e<§bÓ·_»ð‰ÂKjÇR¯c*ÚuMY(®_‹zH—Öx¾™ÑêÜx<íÚÆ†úùp›Fé÷æxwuœ£±m£öÇm>êÞG,·”(ébËÖéüQÄ2¤Gµ«Ú_w‹Ð¦¿'õk“B$ëñ€aj[´z(üyN.f‹]Ð°È}ír‘¥ÒÛØtíI¢ýÍñ~4·×QCŸe¾ÏíÝbú9í]e
 ³Yß ‚yÔ<£“ñžìÛƒïé7h¸èÁvE¯[«zÈTw)}†ñZdè/–çZ!ÜñU€ÈÛ4{Ž²÷ôez]ÆŽn†ÐÏ ¯q—º?òv3ž£iŽ9âgö“qi¼#‚»“¥0-¦§-º7•8~’f±¤¾ûû]|¥ßíA¡Hˆp,¬zl‡G¨ÃðÁ!Ü×D§âPµÒ¥°b‚É)p.CN™ë!U¼4¯¸•FˆNlo·›Eé—ÜÜð3ñÊúSÒ3vƒ	`ÂÛŸø¨möûhißCó1õ¡»l×v,F[	&ÞÙÏ°ö—ú¸‡ñ+™ëAÿØŒÒ¿3?A±Ùß‚}&NÜø
ïŸ$ÖSÈÝåaýSÍÂË²Sì2'Òzm›I ^éïÉ ¶±@Âü< 
Ï®	¯›&ÇÂA‘‚ŸçŽç°—æ..7±×Z¹¾Ô™dh£ ñºÙå‚øÛìtôíÁã‚ð‰~†ýJ„lñ7ôFq_ÔÚ.oP;wáöžaØ_x?g{¶‰5÷®ñÁ«™OÙ—®^Õ6ó€ ¡ƒ„Cú Vîùgº'kì6 Ø±•Ç‰f-ê¡Þªî‚4û=8	Ø>Ì„×MWO{ú‚\ËÐ_ûZ¸NâìÜÌgÏ‘I¨5ïÑÄb%»:ŽÀy]T†ÐÍ˜“i¢±&>çÄÞÓ\Þí0Ï«ËzLöiËÞNuœ£±%|A€/Ú7òDÝ—©¨¨äáG–n^ßä¿D¹5véÉO}¬Ç¾XËo©òòG—´Ì÷ÿ¡ÿ\âßkJ¡ªêQ~¯y¿‰_D8V1ºki–èY%0˜Ü+[Ð8p 1éÜ-êÃdmÂ½¦~3Kôì·á…¤+jMÛmdFVCRyFÇŽÚos·v£ÚoúÈ3;ÁRó)}vˆÆÎµ˜@æ¼î1ÝI1~›ŠÚæ}Ù˜šd‚ê›ÍnM<­7º{œx®:“ûHE“u¬Ñˆ»#y¼Éç
í.¾«,pîÆ§¢À¦ìç®m¢‰E=“æç•ÃõÚ6-†îš§k)#Êµc 5TWåµ4xaÂ¿ðw£VŽÞ™Qãßyœ“íðu•†û3/wNŒI?T¿”SVjh¨Wn>å®ÎPõ›°e4_jßZqÂCãÔ¶§vòš ±-Ÿn¦´æ"·R¶gz673?µkÍ½1ºüÖR70’Ü—µ¾Ó—ÁÔÞÊ`;<‚½r–5¥ka\o”Ky^{f€”öÉ
­Ýš6´WùÌ’Èë93;“bª‚j‰SV^F<‡²DÛav(]f‡bŽ®õLiLû’mžrcF‰bÇ^nØg<J3(Uo£Œ8ãciÊQ@U²¡˜f.õº˜²÷Y%YúZkRúG½ŸËàr-1Þ“€ÉQ_ ;6måuÓT&pv-DªÁý’“²È(£´Ð’CÍÛì0æ†”`
”o¢Ù[Mm9D¯hþY»
(£öéð«û2Ÿ~NáaM%0ý‰¹þ®ŸIsO&Åxýì=]ðä¸e=4WYÔ°Éñ,UÏ”mk¦ÆnÝ_Ø‹}-BïòÙMØ;‡€Âëtfj8B‡«"o“ª5ï=ÝŠƒBƒy(ÀõU”Svìåôå^tSsùî ÁÝ$ÑGA&eMü&{š*ÍêJNq=/²õ6'8¬p}ç8©ïÆéÞÅ‹ún?x“»mnêÎ‰x,BQù¢}#®ßk[–¼ª³Sý˜÷F‡%/g™ï7ææÁÄÇwøÏß¿Ä{ã'È    IDAT··ò¥ß.Ž±¦D8V)úKœy:´Ñ½’:uµ¤{H‰PÝ™×~ãì¾Ex P×v[d»QÔ¸“çT²ÕP†T·žíðu/œänè ÚP».µr]ŠìÔê½|©¬¥‚a®wßR¿{öwB·Xÿº›
ýe·ãmptˆDTªŠÊi>èÞÝClÙú6"&ARœ2:ùÎÅ¯›]i§î^ ÿ˜U¨ŠaÎø>R“cHaÇ6 ß‹užofØÛO0ƒÓ0éÊSùfc>ÃµMÕrª Êpöøpö°0…£ßU%)ä"@éçÓœ’‡½ªfÆ‰jõfw9±ÕÕL‹«"×NE£°'|"Y¶Ìç´ØØmhÛL…U_š›-2Hz×©~ú‡“Çß™§/´¯§á#>S=è¶M	Q"ƒ<A
î§íÄC†Çè2íÓ®€ßÂý™Bº*%Î’åÙ\K…Ö•¡î©“”]~¹‡ª°.CÀì2ì8GcÛ‹¬w˜Öp‹.U²¥­’{g‡¡sk\hçºÞÆç?¸yûÖ­¨+btŠ¥†Fñ*ß{2qR„[²©kÆšð¸`ôD˜¦vÀî×¦›ïj.}{úú¹p¬™=ív³œ•i¼nºÚmš«Qk/º‰îÔÚÁr;õÓL=§M§j¾¢ÚIÝioÊÇ ’«6'yç]w®tZî:‰³m£Y`é<Ç\hŸJ›®ÏÊÐ×fÂvØME:9ƒËu~ ]»õü¾¯=‡ph}sxPK«•;VH¥o÷º¼¯gy”ÑAðç"kÂåÔ¤6;¢‰X(ŠÝe£úIÔœêÂS5NxÆ‰³ÊLäÝÏ™„õR7îä¹è¶¢~3èí¿¦© g®4ÐÕcãÚöûöàK[Nëº;^­Ú™èD"üE8bÇYU«þ¢F9¡‹z-Üy5ÀÜáê:G(u˜ßË]½ƒ½@ªû¸Woµ+ÂÛûÏÃÞÓT¡‹Èfê«ÊgŒK‘ÂÑAB­½¸4‘7™ÿyö?sÞ2ìÄQO3‰?î~™Ó{ŸÉ˜Æš#v;¬×Úóieh°ÕeU×VïâÅ·?ND{×®Zµ³3A¸ÿplúò²çù%g#W!oÚœ—›æsË?ßáXÌhn¡{Vg:<T8ÖBi[4ÀœöÿØko}ý uê%ri^Ð– ¦q³£wCêž!Ý½kD£HàÚÁºR¸{ÉªNg‰þH9/¤yO©or·m#%< 	ÇwßÓŽ—øð
™
¬Mã··ûðµGsŽ¹¸`Ú¯Éåš&¼C«k[Ð”h¿QWÂŽÇ?I¿7hšj^sªO{î±ÅÅnðkñ7¯4Ð•º¨Qß&£÷»Æ+‘?kNuáéé
,Ãà÷‰>u€uOy¸ÚLe-ÌÝ|WÝOƒû¸^@LÀ´®uCÙt‡ÞhŠX’®ìUe@¼ßO¿Ws”&ÂXXå¿K‰?¯L€·!ÿHÁr Êu2çg3×	_æ6%ùœi°,µ‚Ùä¾éO˜'é>-í\K©( ýx—»n*; 1·Kw^
p'ÿC„r6%œöMØ¨ö6cs $u MxŒ›»Ëƒïj.™Ó¨ †%€CÒÄ½m¤°Ä(’Ûr,[BÖ%Omf
·U¿„6hT[É—ÖG¦ë³²`“ƒÌó±Y¨Uýp¾ñ•¢³ž¦c«r.ëŽA ¦Õÿ
l£Ò“,PATò¡÷E'õ3ÌsØƒ§÷à©×âþ„iÞ8Ø3½´!sJDs›°¬‡ugwÓå‚ÑíÃàwšöY÷›Å¿±×Zù {ˆ-m#87¨ACÈ%T…rÿî¾|š±oäœ]Ž˜ârW/ÁË­Ùã"ë¿7”µpÆ˜š‡«—`ðeS,çT'ð\'5‘7—ûx©¾/2‚ BUun–Œbb³U.*ýÚòG‹T’›éÏVv~ŠÇÂ*$9¿%ßi\–!Ô4ëe¡˜eÐ>ÄÐqnáô¸ÅµÙE%“cÈ³Ó¯åª¦,.½šS]*$À‰3‰˜‚ËŸx!é¯maõ`DÒì™ˆÆ ¯8¿)GžŠƒÃ™\´©¯%eººrÎ&§Þ¦)Ã•ñ4.å|Ðœ¤Ž”tTªP	Á&ƒ›/cÓj±\SÉ\Q{1><0Á±8N—r˜¦¿+µ0”ÑrÕ—˜jîìña«ÏuQ½•cÞ8ø“Ê¹Æäz^ª†è8ÓãnêêQ²asÒ™ž~X–éòiHï*Öâkká"œ=>œÏg‹Sž-MúµåÿTXY¬F“È¹õ Ïåö‘“RW-î§Û¨´ômR×OŸ@¾‹Õ@Õâã:œØ´Ù'5§”'òïbÔ~ÅŽ³~\KßLK9ÄÇ¢i´šÈ¿ß48ç|ÚÖ–‹n¢ßŒ']=„™¤!}ÝšÄvÕ‰ÝeÓž³Üš›8<UKCÚþb‚ÉmKs-ôúHÖÁWr¬ÉóŒŒ½ŒËUEýùLõºpT-ì¬Ç¦fÀQÅã{!³ê›.‹ý<s-E™_ŽèuQ®ÇR> ¸{1‹"˜ÅkWo`‡:öü@;×;ÎÑ˜ÛÍƒGúì¦»ùôEÿ¾0†ãÇ± ÷/‹IüðÃ©$6óó¿XÑü¿°¢¹‚%î¼ú&Ñ{©b}VR€¹i vGÚßÚkSºÏ^ƒ­pt,A‘—½³Ü‹ }ìæðóÐ»|v*ž:™³‘ŠeXQHýÝ±•
fùì½Ì®Øk­\ï6ÿ—³XzìýÛG‰eU¹H!*Ž¤‚`%°º¶‹ª oµåºËÑLó6;‰s×·ù}ø®úØÓ—ýÐWÆ‰£MÇÕ73ž‰!¬ÝµÍÏ;)ÓcöÈüÀ»Ü-mbKÛFæÓÃQn¾”º[¬ËM•7éB‡Ìõ ‹óÕ^HÆFþ0)ØõíÁwÕ‡Ï¯û•à×¿]ûïD˜8qÂ'–@4.ðÙ\
æb·H,4´„Ä~t¹Z·4Óg:àÎ«©ÏÙr„«ž2W‹µSÔ?Ì™íÂ3@U55úv¯›®«>|ÝÉmÒ¨{ÒNÓ©¿^ÕÌ2
l¤RkmõáÞ­ü„›¼P÷Å7gålÎŒ‡õ/4±fü]ó½™fŽµØŸ=´0I1Û¨c’íÆö~F#¨…P
¢qºö=ø~”DÜtcå¿ÁøZè³GÆ¯ä.eåÈ¿ßraû(Q­­
„âÉºËP–uG#$ã÷kýpôý`Æþ¢ø×ÂÃú×õ˜¹…¸Q÷ÒZ_3SŒq”ÀÑÊé½æ_c†rµˆ^Aìåqƒ\^T¸Œ½œnµZ!Òš#F·²Æùý<Óü¡ êq§7¸ë—n³fëž_í9Ù‡dc)ÞíáÐÃñ‰h,‚ ¬~Äq,¬bÓ¸ž=ÄþAvœèÍlIY,GŸ.fïÁÞ©~y÷R+Óõú‹÷qAôÙêÚFp ½ˆ‡&¶å¶0Ý*(ƒ6ÅßÞ9‚ÛDoÎjÀe«ÏÍ”¸“Óí²žëq"g7àìÔbjçs'D^SŠsÂ›f¡;ƒ+/øÝ0M=)‹ã½rèÕåîœ	«8„9ed4Ô„Çbq¼|H.†bqmó%¥Œ.FsXŽÜÂy˜C7¨úSÇæL½
_»_»~<ƒH±ÍD5·mâh¦Àr‹ù›
å$­¨]jÑ³™MÌÂ/(qÎªŽ] `ïÂcŒ7ïByKFáÏ¦ö!¿ÅñÒ—!ÙÂÝ›×˜Ûº9k*³£ÐRà½¦°m#4¶âÜë‹E•Þfz©¦ô¦<ÉÐ9£M0¼s›ÞÉgÃG85.¸¢§¬ÜèdÏF¿'ÎÔHsJ¼fgçK…·y1¸6¨éö*äÃm>êÎ%”Jú¾6“à“nÁÆ;!8„í#Ø_PÇ£ûEåZ/5?O‘Áƒ„çhlKnÏm>+Ì×¶,ÏÐLÈÐFé÷¤1&þâÚj,ëõ]*Œ³jUÞ½ÔJëkQX½Z1‘¡¬ë.è
P}Ñ“Xh/
hƒ…õ]×Öep£cëÉi{Ì1Ž›µðžfÙØ§/&·Ÿg8ÍåÞÝƒ»ÕŽ™Pæ°)‹Ò™ò8¿Ÿ‘Ž »SºµÒëê%„H(ÄŒËàQ¶Hst0Dk¯‹Þ`""èù!ÜM²3„ÞH)óà>-nº}ï„´°9‰+)X¼‹ýÝ¾ckb±XYO„•ÂñD
ºç ø›? ò“Õ?¸,¬¿1;;ûëx<Î‹?=Ï·¶¾¸Òå2ðµ¯þÁJA¡È,OÜLáA ÿ…ÒîÒ/ü)‚ Õ‡Pð`© Âêæþ8w=ïÿøß_æì[ßàO½_ãÄÿùVÁùþà{ß.8m>eþ¼óç¾}9ýîçÿº¨ù~ýæ·Åq,‚ ¬	g`¡qA…Ï	É8Æù.v¶ªÑÀ‹˜ñ ‚°ì=}™^Wºø_3¦…èî/Žé–w
A>Ÿ¼òòløbuâïO>ä“O'˜››ç/û$öE?™ä¯¿ùe/£Î‹ÿóŸ°)uÁ 6gðoÿž"ã+Pªd¹>ühœoÿ§¿]Ò<B?¾É÷†.-I… Â± ‚°"X-n%fTØ¢;+]Œbsìý«|ÁDA>ŸœßÿLÞkå	‚ «]4>õï$cSßøNâ7¯¼üö
ÕÒ¯låeü©÷ký`„ë7Â+]œÏ"‚ ‚ ‚ ‚ ÂÌ+/¿°ÒEÈ£³·ÎQKÇŸüØÊËøj‹+!·=½¯¶¸xè¡/ pç_¦yó?þ
°Ð!¬ÿö¿ýêW	ñYÿÍG?™àqûz ¦¦~ÆãöÇ/™òøãö6\OnMü=ÿ‹_š„ocúØLœŸýluF¿áXAAAAPþâØ›9ýÎ¶bµðQdœÿ÷Ç7ùj‹‹5kJ¨sÔR÷DI´XÿX%~ðëþíßsû§QžØø8k×ª•zËËËxè¡/ðÐC_ÀñD
±™8ÕÕë˜ÿÅ/™œüŒÇíë)yäá„h¬ïÛÛÒ†HSó¯{¢†¦ßÙbJSòÈÃ	á»±ÁÉï?Õ”Ho+/ÃV^ÆjD„cAA–µHQÅ½k|ðêAæWº8)ÔœêÂã*#:ÔÏ…$œD³ßG‹#NøÄ†ý+]š•CÅVŸ%z¶;¡•.ÍƒƒÔ« ‚ ¬~Ò‰Â¹
Ê+ÍÔôÏøo¿ú%%`+/cë—›‡úBÂQlt%ÿÎ¶zþñý1~÷É­TT”ÓØàä·j7$ŽµîQuOÔPVú›LMÿŒÛ?ò;
N€D|áÿëŸ²þ±JÖ=jK[žlùoè—®\Mü^šuáûÉÆ/SòÈÃ‰ØÍ@"ýjC„cá>D	%ÅZ$Éuggóy­²¼ÊPD:ÎÑØV¹,|Í~-Uaß„]=µŒç(b$Òe©fö\mÁ
pæãÑjp_ôàœ¥ÿýMøÚatû‚‹Î/M	¬êÁë¦«Ç‰±»Pâ•*³=å8Ù…-íœô5nq-<^ÜPºp¦åb®}Q/Óñ
¿¶yÓ·_»ð‰ÂKjÇR¯£¦º5œ“ñ|H­Ssýå.$êõkê´ücCý|¸ÍG£ô{s¼»:ÎÑØ¶Qûã6uï£Ð‰L%ÝClÙ:ÿ1ŠX†ôhb²ö×Ý"´‡éïÉôÏ‘<®Ç†•µ?´z(üyN.f‹]Ð°È}ír‘¥Ê40‘h{s¼­Ûjó}žlßÑÏiï*k È.'@ó"¨yG'ã=Ù·ßÓ1;oÐpÑƒíŠ^·Võ©îRúMãµ0õæ˜å¹{9}¹×ÔÛ4{Žf¯´E`Z o&ÄÏìÏ÷øH ÈnDÞnÆs8 ¸Þnö°´¥µBk¦“÷Ÿíðu•Å´¼OÛ(A>·X‰ÄO6náÇ×?XæÒÎÆß²SQQÎü/~É¯ÿ \Éÿ|ë'¸žÜÊºGm|gnnž²ÒßäqûzÖ¬)áÞ½9 ª«×¿÷szèÌÎÞKwþ¿$òõžðÓñOXÿXeÚüœYó7þ¶ýZ)yäaÓ1t'ô?ßúIbÁ¿ÉÉÏD8„B°¡Ã‡p_ŠCÕJ—ÂŠ	&§À¹9e®‡t®À ¶'?'•ÐåÃ,"f³ßƒ“0íI±x×©œyE+G:!´o„Oô3ìW¶-þf‚Þ öa¬ïËçœŠÈXŒ8éG~-Ñ>ö£Cýœ1ž¯×M—¶ýÂ1íÃ¿}ÍÇ.Ô?ö#£ôïÌOPlö·`Ÿ‰7.JïŸ$ÖSÈÝåaýSÍÂË²Sì2¤[Ý^Ûf¨Gú{R–¬`â•3ô¥«‡ ·?½ åuÓäXØü<w<‡½tõ:O—eQÎm”I¤OÅëf—â3Ó'ƒe[Å}Qk»¼A­ýÛ…Û{†aáýœíÙ&ÖXÌHW¯j›y@€ÐAÂ!}+÷ü3Ý“5vìØÊãÄÆ@	³õPoÝÏ™úM¯›®žöô¹0fî/šý>Z^rsÃ?ÌD±¯…ë$ÎÎÍ|¶‚Ï‘Z OªóLëh=ÍÞ£Ù…æâ î1Ò
6êíÑw–»ïT‚õºˆÊ‚ ¬.tÇñåÿú\¾ò€ÿÍs;Âñju WU>Ê¿zè!â÷~ÎÔôÏ˜Ÿÿ%%dL£‹¿[êë(+ýM~rûcÖ®-¥¢¢œ'6>Î¯~õß¹ýÓhÞe‰ÍÄ³æ¯;Œã÷~ÎßøßI„Ö¸áXXÅè®¥Y¢g
.Ý½²õ Àð“ÎÝ¢>LÖ&ÜkÉé”ß†’®¨5m#4¶‘UY
eHuæ;Jh¿ÍÝÚj¿é#ÏìKÍ§ôÙ!;×bv ™óJ¸Çt—ôøm*j7š÷ecj’	®Öjvëhâi½ÑÝãÄsÕ™ÜGª;7éðQÇŠØ±;’Ç›|ÞðÑîòà»ŠÉ5ŸŠ›²Ÿd¸¶9|ìYÔCvšÙä€xh47—X¹
;$Î/€…~ËäÑ·Ùa&Ì
?¨p |ÍD©®/#
X;ó8§®Ÿ¼œ÷1&ýPýRNY©sŠŒZº…mö54#
Ð·	;QFóu¡öíQ!†Æ©m¯MÙ©	Ûò9àfJKa.r+e{¦gs3óãPQ»ÐÜ»£Ëo-u#É}Yë;}Lí¡¶Ã#Ø+gYSºÆõöH¹”çµgHiŸ¬XèËk–D^Ï™Ù˜S•TKœ²ò2â‘(8ì”%Ú³CÑèjÌìh· SÓ¾d›§Ü˜Q¢Ø±—ö™œöi¥êm”g|,M9
h£J6TÓÌ¥^Ó€@ö>«$K_kMJÿ¨÷s\®%Æ{09êtÇ¦m£¼nšªÂNÀ®ƒH5¸_rRe”ZrÈÁ²­öVS[Ñ+šÖnÊ¨}ºüê¾Ì§ŸSxXS	Lb®ÿ‚ë§@ÒÜ“I1^G {O<9nYÍUVýZÿzCõõ6Ê€²mÍÔØk)#Ê5­M¨®Êkið‚½Ø×"ô.Ÿ½Ð„½sÈ£NîNLH:}÷žær¯ãX&‘·i|<e{dñîà™fÊ]tÁ$ënäÄÏBoðÌ~8}¹—zf(//g&‡ƒrƒÃÙ”.’â´Öï¿{×ø`A?–ð¼"¥
jbËÀ¦{6í¬š”°Jz~ãÃ|„;CànäEì[àìFÄcAV
©¢°.Ãêc¡‡†˜œüŒÿû½künÓVlåe<Ùøe®ßSç¨åK›Ÿ à3m‘¹ÈO&Øö•/±n-±ý³ŸÅXÿXe"LÄG?™ÈÛå«»™3å¿ñ·ì‰ò~çw¶Õ›â!ÏÎÞcýc•|ióÔ9j±•—QSóÅbTUÑáXX¥è§y:´Ñ½’:-¬¤{H‰PÝ™×~ãì¾Ex P×v[d»QÔ¸“g˜ˆÕP†T·žíðu/œänè ÚP».µr]ŠìÔê½|©¬¥‚a®wßR¿{öwB·Xÿº›
ýÃ»ãmptˆDTªŠÊi>èÞÝClÙú6"&ARœ2:ùÎÅ¯›]i§î^ ÿ˜U¨ŠaÎø‡µ›C
;¶© ý^”¨ó|3ÃÞþ„“4Ó0éÊSùfc>ÃµMÕrª Êpöøpö°@Ô¨9Õ¤B \Éž!èeÓÕZ®ú”5—½Ý‡¯’”ö1<5©9”›ˆ…¢Ø]6ª½ÚÇpU]WíJˆ2LáÍ|N‰Ý†¶ÍT¸Põ¥¹Ù"ƒ¤wê÷¡8yü¹øBõsÚ”õzõóÃ§kñèƒÄ	ŸPõ­;Ø6%D‰\âÃÖà~Ú®Äõ±ºLû®q¿…û3…tUJœ%Ë³¹–
­-*9<BÝS')4ºürUa]†€ÙeØqŽÆ¶Yï
0¬á\ªdK[%÷ÎCçÖ¸ 6ÐÎu½Ï!à[QWÄ(¤†F! ß{2qR„[²©kÆšð¸`ôD˜¦5(c÷kÓÍwµ$öôi!fÚíf!9+ÒxÝtµÛŽÿf¿–‹n¢;µv°ÜCýôk¡mšNÕ|Eµ“úlS>‘\µ9É{<ïºs¥˜Ðúp×IœmÍlç˜íSiÓõYúÚLØ[ÄÎÎàrh×îc=¿ïkÏÆ!ZßÔÒjåŽÒFéÛ½î…ïkÁYetgü¹ÈÆÚê?$1PsªOÕ8á'Î*5„˜o?gÖKÝ4¸“çZ {ØŠBúÍ ·ü>š¦œ¹Ò@WkÛ/ìÛƒ/m=8­ëîxµjg¢‰ðáˆgU5NÊ`fœ¨ö¾aw9±Õ×('tQ¯E€;¯˜;<B]ç¥ŽÞ÷žæòî*Bo4³ÿ¼&¸^>ÍØ3#´¾ì¢\]÷ž¾Loýohì3	uW¹‹wŽpt1a0¦ÆÃ…«áÜHn>êiN
ÒGw¿Ìé½ß  |j„7ÆZéuÁÛo„hí­¢.cwUˆ7š÷sž#‚»¹|zŒgöŸO¶9Vf×ÖÝÆƒû¸>hªÂug[%Ñ³­É÷·×OòÁ«‰œÝ€³³	G·‡¨Í˜ßñŒmÔü@;×µ¾¹ñðf™9)Âª ãxµ²©®v˜m
qóŸþ?ª*]ð»ØLœ|_9"®ßóÕë«L„¡¨ª|”_ýê¿›DÝÆ†üçbeËÿéÍ–çðãëÿDMÍ±•—ñõÿåOòÎ9áXX…F÷Ó
œéðPáX¥ºƒ@1§ý?öÚ›D_?@]çFæn¾¹Dn˜%(ƒéCÜìè]àºgHwïÑA0Í-tí`])Ü½dU§³Dtð,LóžþÒ}“»m)ÙàM8¾ûžv¼Ä‡7PÈT`m¿2£9Ç\\0íwÊ¸7Ê5MxÞÙÏ0KƒÕµ-hJ´ß(†+aÇãŸ4Äº¬¡¡^Å¿Ì)Þ¨·Ú<aÚÑ„ÛdØo}¡‰îÝDwê_yÕ¸/:a¨Ÿaö¨©´Oªc•UÅl¿ÀDß|íÚÞBü>Ñ§°î)wB›©¬…¹›ïªûIûÀË—´®u¿îþ‚·÷sAs`ªØ«Œ#Ìej€ÁÔ¶—Áûýô{5G©>-Ù2ÿ]Jüye¼
ùŸ@
–U®“9?›%9æenS’âk¦Á²Ô6
f“û¦?až¤û´´s-¥ €öw~à]î¸©ì€XÄÜ.Ýy5ÀüYÊØ”p¥7a£ÚÛŒÍÐ‚ïjRðSÂc”ØØ]|Ws]˜Î:MÍÓµ”– fIgÂŒƒÔÐ6é1Šä¶Å/š²˜(yj3k¸­ú%´A£ÚJÖ¸´>2]Ÿ•³À˜džÍB­ê‡ó¯œõ4[•sYŸ
À´ú_mTz’ƒ*ˆJ>¤i«užÞƒ§~\‹û[x¦yã`ÏôÒ†ÌYt(Í!lÂ²2ÔÝM—F·ƒßiÚ×à×âV_i ËtÏÿZÄ^kåƒî!¶´àÜ 
­ØÛZO9å¸zƒ{µ†öaf*Ý´‚…N`ó{T!|Ìþ‘*‚»[9=e8Ø×s²pªl­03…úWïÝËãõåPî¢7ÄtJÚÀÍÜÍ7¹nñŒÛžU"o.ïÛªZ‹½s{§¶Q¯$ìPp·ùhA˜¥îÓÄÜ4¾¾aU.+Âç‹T±žâß<·sU¹‹Ó¡/"§ÇÖžûj‹+áä½ó/Ó¼ùÿÆ”NwöÎÏÿ‚ØLœØLœß}R¹•ugr!ä’uõº„›9ôã›üVíª*¥î‰.]¹JUå£‰ôó¿ø%SS?ãqûc—i©áXX…'¢¹^·œËo&Ëjšõ²PÌ2hâè8·0<Bú¸í+B&Ç5f§_ËUMY\z5§ºTH€g1—#>ñBÒ_ÛÂêÁˆ& 7õµà4L{ÍLrê³ž•­£I´8‹U†;œØq•ÏsòÐ$¶«NÓ¦ðûh»Ýæ!/4'©c%•*”AB°ÉàæË@úØ´Z=N}¨#ü7Is|õµî!]xVâú©88bZé	nŒÅqºÌa?Ìh¢>eI‡7ÊÉi«ÏuQ½•cÞ8ø“Ê¹Æäz^ª†è8ÓãnêêQ²asÒ™ž~X–éòiHï*žPƒVÚ`…³Ç‡óùl‹‡{¬  æIDATžeK“~`-7÷öƒƒ•Àh9· qà¹ÜÞ#\'µ#©ÂŽÅýT`•–¾Mêú%f> ´à»XaAØmõßÅ¨ýŠgýxb1Ô–rˆåÃo¹É¿ß48ç|ÚÖ–‹n¢ßŒ']=„™¤!c?gwÙ³pÜš›8<UKƒÃ™\ì°¯EsO0¹mi®…^É:Ø›%…E¨‰±—q¹z	jŠrämbïéËìvÌzãöŸ/,žqZŽjí¥¾”}„@oÒõ¬Ç9QO
OÀyMµpóºNb¯…»—òy­}U!x
@o'VtA„$©Î×¿8öæ‚Eñþ²ïÀŠŠÈßþO›óo/]¹špó9Þ8ù-Óß×o„¹~#lÚö½¡K|oèRÆãdÊÿ£Èø‚|òI¿šáXX¥¸ó*ðúê†rÌM€Ú¬×¦½±Ö¦tÿhÎNm:wÑœB+U†YîEH¼›ÇéÐãåiSÖsr<„>a¾*êÇ5÷Õ,Ñ÷ÀËd‹r»˜fm¯²–è¹1é'!¨.Þ)“?V×vÑÎ)oµ¦L!é*4£»¯„û¨ªÆ(í*×¤)%›@d’	`âý(-[bq!åp¾F(Õ3$¯Kß¦œCfX¡;I·´)G}âƒ­¨n>]×êA«W%¾oÊ°Õ¯î©‰ú`£Úøõ ¡‡3Hófg»×MWO-ã‹ur¦£Àgs)˜‹Ý"KÒè8.2±]c®ÓÍŒ3'Ëê8Nîn¡‹™þaÎøo¨Á-ãó¨ÇN’&mš¨ZüK… (ü¹[næ?™†­•c|lõáÞ5î† äÙ¥ÈQÝw»‡Ø²U9›cß!<¬!;12ÍµÐM)¢O1Û¨cæ0Í~-˜ÒµïA«¶Ú¥ú%'Î)Õ¦£­^.òï7ƒ\ØŽ
qâ7žîÂSuM«»5H˜¦‚õVý\"-Ø«´X÷†þbb¬š¸Ë©­`Ž1=au¼‚¯…qÜÂÎ<E¯ËAëé½ÝoŠ.L‡«œÈÛÍ¤@1ÅÇç#¸Šöuž‘±—q¥P9‹÷rºÕyºDúc|<Õ‹ËÑÊé½GÙŸºÒ^è aÒ»yM¡¯r@o£ìÝb©f×I[!z¶•¹g“!,²½Gë³xòù ‚°”X	Â©â± áXXÅâ»™>ÚŽ½¹ƒ-)QèáŒÓÌî^jeº^_¬ì8„ úìum#8ÐÜ¡ƒ‰m¹-L·
Ê Mñ·wŽ`ç6Ñ›³ÚpÙês3¥îd(¬çz\‹í¦Å4ÔÎçNˆ¼¦ç„7ÍBw†æàwÃ4õ¤,Ž÷Ê5¢züÞ™°ŠC˜SfAFCMÉ¸¶éD›I.†gqmó%¥L.F]HÖíÉÊÃßSÛ“\0ˆ™0W&HojŒUÌ±ì]xŒq–µ}Ã;G±]MNÉõ/RUNÒŠÚY>{oé>¬‚Þ Õ=‰zˆ‡šørÑm>Z±ž!:tF‰êaå)üÙÔÅúüÇK_†d;wo^cnëæ¬©ÌŽBCH÷v˜Â^T´ÐØfp€éƒ_¥·™.úÀŸFÊó—3š!ÑDâ¹H:Íu{Êsfˆ¡
$Bô”™°ÌF¿'ÎÔHsJ¼fgçK…·y1¸6¨éö*äÃm>êÎ%”Jú¾6“`“nÁÆ…_¡úÏÔñè~Q¹ÖKÍÏSdPŸ¢žÜžÛ}V˜¯mYž¡™°¬mµ–õú.ÆÙ µªï^j%‚õµ(î4þ‰õ`]wÖýÅ0gêmøLk¤<›Åºz|^+ÑØ±›`p·ú·¾ÜQo<~™^ƒ³Xwë†ZéÝDOšËxÿÁÝìÙ="q$ºs.âåÐ*¾pœ×Ž­¡•ÁÕK0‘PˆW}–#ÀQÏ<~¹×~Ã$€‡©PJj=€CTÖZ‡fSƒ)‹ãém”ÞÖ€zGþÑ†Deu´´	ñØªRáëD4aµðÉ§“iãìZýVŒüÆììì¯ãñ8/þô<ßÚúâJ—GÈÀ×¾ú+]A„"³<q3…üJ»H¿ð§ B‘ÐbO%WµÈ\U"ðýDI÷[·$ž° Ÿ;þèWFÏûÁ÷¾]pÚ•*óýÈŸûöåô»Ÿ?üë¢æûõ›ßÇ± ‚°2$œûOÈH2ŽñåÞÒÀ‹˜ñ ‚•ó#Œ½ìÂetÏ„x£ ÑX‰Îi'¹¥E¼üä¯_A„Lˆp,‚ ¬‹Ž-|NX
qŒ—€”¸¶‚ KÃyö?S,gñQ<Í+/‚ ‚°||a¥ ‚ ‚ ‚ ‚ ‚ ¬.D8AAAAALˆp,‚ Â2sÇÀ¯Ÿ¤d¥‹’†šS]ø®úØÓ·Ò%)Í~¾«]¸½+]’•Åvx„Æ!Ö»Vº$R¯‚ ‚ðùã—¿üÅŠ¦ÿ¼PRòÈŠæ/1Ž…ûC8Ü”k‘$×IœMÌ_j%2x?•¡ˆtœ£±­’èÙvî„–6«f¿–ª0oÂ®žZÆOœaØŸGº¢,"ÕÌž«-ØBÎ¼b<Z
î‹œS£ô¿¿	_;Œn¿@pÑù¥)E=ÔœêÂã*3ÿ8±x–*·]Û_P~¼nºzœ¨£FÕ9és™ˆšÎ·Ùï£Å'lºFæ2¥ßÌxNE§o¾vá?„—<ÔŽ-¢´]ê\Õ¿ÍõªÝåê¯èP?rŠK«×“¡þ´ücCý|¸ÍGÉºËJÇ9Û6jÜæ£î}ÄrK¹€’î!¶lÎÿE,CzT»Z¡ýu·íaú{2åÖ‰äq=0Œ÷¿^…?ÏÉÅa±¹¯].²´Qz;Ÿ®=Iô9Þæ>ÃØ®Yõ‹èç´w•5 Ìf}gH,€
æEPó<ŽNÆ{²o¾§cvÞ á¢Û½n­ûMëº3·û¦kaê;Íýã²\‹#‚»ÍKÓEÞnÆsŽ‚ì®
ñÆ3û9ì=}™^×o7{ Äœ,ÂÛÍ2E+>² M2¯¿3ä›Þ;°÷jA„`j2JUõ‚7Ü%%vwjQégg~ÆºÊõE*ÍƒKå:ÛŠæ/Â±°ê±¡Ã‡p_ŠCÕJ—ÂŠ	&§À¹9YÕÃÄ+gè×ÿÐ„FÆn0A
î‹-ØõØ¾=øÚwáöfs´ÜèP?gŒ…ia.í£6òaúæ)eðºéêiaO_Ç–ñÚŽÅˆ“gçiUú¹&°=uPB¯—Qúwæ'(6û[°ÏÄ‰ëÐ?I¬§»ËÃú§6š…—e§Øe8N¤;õ8Ú6“@½8Òß“A.lb=€”ò> ½ýé)¯›&ÇÂA‘‚ŸçŽç°—æ..7Ë²(g†6Ê$Ò§âu³Ëñ(³ø‰‰¾=x\>ÑÏ°_µe-þf‚Þh†þ¢ð~Îölkî]ãƒW2Ÿ²/]½ªmæ! B	‡ôA¬ÜóÏtOÖØm@°c+ƒ}–±ê­ê.H³ßÐ'û¹17]Z?rá˜v-_rsÃ?ÌD±¯…ë$ÎÎÍ|fñ)w/§/÷âj=ÍÞ£û³WàL~âîQO3G9B ¸›ªÐ<³?Ïö,Ï!ÙŸ,{ÑqŽÆ6–`àSaå‰|øOË.ÿsxqoUÞz×ïµ©4.¿×¼mEóáXXÅè®¥Y¢g•À`r¯l=@ãÀ0|Ä¤s·¨“µ	÷šúÍ,Ñ³ß†’®¨5m#4¶‘UY
eHuæ;Jh¿ÍÝÚj¿é#ÏìKÍ§ôÙ!;×bv ™óJ¸Çt7Çøm*j7š÷ecj’	ªl6»u4'O½ÑÝãÄsÕ™Ü‡ÑA
F‡:VŒhÄŽÝ‘<Þäó†v—ßUŽ^-ç©(°)ûy@†k›ƒhbQ‰úxº–2¢Œ¾2^7µå½¢I»vPFíÓ5à·vÛ6o³Cd4³K¶o“rÆ~WwTµ(Ô•MøÚÓˆUÕÔ€V_úznçdÄvx„ºJÃý™—C(Æ¤ª_Ê)+ëzð6P['|"“½ov¢ŒæëBíÛ£œÚCãÔ¶×¦ìÔê+¯¾3¥¥0¹•²=Ó³¹™ùq¨¨]hîÝˆÑå·–º‘ä¾¬õ¾¦öÎPÛáì•³¬)]ãz{¤\ÊóÚ3¤´OVhíÖ´¡½Êg–D÷dª30)¦*!¨–8eåeÄ#QpØ)K´æÁ“k=ÅÝŸ“k=SÓ¾d›§Ü˜Q¢Ø±—ö™œö©3€zeÄ7>Ç:yÕ¢dC%0Í\êu1
dï³J²ôµÖ¤ôz?—ÁåZb¼'“£¾@wlÚ6Êë¦©*LàìZ0ˆTƒû%'e‘QFi¡%‡š·Ùa&Ì
?(Á(ßD³·:k‘O?§ð°¦˜þÄ\ÿ×O¤¹'“b¼þŽ öž.xrÜ²š«,êØä€xè†êêm”eÛš©±«>ùšÖ&TWåµ4xÁ^ìkz—Ï^hÂÞ9d©Ó©9É¿6'Õù<“²_ÞÓ‰ÃúàÒwVàÝ~ð&wÛÜÔ
œñX„ŽO£·	ýÃ%›¾Œ­¢Š‡^ºðS“Qþ9|éÉOuœO£·ùÞ»Èo©òòGyø‘ÕÄneXSòUU2úý=ÿþ/ÿKÚß¼õÖ[ËRŽ…UŠ.pš§CÝ+©ÓÙJº‡”Õ}yí7Îî[„Úùèðumç°E¦±E½P€;yNg[
eHuëÙP÷ÂIî†ª
µáR+×5¡ÈÞ‘A­NÑË—ÊZ*æz÷-õ»gq't‹õ¯»©Ð_¸;ÎÑØv GG€HD¥ª¨œæƒî}Ð=Ä–­Ïa# )b$Å)£“ïŒQ¼ðºÙ•vê®rÆ¦U1Ìÿ°öo³cHaÇ6 ß‹užofØÛO0ƒÓ0éÊ3:r­™ÏpmSEµœê!A3-®2ˆ\Så1ˆ;5§ºðTžqâ¬²ƒeðíÃvjSR›I­ÃÜO?xQnd€¾TQa‚áo†©íI~œÇC„•ýœÌÄÆnCÛf*\¨úÒÜl‘AÒ»NõûÐ?œ<þÎ\|¡êAlÏwáëÑ‚Xh÷ î`Û”%Òˆniòr?mWõ2Ö@—iŸîtüîÏÒ}P+q–,ÏæZ*´¶¨äðuO¤dÐèòË=T…uf—aÇ9Û^d½+À°†[|p©’-m•Ü;;;Xã‚Ø@;×õ6>‡ü!ÀÝÈ‹Ø·nE]£[-e00ŠWùÞ“‰k”6””M]#0Ö„Ç£'Â4õØ°v¿6Ý|§îÄ÷°§¯ŸÇšÙÓnÏ=¬ ÒxÝtµÛ4W£Ö.^tÝ©µƒåvê§ÿ˜jãšNÕ|Eµ“j0-%ƒHîìñáìIÞãy×+ÝÀ„Ö‡»NâlÛhy:Ï1Ú§Ò¦ë³2ôµ™°vS‘N`Îàrh×îc=¿ïkÏÆ!ZßÔÒjåŽÒFéÛ½î…ïkÁYetgü¹ÈÆz»6©…1j"ŠbwÙ¨þC2öùös&a½ÔMã€;y®º‡­(¤ßzûÁï£i*À™+
tõØ¸¦‡dJ[Nëº;^­Ú™èD"üE8bÇYU“2˜'ª½oØÆÂÄ]Nlõ5Ê	]ÔkàÎ«æP×9B©Ãü~èØ$¸`†Ð72œ0Pî¢7¤òv›Ø{šË»)!2ûµgÃÊL`«7ÊËû^}œˆöž[70´jgF‚ Ê§ÑÛ|½½ÒÅÈ‹ùtœùt|¥‹±*¸téÒ‚m{ÿ­›?û³?[°}¹DcáXX•hn¡{Vg:<T8ÖBi[4ÀœöÿØko}ý uêEvi^— ¦q³£wCêž!Ý½kD£HàÚÁºR¸{ÉªNg‰þè8àY˜æ=M¤¼ÉÝ¶”lð€&ß}O;^âÃ(d*°6ßÞîÃ×Í9æâ‚i¿¦0KQ®iÂËðÎ~†Y¬®í¢¦D§º€užÞƒ§~\‹ã˜m²±îz‚·÷sAsî:u#)Hy”j(ÇØÑšÐªSæj¡™ã@~ŸèSX÷”‡;¡ÍTÖÂÜÍwÕý4¸ëÄ%LëZ÷[×ÃQî/5À0¡î§ö=4» Ue@¼ßO¿Ws”êÓ’-óß¥ÄŸW&ÀÛP@¥˜±ü vÌùÙÌuÜÞÜ¦$?Â3}Ô§¶Q0›Ü7ý	ó$Ý§¥k)u ´¿óïrwÀMeÄ"ævéÎ«îäÈ‚PÎÀ&˜‰¡þe£ÚÛŒÍÐ‚ïjRðSÂc”ØØ]|WsxÈœFÍB(ÓD^íçF§ßL˜Ñc`¤°Ä(’Ûr,[BÖ%Omf
·U¿„6hT[É—ÖG¦ë³²`“ƒÌó±Y¨Uýp¾ñ•¢³ž¦c«r.ë®E ¦Õÿ
l£Ò“,PATò¡÷E'õ3ÌsØƒ¼úkæƒ=ÓK2gÑ¡DRú( C=d¨;»›.Œn¿Ó´¯Á¯Å­¾Ò@—éž-þµˆ½ÖÊÝCliÁ¹áMÂÚv“hÛàÈyOÆã ‹‹
ìm­§œ#iôêT'ð\'5‘7—{h©Þí3‹ò‚ ‚°Úxë­·LâñrŠÆ Â±°*Iº¶ä;•Ì2Äƒšf½,³Ú‡ø:Î-œ¢WY@Y—ˆLŽ!kÌN¿–«>š²¸ôjNuoÓcÕ®é¯maõ i]Àc1âØqÖ'Êk)‡øX4Ãq4jJ‹]ì¿ÁøKf—róóNÃÔÛl¤8!5V¹Y²Ps’:vPÒQ©B$›n¾¤Mk]ï«ÖeüŠ*ðý(-Õ^¸1GŒLpc,ŽÓ¥¦éÏ¶††z%6·\õ%¦š;{|Øês]Toå˜7þä„rc®1¹ž—ª!:Îô¸›ºúC”lØœt¦§†ß–eº|Ò»Š'Ô •ö¬8{|8ŸÏ¶èY¶4éÖ–7¢ÝÊc%0šDÎ­hx.·÷ˆ„ •:¸jq?ØF¥¥o“º~zø$ Zð]¬Î° ¬×áÄ¦Ï’8¥<ù“£ö+ùö«ƒüûMƒsÞáÁ§mm¹è&úM«~3Ì$
éëîÐ$¶«Nì.›öœÕàÖÜÄá©ZÎäb‡}-š›x‚ÉmKs-ôúHÔÁ‘LûÞˆ°ÛQÅã{áãëx)™hçzÇ9u¡;eàFŸYt7Ÿö¹èïöÆPxâ8Aîtñx¹Ec€/,{Ž‚î¼ú&Ñ{©b}VR€¹i vGÚßÚkSºÏ^ƒ­pt,A‘—½³Ü‹ }ìæðóÐ»|v*ž:™³‘ŠeXQHýÝ±•
fùì½Ì®Øk­\ï6ÿ—³›ãØú·Êªr‘BTI5Í7Ç<ŠŒÕµ-¸´s‰^1þŒÏ M…%áHÖOPîkßU{úô-JXÐc'ÜÅïk’“¶(V<4š—c8õºÄ¢…ˆÆŠùw¹[ÚÄ–¶Ì%¦‡£Ü|)uW¸Ë-C=ŒÅˆS†­^ýRÅç†&¢1@‰È	Q8±€ jãªŸ¿9‘ÏðÎ~ú·kÿ'NøÄˆÆ>›KÁ\ì‰ÅŽ–Ø®1WëVƒfúLÜy5õ9[n!@
L(÷½þaÎlž!y‚|¹êÃwÑÜ–!º'í4ZðëUÍü'ÓÀF*µ¶ÑV¿îÝÊO<Êu_|psPÎæÌxXÿBkÆß5ß;‘iæX‹ýÙC“³:v!Ùnlïg4DFé7ˆÆÛw5Ð•Œ3oh£rè/V+ù÷›A.l%ªµµP<YwêÁ²îòa„Ä¬c1qeœ8É>ÏØ_ÿZxXÿº·×ºŽ48€)>>cS3P^Oë^€½´Ö—Cä9²È™óOJ¬fïiZS{ÜÇõK·Y³õ ‡
ÏŽö¾šl¿³±ïÕ‡pè¡ðD4Aî/VB4q«ÃT²gq'¤'zs[RÐÐ§¬Ù;G°wª_Þ½ÔÊt½þâ}B}v„º¶h/â¡ƒ‰m¹-L·
Ê Mñ·wŽ`ç6Ñ›³ÚpÙês3¥îä”¿¬çzœÈÙ
8;µ˜†ÚùÜ	‘×”âœð¦YèÎàÊ~7LSOÊâx¯\#zµE¹;gÂ*aN™
5á±X/’²X\ÛhÞf¢šÓUg‚á£Ø®&§ÃG‡ú³N-zT_ô˜bë"¦šö'œú›r-œ=>œ/©:º0´	_»aJ~d”3‹E•“´¢viEOëzæL½
_»_;(7§v/»@ÀÞ…G0&ïByKFáÏ¦ö!¿ÅñÒ—!ÙÂÝ›×˜Ûº9k*³£ÐRà½¦°m#4¶âÜë‹E•Þfz©¦§ÜûÉÐ9£%ŸÍ¤Ó\Ÿ	aŽ#¬¶„Tˆž²r£“=Cýž4:S#YÌ)ñšÏó²Éˆƒûø`ƒšn¯B>Üæ£î\B©¤ïk3‰Nél¼bCØÞ9‚ýu<º_T®õRóó<HØqŽÆ¶äöÜè³Â|mËòÍ´€mT!ýEAXÖë»TgÔª:¼{©•Ö×¢°zµ"S¿i]wÅî/
º®¬Ëàˆ5Å8~Ã£Äáýß õr/®Þ Á^Th
A66Æ8&ÂÛÍžŒ¢ò‘@Äúw®^‚Á^-D†‡·‚ìî
d†Hd†òª”Äƒû´˜åJô½ÒBÖ$f‹¤²LïÕ[µÊÂx‚ ‚¿1;;ûëx<Î‹?=Ï·¶¾¸Òå2ðµ¯þÁJA¡È,OÜLáA ÿ…ÒîÒ/ü)‚ð ¡Úo
¨A„Ÿt‹ãåËÏþuJ’äë7¿-Žãû‰Ò²2îÅã+]A„¢pTøœŒcœïbg«Ý	¼ˆ‚ ³÷4—{]¤‹ò5zƒgö/v=#Ç‰tK?/‚ ÷#â8¾èÙ€ðÍZéb‚ ‚ ‚ ‚ ‚P$V«ãXÇ»ðüO/dÿ‘ ‚ ‚ ‚ ‚ Â"áø>âø×;ø‹ãÿž/oû
ekË²'AAAAA( ‰q|Ÿ±½å÷ÙÞòû+]AAAAAŠÀÏ)n˜‰b!ŽcAAAAAÁ„Ç‚ ‚ ‚ ‚ ‚ ‚	ŽAAAAA"‚ ‚ ‚ ‚ ‚ &D8AAAAALˆp,‚ ‚ ‚ ‚ ‚ ˜áXAAAAA0!Â± ‚ ‚ ‚ ‚ ‚`B„cAAAAAÁ„Ç‚ ‚ ‚ ‚ ‚ ‚	ŽAAAAAÿj¥ äÎg?8F×À‡¶7u¿NßU¯@‰–šI.÷¼Ê›ìãÌ‰gX·9¨:…gûxæ‹K ‚ ‚ ‚ ‚ Ü‡ˆp|ß±É$r*áó¯¹ìáSAAAA„â Âñ}ÎºÚÀ}Š&ÀÙ¯ýïhû¿öÚ·èüõï±7¿Îáj;œI¯ÚÞÊ×vðÎ¦ãÓËë<ÇµÇL:‚l:Ç›?håµwþŒz–ÅìŒ¶.çBnóŸ{¾Î;áÔãkù‡Ó?¥ÌÆ}ÉzØÄ×v¥æeQ®|‹ŽÃ#|mW+ïüpvý;áüAAAAáþEbßç|6~ØDÝA	©Å;Î}œyç[œéÞÄ;‡qùSàßâð•:xvMás¼ùƒIÃ‘Fà_‹Áw^ç€Þ9üc`é~ÁÔcê„ß…«—üÚqÇÞü+Þ¡•×´t×þZK—¡œéß¦îß¥;þ«¼VÇ|­•k¯röµãÿÕ9j^ûƒï|‹×v‘Ì[«‡¦î×|ç£îCcèìåz‡í¾ó-lÉp~‚ ‚ ‚ ‚ ‚póÿ+‡°šs|F     IEND®B`‚‰PNG

   
IHDR     C   ÷E«Ë  
<IDATxœíÝOhœw~ðgdÉJHzñÚFØ­»»ŠKe¼Ð:‡†M¢ ìn¨0ìfÓCa‹lbØ·AK›šÆ8ºÄ=„²]v+…è,'Yò‡Õ¥>ØJ­‚kSù/½´ÁuVÓÃh¤‘4²eç•Gö|>`3šw¾bæôü¾~ÞÒÔÿþw9     4­?;ÿNÞùå‰'žH[[[J¥Ò}_«¥À¹     hrBg     
#t     0Bg     
#t     0Bg     
#t     0­år¹Ñ3     ðˆhýÖc¿Õè     h òôta×R¯    ÐäÊÓåÕŠ!t    hvÓÅÕ0    š\‘÷þ:    P¡3     …:    P¡3     …:    P˜ÖF     4^¹\nô,C©Tjôw%t   €&V.—sáÂ…|öÉ§¹~íZnÝºÕè‘¨£½½=ë7lÈ=óLžÚúÔªŸÕk    @“*—Ë¹ðï2ü/C¹|é’Ày»uëV._º”¡_þ2“&WõfºMg    hRÓÓÓùìÓO“$¿ßÕ•gŸ{.ë7¬oðTÔsýÚõ|ôá‡ù|b"Ÿ~òI:ŸêÌš5k=V]6    	•ËåLOOçê•+I’ï?÷¬Ày[¿a}¾ÿÜ³I’›7ndzzzÕn;    I•ËåÜ¾};I²aÃ†OÃÝT?£¯¾újÕÎ‰Ð    €	    (ŒÐ    €Â    (ŒÐ    €Â´}Á›ïIß‰É:ÏìÊàØ+ÙVô®¨«yïà›É_¾žÞŽFÏ    ±³o§û§£K>½óÕÁÛ»ñ½Åù7÷¥$é;>”;*Ý|÷HÞÈ¡o|í;;—·z>Î]þ¹2à¦óhú{ÞÎù÷†ßÐÕ¼w°?G'=    °Û
åÌØüÀ¹þ‚l‘Îå­ž¯ð»<L
ßt®š2Q
p¿ÌÅ©d[G¼k†OîÎºÌ=·sÏ®dd4ãÙšÃ?{=½Wž†ÔlOWOJöìÏá/NÍ„Å3Ï×œ¢,<1©ž~Ì¿^mà<™£/ïËûÕ×MÎk/ŸÊx¿sÙs×ü­    Ðv¼’3c¯T~žÍòræÐö$•œ®»'éÛ³+Ã#£I~;É¥y¿Sïuµj7_º8—?ŽŸèO÷é¥2¹…Ë§óoOÏ„Ì]û3|rs~>8¦¿gtÞ–u³jL§óÙ·Ÿ0LœÊï^÷ÐøÈh%Üíz>Oçt^[´~?šþ7ÏÍhäTÍd4ýÌ{Ýø‰7óÞTåçùsõ÷OçæRs/œ+×ëÏ[gçÿÚ]çž8•¾…s    3s’==éK’‘gÛÎŸ©<××½8p¾?õÚFÓßsd6CäÞ­Ø¦óø‰þtŸXð`×óyº#IGÍ©F2{B1þÅµ$5Ý*6‚íž{® q97³½æ„bæ$¢úüÄd¶Ê±Õ/ÐdþãJ’Žsy$u6¬Oåçg‡ràä`r°?G'f¶•;’›ï~ñÔ9ÕøÇÓyédÍlµsO®<¶Äé    P£vû9ïdx¤Úž0“çeW^XÆ&ñº½¯g83ÍKõEŸý×Jà\§…áè/Î¥÷®yÞöHz2üPÞÓne¬Xè¼H½J‰:›Ãµvîþ^u÷»t¤ìy¦òÁvlÎ–$ã³_ÂÙÒ™¤zj1u9“ÊÖqÏ©y—¸xñjRç‹;õEe;{ø§ûæ¿ÿÄ—™JR½×à¼¹;¾—º’ñ‘tÏlUQŠ    ¢Ú-æmÝ•Û÷Ç¯¦wçLžWÍÿ
0»9ý“¹ÜrÝÞ§ïÄ@†g–]¹w+V¯±óÕÁœšûW8Ÿ};Ý=ûÒý‹Í966”3ÇwÝý‚S§óZÏ¾t¼œ—Æ†rægû³s…f¯l\ß‹ÊiK}Ó{r(gÆ*ÿ 3[àwªñ     ’Ï¤/ÉøéËùñ™‚Âª5’ŽÎ­÷þ¢ê2+Kzp›Î5v¯Ü¼øå]_ssæK5»E|åË%7¤—¥º	½äMý®.~IçÖ$“K–ß9DÞžcC90ÛóA~=µ;½w|    4±íyaO2<r*ýÉr«5–kÝ–o'™œ­Ï­Ôküs¥å ssÖ%©îšVÚ6Îæ”,­!¡sÕ¢šŠe¨Û}_æ¾°óë5æ:œ+&sôå}9ºg g~ø|vfrñÜwêk®ÞQs¡j¿5    °¤jÅF’û®Ö¨dŠu:—w¼˜Ã]£9º¨‚wkÿ°’÷UQïžKŽ¦¿gTµnV°^ãN¶š«š¨„¼ƒ9Ü•yw¢\hÝÞC•ß™Ñw|(ƒ{’L|_ßç$·š¹F¾ãÕÀycz² ö£cwŽ-¬õèÚŸá;Šïx¥N}È®ÖÝ®    æ™©ØHî½ZcÝÞ×äõlLïÉÁy¹c²+ƒcsK©‹sÉ×Üž—^½šŽGXéÿ~óu¹ÑC     V¹\ÎíÛ·ó÷G%IŽüõ_5x¢¥œË[=NMå&ôúßüm’äÏ¿–¶¶¶”J¥B®»ç³È?uþiž|òÉo|Ý†l:    ,ËÙ+U·÷Y­Áƒ×ÐNg    €ú®æ½ƒý9:sÁÁ;UÜ²ª   €UhczO¥·ÑcpÏÔk     P¡3     …:   @{üñÇ“$×®]kð$ÜMõ3ª~f«•Ð    šØºo­K’üêÃrãúOÃR®_»ž_}øQ’¹Ïlµr#A    hR¥R)ð‡;sùÒå|>1‘Ï'&=Ë°óé§S*•=Æ’l:   @*•JiiiÉw;¿›½?øA6mÚ”öööFÅ{ì±lÚ¼9üâ‹ùöw¾“–––U<Ût   €&ÕÒÒ’µk×¦ó©ÎlùÝ-™žžN¹\N¹\nôhÔ(•J³‡mmmY»vmZZVï>±Ð    šT©TÊš5kÒÞÞž¶¶6aó*W
žWó–s"t   €¦V
žWóæ,sVsØ\%t    Š0“‡Ã=‡Îqa8ÿó_+1üÝÖ?É¶'75z    €e³3    @a„Î     Fè    @aî¹Óùßë[‰9     xØt    hr¥R©°kµþç©|ýõoR.—kÞ °ë    °
•Ë•°¹µuMÒR`è¼¶½=­mÓóCçH    eå”S*•ÒÒÒ’RK©°mçÖÖÖ{®u    àRj)®‰¹µÈ®     š›	    P¡3     …:    P¡3     …ù/!b =Ú    IEND®B`‚# CLM Common Library

## Common Core Module

When extract the common code for every CDA in CLM that is generated this module.

### Dependency

```xml
<dependency>
    <groupId>com.hsbc.gbm.bd.clm</groupId>
    <artifactId>clientlifecycle-common-core</artifactId>
    <version>${common-clm.version}</version>
</dependency>
```

### SparkSession

There is provide two approaches to get SparkSession.

#### First Approach

* Main class must need extend `com.hsbc.gbm.bd.clm.env.SparkJob`
* Main class must need provide constructor 
  `(jobName: String, configPath: String, params: RawJobParams)`
* Main class must follow annotation `@SparkJobName(<jobName>)`

**Notes: if you use this approach that entrypoints.class must is** `com.hsbc.gbm.bd.clm.runner.GenericSparkJobRunner`

##### Demo

```scala
import com.hsbc.gbm.bd.clm.annotation.SparkJobName
import com.hsbc.gbm.bd.clm.env.{RawJobParams, SparkJob}

@SparkJobName("clm-gmfx-cda")
class Main(jobName: String, configPath: String, params: RawJobParams) extends SparkJob {
  override def appName(): String = jobName

  override def configLocation(): String = configPath

  override def process(): Unit = {
    //do some things
  }

}
```

#### Second Approach 

* Main class must extend `com.hsbc.gbm.bd.clm.env.SparkEnv`

##### Demo

```scala
import com.hsbc.gbm.bd.clm.env.SparkEnv

object Main extends SparkEnv {
  override def appName(): String = this.getClass.getName

  override def configLocation(): String = "application.yml"
    
  def main(args: Array[String]): Unit = {
    }
}
```

### Submit Job

as of now, we just provide two render template.

#### run in hdp06

```xml
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.hsbc.gbm.bd.clm.renderer.GenericTemplateRenderer</mainClass>
                            <arguments>
                                <argument>${artifactId}</argument>
                                <argument>${version}</argument>
                                <argument>config/deployment.yml</argument>
                                <argument>${project.basedir}/src/main/resources/scripts/submit-job-fg-hdp06.sh</argument>
                                <argument>submit-job-fg-hdp06</argument>
                                <argument>1.1</argument>
                                <argument>false</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
```

#### run in hdp45

```xml
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.hsbc.gbm.bd.clm.renderer.GenericTemplateRenderer</mainClass>
                            <arguments>
                                <argument>${artifactId}</argument>
                                <argument>${version}</argument>
                                <argument>config/deployment.yml</argument>
                                <argument>${project.basedir}/src/main/resources/scripts/submit-job-fg-hdp45.sh</argument>
                                <argument>submit-job-fg-hdp45</argument>
                                <argument>1.1</argument>
                                <argument>false</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
```

**Notes: don't forget update** `clm-<product>-cda.sh` **for run script name**

### Utils Class

* when you `import com.hsbc.gbm.bd.clm.utils._` that you can use follow function

  * `rename(pairs: Map[String, String])`, `applyRenames(originalToRename: Map[String, String])`
    input Map that can rename field name for Dataframe
    **notes: when source field name is not exist, that applyRenames will jump but rename will throw exception**

  * `skewjoin(right: DataFrame, usingColumns: Seq[String], joinType: String, divide: Int = 100, samplePercent: Int = 10)`
    `skewJoin(right: Dataset[_]
                 , usingColumns: Seq[String]
                 , joinType: String
                 , filterKey: Seq[String]
                 , skewValues: Seq[String])`

    `skewJoin(right: Dataset[_]
                 , joinExprs: Column
                 , joinType: String
                 , filterKey: Seq[String]
                 , skewValues: Seq[String])`

    instead of raw join, it need provide a skew value list, it implement by separate skew rows.
    and if skewjoin is deprecated that it implement by random key distribute skew rows.

  * `dropDuplicateCols(rmDF: DataFrame)`
    it can drop duplicate columns base on parameter dataframe

  * `dropDuplicateColumns(dfs: DataFrame*)`
    like dropDuplicateCols, but the parameter order is necessary, remain order is big  column 

  * `trimAllColumnsToNull`, `trimColumnsToNull(cols: Seq[String])`
    if value is blank char that will transform null, all

  * `applyInserts(inserts: Map[String, String])`
    insert hard code as field value

  * `storeAsParquet(path: String, partition_col: Option[String] = None, retention: Int = 7)`
    store as parquet, will base on partition_col to select whether need partition

  * `write2Es(rawIndexName: String, cdaLocation: String)`
    write to es , the second parameter is add for index to make da can see the cda location.

  * `buildFullSchema(schema: StructType)`
    will base on schema that output special field and if not exist will add by null value.

  * `getMetaDataResponse(host: String, port: Int, batchId: Option[String])`
    will base on host and port to get mda path metadata object, the batchId is very important that if not None will get the date which batchId point.

* when you `import com.hsbc.gbm.bd.clm.utils.CsvUnitTestUtils` that you can use follow function

  * `csvToParquet(path: String)`
  * `csvToHiveTable(path: String, target: Option[String] = None)`

## Common Data Quality Module

### Dependency 

```xml
<dependency>
    <groupId>com.hsbc.gbm.bd.clm</groupId>
    <artifactId>clientlifecycle-common-measure</artifactId>
    <version>${common-clm.version}</version>
</dependency>
```

### Measure

* you need to make Main class extend `com.hsbc.gbm.bd.clm.measure.MeasureDQ`

* you need to implement follow properties

  ```scala
  //this is dir for measure file, if in cluster it need hdfs://
  override def measureDirPath: String = s"${appConfig("measurePath")}/${appConfig("name")}"
  
  //this is some data sources for measure input
  override def dsParams: Seq[DataSourceParam] = (pathMap + ("cda" -> s"${appConfig("outputGMFX").toString}/date=$date"))
      .map(x => (x._1.replaceAll("[-]", "_"), x._2))
      .map(x => {
        val dcParam = DataConnectorParam("file", x._1, Map(
          "format" -> "parquet",
          "paths" -> List(x._2),
          "skipOnError" -> false
        ), null)
        DataSourceParam(x._1, dcParam)
      }).toList
  
  //this is some sink for issue rows data and measure metrics
  override def sinkParams: Seq[SinkParam] = List(
      SinkParam("consoleSink", "CONSOLE", Map("max.log.lines" -> 10)),
      SinkParam("hdfsSink", "HDFS", Map("max.lines.per.file" -> 10000, "max.persist.lines" -> 10000, "path" -> appConfig("metricsPath")))
    )
  ```

* you need to call measure() when cda is generated

## Common Data Lineage Module

### Dependency

```xml
<dependency>
    <groupId>com.hsbc.gbm.bd.clm</groupId>
    <artifactId>clientlifecycle-common-datalineage</artifactId>
    <version>${common-clm.version}</version>
</dependency>
```

### Usage

#### Scala

import package before use 

```scala
import org.apache.spark.sql.DataLineage
```

* get dot content or svg file by Dataframe

  ```scala
  DataLineage(details = true).getDot(coreData())
  DataLineage(details = true).save(coreDataDF, "target/core-data-lineage.svg")
  ```

* get dot content or svg file by temp view

  ```scala
  coreDataDF.createOrReplaceTempView("coreDataDF")
  DataLineage(details = true).getDot("coreDataDF")
  DataLineage(details = true).save("coreDataDF", "target/core-data-lineage.svg")
  ```

**notes**:  the save path must be local file systems. and we suggest just generate in dev environment(**dev environment comes from unit test or say jenkins**), it means that don't run in cluster. so it should follow `if (config("env").toString == "dev") DataLineage(details = true).save(coreDataDF, "target/core-data-lineage.svg")`. and we will auto upload the svg file to jira as test evidence.

#### Jupyter

* get spark session

  ```python
  import os
  import sys
  os.environ["SPARK_HOME"] = "/usr/hdp/2.6.5.0-292/spark2-client"
  os.environ["PYLIB"] = os.environ["SPARK_HOME"] + "/python/lib"
  os.environ['PYSPARK_SUBMIT_ARGS'] = '--jars <path to common jar file> pyspark-shell'
  sys.path.insert(0, os.environ["SPARK_HOME"] +"/python/lib/pyspark.zip")
  sys.path.insert(0, os.environ["PYLIB"] +"/py4j-0.10.6-src.zip")
  
  from common.py36.app.sparkEnv import get_spark
  from common.py36.app.configuration import SPARK_OPTS
  
  SPARK_OPTS.update([("spark.sql.broadcastTimeout","36000"),('spark.yarn.queue','platfora-finance'),\
                     ('spark.dynamicAllocation.maxExecutors','50'),\
                    ('spark.jars', '<path to common jar file>')])
  spark = get_spark(spark_options=SPARK_OPTS)
  
  import pyspark.sql.functions as F
  from pyspark.sql.types import *
  from pyspark.sql import Window
  ```

* get jvm object

  ```python
  jvm = spark.sparkContext._active_spark_context._jvm
  ```

* make Dataframe  register to temp view

  ```python
  df.createOrReplaceTempView("df")
  ```

* get data lineage (content is dot language)

  ```python
  print(jvm.DataLineageApi.get("df", True))
  ```

  the second parameter is able to appear detail 

* transform dot to svg 
  https://apprunner.hk.hsbc/swagger/docs/?url=https://apprunner.hk.hsbc/graph/openapi.yaml#/default/post_api_v1_graph

  * select request type
    ![image-20210706144817057](README.assets/image-20210706144817057.png)

  * select response type
    ![image-20210706145005645](README.assets/image-20210706145005645.png)

  * you need to click try it out then you can fill dot content
    ![image-20210706145501356](README.assets/image-20210706145501356.png)

  * fill dot and execute
    ![image-20210706145149147](README.assets/image-20210706145149147.png)

  * download svg content and rename file
    ![image-20210706145234210](README.assets/image-20210706145234210.png)

    this is xml file that you need to rename to svg file then you can open it by chrome or IE 

## FAQ

### 1- How can I get the es index name?

answer: We have ingest date and timestamp in sparksession, and use it for index name to write in es, so you can get by `spark.sparkContext.getConf.get("spark.runtime.config.time.date")`or `spark.sparkContext.getConf.get("spark.runtime.config.time.timestamp")`

date format is `yyyyMMdd` and timestamp format is `yyyyMMddhhmmss`cat: ./src: Is a directory
cat: ./src/site: Is a directory
<document xmlns="http://maven.apache.org/DOCUMENT/1.0.1"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/DOCUMENT/1.0.1 http://maven.apache.org/xsd/document-1.0.1.xsd"
          outputName="${artifactId}-${version}-test-report">

    <meta>
        <title>SCSAI Party Asset pre-processing Test Report</title>
    </meta>

    <toc name="Table of Contents">
    </toc>

    <cover>
        <coverTitle>Project: ${project.name}</coverTitle>
        <coverSubTitle>Version: ${project.version}</coverSubTitle>
        <coverType>Test Report</coverType>
        <projectName>${project.name}</projectName>
    </cover>

</document>
cat: ./src/site/resources: Is a directory
cat: ./src/site/resources/css: Is a directory
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  margin: 0px;
  padding: 0px;
}
table {
  padding:0px;
  width: 100%;
  margin-left: -2px;
  margin-right: -2px;
}
acronym {
  cursor: help;
  border-bottom: 1px dotted #feb;
}
table.bodyTable th, table.bodyTable td {
  padding: 2px 4px 2px 4px;
  vertical-align: top;
}
div.clear{
  clear:both;
  visibility: hidden;
}
div.clear hr{
  display: none;
}
#bannerLeft, #bannerRight {
  font-size: xx-large;
  font-weight: bold;
}
#bannerLeft img, #bannerRight img {
  margin: 0px;
}
.xleft, #bannerLeft img {
  float:left;
}
.xright, #bannerRight {
  float:right;
}
#banner {
  padding: 0px;
}
#breadcrumbs {
  padding: 3px 10px 3px 10px;
}
#leftColumn {
 width: 170px;
 float:left;
 overflow: auto;
}
#bodyColumn {
  margin-right: 1.5em;
  margin-left: 197px;
}
#legend {
  padding: 8px 0 8px 0;
}
#navcolumn {
  padding: 8px 4px 0 8px;
}
#navcolumn h5 {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn ul {
  margin: 0;
  padding: 0;
  font-size: small;
}
#navcolumn li {
  list-style-type: none;
  background-image: none;
  background-repeat: no-repeat;
  background-position: 0 0.4em;
  padding-left: 16px;
  list-style-position: outside;
  line-height: 1.2em;
  font-size: smaller;
}
#navcolumn li.expanded {
  background-image: url(../images/expanded.gif);
}
#navcolumn li.collapsed {
  background-image: url(../images/collapsed.gif);
}
#navcolumn li.none {
  text-indent: -1em;
  margin-left: 1em;
}
#poweredBy {
  text-align: center;
}
#navcolumn img {
  margin-top: 10px;
  margin-bottom: 3px;
}
#poweredBy img {
  display:block;
  margin: 20px 0 20px 17px;
}
#search img {
    margin: 0px;
    display: block;
}
#search #q, #search #btnG {
    border: 1px solid #999;
    margin-bottom:10px;
}
#search form {
    margin: 0px;
}
#lastPublished {
  font-size: x-small;
}
.navSection {
  margin-bottom: 2px;
  padding: 8px;
}
.navSectionHead {
  font-weight: bold;
  font-size: x-small;
}
.section {
  padding: 4px;
}
#footer {
  padding: 3px 10px 3px 10px;
  font-size: x-small;
}
#breadcrumbs {
  font-size: x-small;
  margin: 0pt;
}
.source {
  padding: 12px;
  margin: 1em 7px 1em 7px;
}
.source pre {
  margin: 0px;
  padding: 0px;
}
#navcolumn img.imageLink, .imageLink {
  padding-left: 0px;
  padding-bottom: 0px;
  padding-top: 0px;
  padding-right: 2px;
  border: 0px;
  margin: 0px;
}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

body {
  padding: 0px 0px 10px 0px;
}
body, td, select, input, li{
  font-family: Verdana, Helvetica, Arial, sans-serif;
  font-size: 13px;
}
code{
  font-family: Courier, monospace;
  font-size: 13px;
}
a {
  text-decoration: none;
}
a:link {
  color:#36a;
}
a:visited  {
  color:#47a;
}
a:active, a:hover {
  color:#69c;
}
#legend li.externalLink {
  background: url(../images/external.png) left top no-repeat;
  padding-left: 18px;
}
a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
  background: url(../images/external.png) right center no-repeat;
  padding-right: 18px;
}
#legend li.newWindow {
  background: url(../images/newwindow.png) left top no-repeat;
  padding-left: 18px;
}
a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
  background: url(../images/newwindow.png) right center no-repeat;
  padding-right: 18px;
}
h2 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #999;
  color: #900;
  background-color: #ddd;
  font-weight:900;
  font-size: x-large;
}
h3 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  color: #900;
  background-color: #eee;
  font-weight: normal;
  font-size: large;
}
h4 {
  padding: 4px 4px 4px 6px;
  border: 1px solid #bbb;
  color: #900;
  background-color: #fff;
  font-weight: normal;
  font-size: large;
}
h5 {
  padding: 4px 4px 4px 6px;
  color: #900;
  font-size: medium;
}
p {
  line-height: 1.3em;
  font-size: small;
}
#breadcrumbs {
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #aaa;
  background-color: #ccc;
}
#leftColumn {
  margin: 10px 0 0 5px;
  border: 1px solid #999;
  background-color: #eee;
  padding-bottom: 3px; /* IE-9 scrollbar-fix */
}
#navcolumn h5 {
  font-size: smaller;
  border-bottom: 1px solid #aaaaaa;
  padding-top: 2px;
  color: #000;
}

table.bodyTable th {
  color: white;
  background-color: #bbb;
  text-align: left;
  font-weight: bold;
}

table.bodyTable th, table.bodyTable td {
  font-size: 1em;
}

table.bodyTable tr.a {
  background-color: #ddd;
}

table.bodyTable tr.b {
  background-color: #eee;
}

.source {
  border: 1px solid #999;
}
dl {
  padding: 4px 4px 4px 6px;
  border: 1px solid #aaa;
  background-color: #ffc;
}
dt {
  color: #900;
}
#organizationLogo img, #projectLogo img, #projectLogo span{
  margin: 8px;
}
#banner {
  border-bottom: 1px solid #fff;
}
.errormark, .warningmark, .donemark, .infomark {
  background: url(../images/icon_error_sml.gif) no-repeat;
}

.warningmark {
  background-image: url(../images/icon_warning_sml.gif);
}

.donemark {
  background-image: url(../images/icon_success_sml.gif);
}

.infomark {
  background-image: url(../images/icon_info_sml.gif);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#banner, #footer, #leftcol, #breadcrumbs, .docs #toc, .docs .courtesylinks, #leftColumn, #navColumn {
	display: none !important;
}
#bodyColumn, body.docs div.docs {
	margin: 0 !important;
	border: none !important
}
/* You can override this file with your own styles */cat: ./src/site/resources/images: Is a directory
GIF89a  €        !ù
  ,       DŽ`ºçžcŠ5
 ;GIF89a  €        !ù
  ,       „j
œ´Î ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuuÿÿÿ™  ÿÿÿÑðP   tRNSÿÿÿ @*©ô   PIDATxÚb`&& @P6#@`ÀÄÄä X˜ Ä†2™Ê« ›‰d@ AÔ3ƒ ( ± *‡ ½Üt    IEND®B`‚GIF89a  ÷     ÿÿÿ²±«£
q	
x
v
m¸;@’GJf46éÒÓ_Á·œ›‚
i
[¾½¹·«¦
˜—–“Šˆ~
}
s	q	p	n	XVL
ž

…ƒv
l	¾~Â®Â"±",¢9?‚6;{6:Ždfå³¶ðàáÂ$¿'¿)©OWÍ±³ÞÐÑÅ-Å/«*Ç"4À"3Øs}ôÖÙñÕØðÖÙúðñûòóÇ%8Ç&:È(=È*@È+AÃ*?É5H½=MÀM\ùñòÄ+BÉ.FÉ/GÉ0IË2MË3OÈ2NÇ<SôØÝË5RÌ6SÌ7UÞ‚”Ì:YË:YÍ<\Ì;[Í=^Í?aÍ@bÏBeóïðH 1K"4H!3F 1I"4g1Lm9Xr@bxHn>%9J.F¯p«±r®N3O²v´³x·µ{»@-EL6RO8V08G3O1:bGm3=4>7 C5AgOx?2ME7TmW†|d™}gŽu²š„Á^Vƒøððèààöððýýýûûûúúúôôôÿÿÿ                                                                                                                                                                                                                                                                                                      !ù   ,       Ï ;	H° AJ ýéÃg’ÁN’Þ´YcŒ—*
FrÃM™/]¨HI‚h $5iÎŒ³å
“%B€øéTÉ™0P8ÁÒ$À“2,Êã…‹•,Z(µ¤D‡ŒðL‰¢É¥¨@¡€¢;GŒÉá k$<Hd‡
>`ê' ‘!\2ƒ†?v°hp‰‡
uÚ@‹
.¨Xñà=	q˜0	)f$Tp„"F¼ˆQƒ´ÁGrêÌ‰CÇÁ€ ;GIF89a  æ     ÿÿÿýýþùúüøùûÚàërƒžÑÙæÕÜè×ÞéÖÝè	'SG]}]y¢Vp–OgŠLc…J`EYxCWtI^~FZyeªh„¬gƒ«j…­l‡®mˆ¯pŠ°Xl‹t²v´dy˜w´|”·~•¸w­€—¹uŠ©nž„š»ƒ™º…›¼zŽ¬ŠŸ¿w‰¤‹ ¿¡À¤Â…—²™¬Ç˜«Æ‚’©’¢º†•«¡²Ë¦¶Î©¹Ð­¼Ò¬»ÑŸ¬À±¿Ô°¾ÓµÂÖ¸ÅØ¼ÈÚÁÌÝÃÎÞÂÍÝ²¼ËÉÓâÆÐßËÔâÍÖäÌÕãÓÛçÒÚæÈÏÙéíóãçíõ÷úôöùóõø@TpAUqyŽ«}Ž¦•©Åž°É§´Å¹ÆØÀÉÕàæîßåíáçïåêñäéððó÷ïòöÝäíÜãìÛâëçìòæëñìðõëïôêîóØßçâèïñô÷öøúûüýúûüþþþÿÿÿ                                       !ù  r ,       »€r‚ƒ„…‚`fg`l\d
LGƒ^qqopnQmbj.‡™MObhNg r\oP6[igŒ%‚d›mE4k_^eL‚	PRahYcHB‚ËjfV<JD@>
‚FØ`\-5Z=97‚D`]
I'1ì30‚@KICA@,¨"‹é øcÇ
$X ñA‚ ?tàÀrå…Š!8h 2èÂ†@ PaÂ†b
 ;GIF89a  ÷     ÿÿÿ„™º¦¶Î§·Î¼ÈÚÇÑà¿ÈÕc~¢¡±Çßåíw¬™´¦¸Ë—®¿³Ã©½ËSq‚*/‚¡­%(#8='*!37,/(CH'AF&>B/2*,)FI"!Prkœ¼´¢À¸j•†„¬œtœ‹¢Å²FcOƒ­7G;ÅÖÈÈ£¬Ö©·Û´¸ß²2B.²á¥³â¦·ã«¸ä¬¸ä­ºå¯¼å±Â€¶ã©²à¢²à£œÎˆ¬Þ˜«Ü™©Ù—«Û—]•BÎ…¢Ô‹©Û‘Í„­Õ—]”>¡Ô„çñáˆ»f“Çr¿mˆ¶jÐæÂøûöbœ7Jw*U‡0WŠ2•ÑiÔäÈmª;Ag$r³?o¬=ež8fž8b›7ZŽ2YŠ1S‚.Jt)Qy1‰ËW…½Yu¤Qe‹FcˆE—¹{›½{“h­Î×Çîóê„ÊGv·@uµ?k¥:hž7`’3Jr(ÃE^‘3Q|,S~-Dh%}¼DEi&‹ÎQ²Å¢ÖàÍÏ×ÈãëÜIm&Qx+Ot)Mo(êïåLl&Ig%Gc$õ÷òþþþûûû÷÷÷ÿÿÿ                                                                                                                                                                                                                                                                                                                                                            !ù  ‹ ,       » 	H° A!,X E
aCF5pAÆ*01#†"NT0è ‡A˜ ¡ =†Y²&€ 	NR¤I’1ÅÁbà€JðÃ'À:oŒ8bŠ˜3‡ˆ-ÃeË“‹„Ñƒ™>Ô|‰Â¥(ØÌq£Å‹•4häÔ±(Ð‹m®TÉ"Jž;*d(Å"4l¨p	,Pø°(  ;GIF89a  æ     ÿÿÿ¸œ§º¡«b`awr}“Ž¤˜ º¡¨¿¬²Æ~Ž°„’²j| £¯ÇfsŠ„™º§·Î·Ä×ÄÏßËÔâ£´ÌÜãì[M@Kƒ?
àk®T£N
”GJ$ùwñsïrêpÛi×fÖfÔeÎcÍbÇ_¿[¼Z°T©Q¤OšJ
EDEƒ?i2	çnämÃ]¹X·WµV•H
‰A€=h2	]-Ëbùzù{ìz&«Z¿i&×iù(Ëj&ùƒ1ùƒ2ú†7Ìm-D2%Ìp4úŠBúŽIØ|DÌu@ú”Yú˜aæ\Ì}R×ˆ[¦v[úmI:2Íƒ`û¡vû¤û§ƒÙ‘s=.()ûª‹+*û­‘ç ….!Ó—<,&é¤5&!:*%²‡y*Švpë¬œ*,-¨‡‚š~zÇŸžÿÿÿ                           !ù  v ,       €v‚ƒ„…†	†…oae‹ƒd][s’v
iT
‹u^PW†\Z¥MI…gXU¥GAD„SRQ¥?4ƒVONK¥)#C‚nJHFE0=7'6*vB@%¥+8,l !5"9¥.:/Lt"$&(-3:øc‡Yìø‚f3càÄ‘#¦
;  ;‰PNG

   
IHDR      	   Óº&   gAMA  ¯È7Šé   tEXtSoftware Adobe ImageReadyqÉe<   PLTEuuu™  ÿÿÿÿÿÿ€8ÉÙ   tRNSÿÿÿ @*©ô   FIDATxÚb`fff„ f€ b ±™@€‘ €€ Æ „8@ !³™
@`6Ô€ ± L€Ø  & ±´Â^    IEND®B`‚<xsl:stylesheet
        version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:fo="http://www.w3.org/1999/XSL/Format">

    <xsl:attribute-set name="layout.master.set.base">
        <xsl:attribute name="page-width">8.26in</xsl:attribute>
        <xsl:attribute name="page-height">11.69in</xsl:attribute>
        <xsl:attribute name="margin-top">0.5in</xsl:attribute>
        <xsl:attribute name="margin-bottom">0.5in</xsl:attribute>
        <xsl:attribute name="margin-left">1in</xsl:attribute>
        <xsl:attribute name="margin-right">1in</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="body.pre" use-attribute-sets="base.pre.style">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.layout">
        <xsl:attribute name="table-omit-footer-at-break">false</xsl:attribute>
        <!-- note that table-layout="auto" is not supported by FOP 0.93 -->
        <xsl:attribute name="table-layout">fixed</xsl:attribute>
        <xsl:attribute name="width">100%</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.title.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.heading.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">8pt</xsl:attribute>
        <xsl:attribute name="font-weight">bold</xsl:attribute>
    </xsl:attribute-set>

    <xsl:attribute-set name="table.body.block" use-attribute-sets="base.block">
        <xsl:attribute name="font-size">7pt</xsl:attribute>
    </xsl:attribute-set>

</xsl:stylesheet>
